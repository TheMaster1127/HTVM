cpp.txt

libs: #include <cstdint>

note to me:

if we have a int64 or uint64

we must always use for int64 - LL and for uint64 use ULL 
ONLY if the value after = is a number not another varibale
so

// alredy decleared earlier
keyWordUint64_2 = 44073709551615ULL;
print(keyWordUint64_2)

and for a float varName = (if we see a number whit a . inthere we must alwasy add a f at the end)
like this:

when declearing
float keyWordFLOAT = 3.14f;
or if alredy decleared
keyWordFLOAT = 5.65f;

;;;;;;;;;;;;;;;;;;;;;;;;;;;

// Without values
double keyWordDouble;
char keyWordChar;
uint8_t keyWordUint8;
uint16_t keyWordUint16;
uint32_t keyWordUint32;
uint64_t keyWordUint64;
int keyWordINT;
std::string keyWordSTR; // Requires <string>
bool keyWordBOOL;
float keyWordFLOAT;
int8_t keyWordINT8;
int16_t keyWordINT16;
int32_t keyWordINT32;
int64_t keyWordINT64;
const int keyWordConst = 5; // Const
int keyWordLet;         // Mimicking let
auto keyWordVar = 6;        // Mimicking var (deduced type)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
double keyWordDouble = 3.14;
char keyWordChar = 'A';
uint8_t keyWordUint8 = 255;
uint16_t keyWordUint16 = 65535;
uint32_t keyWordUint32 = 4294967295;
uint64_t keyWordUint64 = 18446744073709551615ULL;
int keyWordINT = -42;
std::string keyWordSTR = "Hello";
bool keyWordBOOL = true;
float keyWordFLOAT = 3.14f;
int8_t keyWordINT8 = -128;
int16_t keyWordINT16 = 32767;
int32_t keyWordINT32 = -2147483648;
int64_t keyWordINT64 = 9223372036854775807LL;
const int keyWordConst = 100; // Const
int keyWordLet = 50;          // Mimicking let
auto keyWordVar = 25;         // Mimicking var


py.txt

# Without values
keyWordDouble = None    # Python dynamically handles types
keyWordChar = None
keyWordUint8 = None
keyWordUint16 = None
keyWordUint32 = None
keyWordUint64 = None
keyWordINT = None
keyWordSTR = None
keyWordBOOL = None
keyWordFLOAT = None
keyWordINT8 = None
keyWordINT16 = None
keyWordINT32 = None
keyWordINT64 = None
keyWordConst = None     # Mimicking const
keyWordLet = None       # Mimicking let
keyWordVar = None       # Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


# With values
keyWordDouble = 3.14
keyWordChar = 'A'
keyWordUint8 = 255
keyWordUint16 = 65535
keyWordUint32 = 4294967295
keyWordUint64 = 18446744073709551615
keyWordINT = -42
keyWordSTR = "Hello"
keyWordBOOL = True
keyWordFLOAT = 3.14
keyWordINT8 = -128
keyWordINT16 = 32767
keyWordINT32 = -2147483648
keyWordINT64 = 9223372036854775807
keyWordConst = 100      # Const is not enforced
keyWordLet = 50         # Mimicking let
keyWordVar = 25         # Mimicking var

js.txt

note to me:

for int64 and uint64 we need to add n at the end thats it

;;;;;;;;;;;;;;;;;;;;;;;;;;

// Without values
let keyWordDouble;  // Let keyword
let keyWordChar;
let keyWordUint8;
let keyWordUint16;
let keyWordUint32;
let keyWordUint64;
let keyWordINT;
let keyWordSTR;
let keyWordBOOL;
let keyWordFLOAT;
let keyWordINT8;
let keyWordINT16;
let keyWordINT32;
let keyWordINT64;
const keyWordConst = 5;  // Const must be initialized
let keyWordLet;      // Let keyword
var keyWordVar;      // Var keyword

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
let keyWordDouble = 3.14;
let keyWordChar = 'A';
let keyWordUint8 = 255;
let keyWordUint16 = 65535;
let keyWordUint32 = 4294967295;
let keyWordUint64 = 18446744073709551615n;
let keyWordINT = -42;
let keyWordSTR = "Hello";
let keyWordBOOL = true;
let keyWordFLOAT = 3.14;
let keyWordINT8 = -128;
let keyWordINT16 = 32767;
let keyWordINT32 = -2147483648;
let keyWordINT64 = 9223372036854775807n;
const keyWordConst = 100; // Const is immutable
let keyWordLet = 50;      // Let keyword
var keyWordVar = 25;      // Var keyword


go.txt

// Without values
var keyWordDouble float64
var keyWordChar byte
var keyWordUint8 uint8
var keyWordUint16 uint16
var keyWordUint32 uint32
var keyWordUint64 uint64
var keyWordINT int
var keyWordSTR string
var keyWordBOOL bool
var keyWordFLOAT float32
var keyWordINT8 int8
var keyWordINT16 int16
var keyWordINT32 int32
var keyWordINT64 int64
const keyWordConst = 0  // Const (requires value)
var keyWordLet int      // Mimicking let
var keyWordVar int      // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


// With values
var keyWordDouble float64 = 3.14
var keyWordChar byte = 'A'
var keyWordUint8 uint8 = 255
var keyWordUint16 uint16 = 65535
var keyWordUint32 uint32 = 4294967295
var keyWordUint64 uint64 = 18446744073709551615
var keyWordINT int = -42
var keyWordSTR string = "Hello"
var keyWordBOOL bool = true
var keyWordFLOAT float32 = 3.14
var keyWordINT8 int8 = -128
var keyWordINT16 int16 = 32767
var keyWordINT32 int32 = -2147483648
var keyWordINT64 int64 = 9223372036854775807
const keyWordConst = 100 // Const
var keyWordLet int = 50  // Mimicking let
var keyWordVar int = 25  // Mimicking var

lua.txt

-- Without values
keyWordDouble = nil
keyWordChar = nil
keyWordUint8 = nil
keyWordUint16 = nil
keyWordUint32 = nil
keyWordUint64 = nil
keyWordINT = nil
keyWordSTR = nil
keyWordBOOL = nil
keyWordFLOAT = nil
keyWordINT8 = nil
keyWordINT16 = nil
keyWordINT32 = nil
keyWordINT64 = nil
keyWordConst = nil -- Lua has no const, mimic with naming convention
keyWordLet = nil   -- Mimicking let
keyWordVar = nil   -- Mimicking var


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


-- With values
keyWordDouble = 3.14
keyWordChar = "A" -- Lua doesn't have char type, strings are used
keyWordUint8 = 255
keyWordUint16 = 65535
keyWordUint32 = 4294967295
keyWordUint64 = 18446744073709551615
keyWordINT = -42
keyWordSTR = "Hello"
keyWordBOOL = true
keyWordFLOAT = 3.14
keyWordINT8 = -128
keyWordINT16 = 32767
keyWordINT32 = -2147483648
keyWordINT64 = 9223372036854775807
keyWordConst = 100 -- Mimic const by avoiding reassignment
keyWordLet = 50    -- Mimicking let
keyWordVar = 25    -- Mimicking var


cs.txt

note to me:

if we have a int64 or uint64

we must always use for int64 - L and for uint64 use UL
ONLY if the value after = is a number not another variable
so

// already declared earlier
keyWordULong_2 = 44073709551615UL;
Console.WriteLine(keyWordULong_2);

and for a float varName = (if we see a number with a . in there we must always add an f at the end)
like this:

when declaring
float keyWordFLOAT = 3.14f;
or if already declared
keyWordFLOAT = 5.65f;

;;;;;;;;;;;;;;;;;;;;;;;;;;;

// Without values
double keyWordDouble;
char keyWordChar;
byte keyWordUint8;
ushort keyWordUint16;
uint keyWordUint32;
ulong keyWordUint64;
int keyWordINT;
string keyWordSTR;
bool keyWordBOOL;
float keyWordFLOAT;
sbyte keyWordINT8;
short keyWordINT16;
int keyWordINT32;
long keyWordINT64;
const int keyWordConst = 0; // Const must be initialized
int keyWordLet;             // Mimicking let

//  The contextual keyword 'var' may only appear within a local variable declaration or in script code
var keyWordVar = 5;   // Implicitly-typed variables must be initialized

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


// With values
double keyWordDouble = 3.14;
char keyWordChar = 'A';
byte keyWordUint8 = 255;
ushort keyWordUint16 = 65535;
uint keyWordUint32 = 4294967295;
ulong keyWordUint64 = 18446744073709551615UL;
int keyWordINT = -42;
string keyWordSTR = "Hello";
bool keyWordBOOL = true;
float keyWordFLOAT = 3.14f;
sbyte keyWordINT8 = -128;
short keyWordINT16 = 32767;
int keyWordINT32 = -2147483648;
long keyWordINT64 = 9223372036854775807L;
const int keyWordConst = 100; // Const
int keyWordLet = 50;          // Mimicking let

//  The contextual keyword 'var' may only appear within a local variable declaration or in script code
var keyWordVar = 25;          // Implicitly-typed variables must be initialized

  

java.txt

note to me:

whne reassinging vars whit uint8 and uint16 allawats add (byte) or (short) after the = like this:
keyWordUint8 = (byte) 66;  
keyWordUint16 = (short) 655; 

or both int64 and uint64 since java dont have uint we just use long and-
make sure if its a number for a uint64 and int64 we add L at the and 
no need for an example

we also do the float f you know 5.56f;

VERY IMPORATNT IF A VAR IS decared in the main func WE REMOVE THE static OK

;;;;;;;;;;;;;;;;;;;;;;

// Without values
static double keyWordDouble;
static char keyWordChar;
static byte keyWordUint8;
static short keyWordUint16;
static int keyWordUint32;
static long keyWordUint64;
static int keyWordINT;
static String keyWordSTR;
static boolean keyWordBOOL;
static float keyWordFLOAT;
static byte keyWordINT8;
static short keyWordINT16;
static int keyWordINT32;
static long keyWordINT64;
final static int keyWordConst = 0; // Const must be initialized
static int keyWordLet;             // Mimicking let
static int keyWordVar;             // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
// With values
static double keyWordDouble = 3.14;
static char keyWordChar = 'A';
static byte keyWordUint8 = (byte) 255;
static short keyWordUint16 = (short) 65535;
static int keyWordUint32 = 429496729;
static long keyWordUint64 = 1844674407370955161L;
static int keyWordINT = -42;
static String keyWordSTR = "Hello";
static boolean keyWordBOOL = true;
static float keyWordFLOAT = 3.14f;
static byte keyWordINT8 = -128;
static short keyWordINT16 = 32767;
static int keyWordINT32 = -2147483648;
static long keyWordINT64 = 9223372036854775807L;
final static int keyWordConst = 100; // Const
static int keyWordLet = 50;          // Mimicking let
static int keyWordVar = 25;          // Mimicking var


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


kt.txt

note to me:

val = const

const val:
Immutable: Just like val, a const val is immutable, meaning its value cannot be changed after it is assigned.
Compile-time constant: The key difference is that const val values are evaluated at compile-time, which makes them suitable for use in places that require constant values, like annotations, or for optimization purposes.
Only for certain types: You can only use const val with primitive types (Int, Long, Double, Char, Boolean, String) and enum constants.


if we have a int64 or uint64

we must always use for int64 - L and for uint64 use uL 
ONLY if the value after = is a number not another varibale
so

// alredy decleared earlier
keyWordUint64_2 = 44073709551615uL
print(keyWordUint64_2)

and for a float varName = (if we see a number whit a . inthere we must alwasy add a f at the end)
like this:

when declearing
var keyWordFLOAT: Float = 3.14f
or if alredy decleared
keyWordFLOAT = 5.65f



;;;;;;;;;;;

// Without values
var keyWordDouble: Double? = null
var keyWordChar: Char? = null
var keyWordUint8: UByte? = null
var keyWordUint16: UShort? = null
var keyWordUint32: UInt? = null
var keyWordUint64: ULong? = null
var keyWordINT: Int? = null
var keyWordSTR: String? = null
var keyWordBOOL: Boolean? = null
var keyWordFLOAT: Float? = null
var keyWordINT8: Byte? = null
var keyWordINT16: Short? = null
var keyWordINT32: Int? = null
var keyWordINT64: Long? = null
val keyWordConst: Int = 0 // Const (read-only val)
var keyWordLet: Int = 0       // Mimicking let
var keyWordVar: Int = 0       // Mimicking var


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
var keyWordDouble: Double = 3.14
var keyWordChar: Char = 'A'
var keyWordUint8: UByte = 255u
var keyWordUint16: UShort = 65535u
var keyWordUint32: UInt = 4294967295u
var keyWordUint64: ULong = 18446744073709551615uL
var keyWordINT: Int = -42
var keyWordSTR: String = "Hello"
var keyWordBOOL: Boolean = true
var keyWordFLOAT: Float = 3.14f
var keyWordINT8: Byte = -128
var keyWordINT16: Short = 32767
var keyWordINT32: Int = -2147483648
var keyWordINT64: Long = 9223372036854775807L
val keyWordConst: Int = 100 // Const
var keyWordLet: Int = 50    // Mimicking let
var keyWordVar: Int = 25    // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



rb.txt

# Without values
keyWordDouble = nil
keyWordChar = nil
keyWordUint8 = nil
keyWordUint16 = nil
keyWordUint32 = nil
keyWordUint64 = nil
keyWordINT = nil
keyWordSTR = nil
keyWordBOOL = nil
keyWordFLOAT = nil
keyWordINT8 = nil
keyWordINT16 = nil
keyWordINT32 = nil
keyWordINT64 = nil
keyWordConst = nil  # Mimicking const with naming convention
keyWordLet = nil    # Mimicking let
keyWordVar = nil    # Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# With values
keyWordDouble = 3.14
keyWordChar = "A"
keyWordUint8 = 255
keyWordUint16 = 65535
keyWordUint32 = 4294967295
keyWordUint64 = 18446744073709551615
keyWordINT = -42
keyWordSTR = "Hello"
keyWordBOOL = true
keyWordFLOAT = 3.14
keyWordINT8 = -128
keyWordINT16 = 32767
keyWordINT32 = -2147483648
keyWordINT64 = 9223372036854775807
keyWordConst = 100  # Mimicking const
keyWordLet = 50     # Mimicking let
keyWordVar = 25     # Mimicking var


nim.txt

note to me:

when the user changes a varible that is:
uint32 or uint64
we must use 'u32 or 'u64 at the end of it

keyWordUint32 = 4254967295'u32
echo "keyWordUint32: ", keyWordUint32

UNLESS
its a variavle

keyWordUint32 = keyWordUint322
echo "keyWordUint32: ", keyWordUint32

detect this by checking that the value after =  is ONLY a number

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# Without values
var keyWordDouble: float
var keyWordChar: char
var keyWordUint8: uint8
var keyWordUint16: uint16
var keyWordUint32: uint32
var keyWordUint64: uint64
var keyWordINT: int
var keyWordSTR: string
var keyWordBOOL: bool
var keyWordFLOAT: float
var keyWordINT8: int8
var keyWordINT16: int16
var keyWordINT32: int32
var keyWordINT64: int64
const keyWordConst = 0  # Const (must be initialized)
var keyWordLet: int     # Mimicking let
var keyWordVar: int     # Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# With values
var keyWordDouble: float = 3.14
var keyWordChar: char = 'A'
var keyWordUint8: uint8 = 255
var keyWordUint16: uint16 = 65535
var keyWordUint32: uint32 = 4294967295'u32  # Explicitly cast to uint32
var keyWordUint64: uint64 = 18446744073709551615'u64  # Explicitly cast to uint64
var keyWordINT: int = -42
var keyWordSTR: string = "Hello"
var keyWordBOOL: bool = true
var keyWordFLOAT: float = 3.14
var keyWordINT8: int8 = -128
var keyWordINT16: int16 = 32767
var keyWordINT32: int32 = -2147483648
var keyWordINT64: int64 = 9223372036854775807
const keyWordConst = 100  # Const
var keyWordLet: int = 50     # Mimicking let
var keyWordVar: int = 25     # Mimicking var
 

ahk.txt

no need ist just

var := val

swift.txt

// Without values
var keyWordDouble: Double
var keyWordChar: Character
var keyWordUint8: UInt8
var keyWordUint16: UInt16
var keyWordUint32: UInt32
var keyWordUint64: UInt64
var keyWordINT: Int
var keyWordSTR: String
var keyWordBOOL: Bool
var keyWordFLOAT: Float
var keyWordINT8: Int8
var keyWordINT16: Int16
var keyWordINT32: Int32
var keyWordINT64: Int64
let keyWordConst = 0  // Const (must be initialized)
var keyWordLet: Int   // Mimicking let
var keyWordVar: Int   // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
var keyWordDouble: Double = 3.14
var keyWordChar: Character = "A"
var keyWordUint8: UInt8 = 255
var keyWordUint16: UInt16 = 65535
var keyWordUint32: UInt32 = 4294967295
var keyWordUint64: UInt64 = 18446744073709551615
var keyWordINT: Int = -42
var keyWordSTR: String = "Hello"
var keyWordBOOL: Bool = true
var keyWordFLOAT: Float = 3.14
var keyWordINT8: Int8 = -128
var keyWordINT16: Int16 = 32767
var keyWordINT32: Int32 = -2147483648
var keyWordINT64: Int64 = 9223372036854775807
let keyWordConst = 100  // Const
var keyWordLet: Int = 50    // Mimicking let
var keyWordVar: Int = 25    // Mimicking var


dart.txt

note:

for the Uint64:

BigInt keyWordUint64 = BigInt.parse("18446744073709551615");

we need to allways modyfy it inside ONLY IF A NUMBER

BigInt.parse("18446744073709551615");


so

"BigInt.parse(" . Chr(34) . value . Chr(34) . ");"

when modyfing dont put it see:

keyWordUint64 = keyWordUint64_2;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With nullable types (adding ? makes them nullable means null)

// Without values
double? keyWordDouble;
String? keyWordChar;
int? keyWordUint8;
int? keyWordUint16;
int? keyWordUint32;
int? keyWordUint64;
int? keyWordINT;
String? keyWordSTR;
bool? keyWordBOOL;
double? keyWordFLOAT;
int? keyWordINT8;
int? keyWordINT16;
int? keyWordINT32;
int? keyWordINT64;
final keyWordConst = 0;  // Const (must be initialized)
int? keyWordLet;          // Mimicking let (nullable)
var keyWordVar;          // Mimicking var (can be dynamically typed)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
double keyWordDouble = 3.14;
String keyWordChar = "A";
int keyWordUint8 = 255;
int keyWordUint16 = 65535;
int keyWordUint32 = 4294967295;
BigInt keyWordUint64 = BigInt.parse("18446744073709551615");
int keyWordINT = -42;
String keyWordSTR = "Hello";
bool keyWordBOOL = true;
double keyWordFLOAT = 3.14;
int keyWordINT8 = -128;
int keyWordINT16 = 32767;
int keyWordINT32 = -2147483648;
int keyWordINT64 = 9223372036854775807;
final keyWordConst = 100;  // Const
int keyWordLet = 50;       // Mimicking let
var keyWordVar = 25;       // Mimicking var


ts.txt

note to me:

for int64 and uint64 we need to add n at the end thats it

;;;;;;;;;;;;;;;;;;;;;;;;;;
// Without values
let keyWordDouble: number;
let keyWordChar: string;
let keyWordUint8: number;
let keyWordUint16: number;
let keyWordUint32: number;
let keyWordUint64: bigint;
let keyWordINT: number;
let keyWordSTR: string;
let keyWordBOOL: boolean;
let keyWordFLOAT: number;
let keyWordINT8: number;
let keyWordINT16: number;
let keyWordINT32: number;
let keyWordINT64: bigint;
const keyWordConst: number = 0; // Const (must be initialized)
let keyWordLet: number;        // Mimicking let
var keyWordVar: number;        // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
let keyWordDouble: number = 3.14;
let keyWordChar: string = "A";
let keyWordUint8: number = 255;
let keyWordUint16: number = 65535;
let keyWordUint32: number = 4294967295;
let keyWordUint64: bigint = 18446744073709551615n;
let keyWordINT: number = -42;
let keyWordSTR: string = "Hello";
let keyWordBOOL: boolean = true;
let keyWordFLOAT: number = 3.14;
let keyWordINT8: number = -128;
let keyWordINT16: number = 32767
let keyWordINT32: number = -2147483648;
let keyWordINT64: bigint = 9223372036854775807n;
const keyWordConst: number = 100;  // Const
let keyWordLet: number = 50;       // Mimicking let
var keyWordVar: number = 25;       // Mimicking var



groovy.txt

// Without values
def keyWordDouble
def keyWordChar
def keyWordUint8
def keyWordUint16
def keyWordUint32
def keyWordUint64
def keyWordINT
def keyWordSTR
def keyWordBOOL
def keyWordFLOAT
def keyWordINT8
def keyWordINT16
def keyWordINT32
def keyWordINT64
final keyWordConst = 0  // Const (must be initialized)
def keyWordLet  // Mimicking let
def keyWordVar  // Mimicking var

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

// With values
def keyWordDouble = 3.14
def keyWordChar = 'A'
def keyWordUint8 = 255
def keyWordUint16 = 65535
def keyWordUint32 = 4294967295
def keyWordUint64 = 18446744073709551615
def keyWordINT = -42
def keyWordSTR = "Hello"
def keyWordBOOL = true
def keyWordFLOAT = 3.14
def keyWordINT8 = -128
def keyWordINT16 = 32767
def keyWordINT32 = -2147483648
def keyWordINT64 = 9223372036854775807
final keyWordConst = 100  // Const
def keyWordLet = 50      // Mimicking let
def keyWordVar = 25      // Mimicking var


