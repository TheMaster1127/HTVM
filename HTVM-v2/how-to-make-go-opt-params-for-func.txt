package main

import "fmt"

// FunctionConfig stores configuration
type FunctionConfig struct {
    ParamVar2 string
    ParamVar3 bool
    ParamVar4 float64
}

// Main function to simulate passing optional parameters
func funcName1(paramVar1 int, opts ...interface{}) {
    config := &FunctionConfig{
        ParamVar2: "",   // Default values
        ParamVar3: false,
        ParamVar4: 1.5,
    }

    if len(opts) > 0 {
        if strVal, ok := opts[0].(string); ok {
            config.ParamVar2 = strVal
        }
    }
    if len(opts) > 1 {
        if boolVal, ok := opts[1].(bool); ok {
            config.ParamVar3 = boolVal
        }
    }
    if len(opts) > 2 {
        if floatVal, ok := opts[2].(float64); ok {
            config.ParamVar4 = floatVal
        }
    }

    fmt.Printf("ParamVar1: %d, ParamVar2: %s, ParamVar3: %t, ParamVar4: %.2f\n",
        paramVar1, config.ParamVar2, config.ParamVar3, config.ParamVar4)
}

func main() {
    funcName1(42, "CustomString", true, 3.5)  // Pass everything
    funcName1(56, "hi")                     // Pass fewer options
}
