import java.util.ArrayList;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import java.util.*;
public class Main
{


    public static String[] LoopParseFunc(String varString, String delimiter1, String delimiter2) {
        String[] items;
        if (delimiter1.isEmpty() && delimiter2.isEmpty()) {
            // If no delimiters are provided, return an array of characters
            items = varString.split("");
        } else {
            // Construct the regular expression pattern for splitting the string
            String pattern = "[" + Pattern.quote(delimiter1) + Pattern.quote(delimiter2) + "]+";
            // Split the string using the constructed pattern
            items = varString.split(pattern);
        }
        return items;
    }

// Print function for various types
    public static void print(Object value) {
        System.out.println(value);
    }

public static <T> void HTVM_Append(ArrayList<T> arr, T value) {
    arr.add(value);
}

public static <T> int HTVM_Size(ArrayList<T> arr) {
    return arr.size();
}


public static void main(String[] args) {
    // This is a preview of your language and how it will look.
    // This is a preview of your language and how it will look.
    // Here's how types will appear if you only define them:
    int varName1 = 0;
    String varName2 = "";
    boolean varName3 = false;
    float varName4 = 0.0f;
    byte varName5 = (byte) 0;
    short varName6 = (short) 0;
    int varName7 = 0;
    long varName8 = 0L;
    // Alternatively, you can define them like this:
    int varName9 = 34;
    // Here is how to define a function with static types if you convert to C++.
    // However, it will still work even if you are not converting to C++; types will be stripped away.
    public static void funcName1(int paramVar1, Object... __HTVM_V2_TO_JAVA_optionalParams__) {
        String paramVar2 = "";
        boolean paramVar3 = false;
        float paramVar4 = 1.5;
        if (__HTVM_V2_TO_JAVA_optionalParams__.length > 0) paramVar2 = (String) __HTVM_V2_TO_JAVA_optionalParams__[0];
        if (__HTVM_V2_TO_JAVA_optionalParams__.length > 1) paramVar3 = (boolean) __HTVM_V2_TO_JAVA_optionalParams__[1];
        if (__HTVM_V2_TO_JAVA_optionalParams__.length > 2) paramVar4 = (float) __HTVM_V2_TO_JAVA_optionalParams__[2];
        if (varName1 == paramVar1) {
            print("varName1 is equal to paramVar1");
        }
        else if (varName1 != paramVar1 || varName1 <= paramVar1) {
            print("varName1 is less than or equal to paramVar1");
        } else {
            print("varName1 is NOT less than or equal to paramVar1 or something else");
        }
        return;
    }
    funcName1(varName9);
    // this is how a while loop works in your lang
    boolean var1 = false;
    while (var1 == false) {
        print("we are inside the while loop");
        var1 = true;
    }
    print("we are outside the while loop");
    // this is how to use a loop whit arrays
    ArrayList<String> array123 = new ArrayList<>(List.of("hey"));
    HTVM_Append(array123, "hello");
    HTVM_Append(array123, "how");
    HTVM_Append(array123, "are");
    HTVM_Append(array123, "you");
    HTVM_Append(array123, "doing");
    for (int A_Index1 = 0; A_Index1 < HTVM_Size(array123) + 0; A_Index1++) {
        print("iteration: " + STR(A_Index1));
        print("Item: " + array123.get(A_Index1));
    }
    print("this is how the escape char looks like \nthis is a new line");
    /*
    this is a comment block
    this is a comment block
    */
    // this is how to use an AutoHotKey like Loop
    for (int A_Index2 = 0; A_Index2 < 10 + 0; A_Index2++) {
        if (A_Index2 % 2 == 0) {
            continue;
        }
        print(A_Index2);
    }
    // this is how to use an AutoHotKey like infinite Loop
    for (int A_Index3 = 0; ; A_Index3++) {
        if (A_Index3 == 5) {
            break;
        } else {
            print(A_Index3);
        }
    }
    // this is how to use an AutoHotKey like Loop, parse
    String someText = "hello how are you doing\ntoday we are good.";
    String[] items4 = LoopParseFunc(someText, " ", "\n");
    for (int A_Index4 = 0; A_Index4 < items4.length + 0; A_Index4++) {
        String A_LoopField4 = items4[A_Index4 - 0];
        print(A_LoopField4);
    }
    // Error Handling
    try {
        throw new Exception("Something went wrong!");
    }
    catch (Exception e)n{
    print(e.getMessage());
}
finally {
    print("Finally block executed");
}

}
}