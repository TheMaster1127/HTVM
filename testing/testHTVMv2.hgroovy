

def LoopParseFunc(String varString, String delimiter1 = "", String delimiter2 = "") {
    def items = []
    if (delimiter1 == "" && delimiter2 == "") {
        // If no delimiters are provided, return an array of characters
        items = varString.toList()
    } else {
        // Construct the regular expression pattern for splitting the string
        def pattern = "[${delimiter1}${delimiter2}]"
        // Split the string using the constructed pattern
        items = varString.split(pattern)
    }
    return items
}

// Print function
def print = { message ->
    System.out.print("$message\n\r")
}

def HTVM_Append(arr, value) {
    arr.add(value)
}

def HTVM_Size(arr) {
    return arr.size()
}


// This is a preview of your language and how it will look.
// This is a preview of your language and how it will look.
// Here's how types will appear if you only define them:
def varName1
def varName2
def varName3
def varName4
def varName5
def varName6
def varName7
def varName8
// Alternatively, you can define them like this:
def varName9 = 34
// Here is how to define a function with static types if you convert to C++.
// However, it will still work even if you are not converting to C++; types will be stripped away.
def funcName1(paramVar1, paramVar2 = "", paramVar3 = false, paramVar4 = 1.5) {
    if ((varName1 == paramVar1)) {
        print("varName1 is equal to paramVar1")
    }
    else if ((varName1 != paramVar1 || varName1 <= paramVar1)) {
        print("varName1 is less than or equal to paramVar1")
    } else {
        print("varName1 is NOT less than or equal to paramVar1 or something else")
    }
    return;
}
funcName1(varName9)
// this is how a while loop works in your lang
def var1 = false
while ((var1 == false)) {
    print("we are inside the while loop")
    var1 = true
}
print("we are outside the while loop")
// this is how to use a loop whit arrays
def array123 = ["hey"]
HTVM_Append(array123, "hello")
HTVM_Append(array123, "how")
HTVM_Append(array123, "are")
HTVM_Append(array123, "you")
HTVM_Append(array123, "doing")
for (A_Index1 in 0..<HTVM_Size(array123) + 0) {
    print("iteration: " + STR(A_Index1))
    print("Item: " + array123[A_Index1])
}
print("this is how the escape char looks like \nthis is a new line")
/*
this is a comment block
this is a comment block
*/
// this is how to use an AutoHotKey like Loop
for (A_Index2 in 0..<10 + 0) {
    if ((A_Index2 % 2 == 0)) {
        continue;
    }
    print(A_Index2)
}
// this is how to use an AutoHotKey like infinite Loop
for (int A_Index3 = 0; ; A_Index3++) {
    if ((A_Index3 == 5)) {
        break;
    } else {
        print(A_Index3)
    }
}
// this is how to use an AutoHotKey like Loop, parse
def someText = "hello how are you doing\ntoday we are good."
def items4 = LoopParseFunc(someText, " ", "\n")
for (A_Index4 in 0..<items4.size()) {
    def A_LoopField4 = items4[A_Index4 - 0]
    print(A_LoopField4)
}
// Error Handling
try {
    throw new Exception("Something went wrong!")
}
catch (Exception e) {
    print(e.message)
}
finally {
    print("Finally block executed")
}