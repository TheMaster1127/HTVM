

List<String> LoopParseFunc(String varString, [String delimiter1 = "", String delimiter2 = ""]) {
    List<String> items = [];
    if (delimiter1.isEmpty && delimiter2.isEmpty) {
        // If no delimiters are provided, return a list of characters
        items.addAll(varString.split(''));
    } else {
        // Construct the regular expression pattern for splitting the string
        String pattern = "[$delimiter1$delimiter2]+";
        // Split the string using the constructed pattern
        items.addAll(varString.split(RegExp(pattern)));
    }
    return items;
}

// Print function for various types

void HTVM_Append<T>(List<T> arr, T value) {
  arr.add(value);
}

int HTVM_Size<T>(List<T> arr) {
  return arr.length;
}


void main(List<String> arguments) {
    // This is a preview of your language and how it will look.
    // This is a preview of your language and how it will look.
    // Here's how types will appear if you only define them:
    int? varName1;
    String? varName2;
    bool? varName3;
    double? varName4;
    int? varName5;
    int? varName6;
    int? varName7;
    int? varName8;
    // Alternatively, you can define them like this:
    int varName9 = 34;
    // Here is how to define a function with static types if you convert to C++.
    // However, it will still work even if you are not converting to C++; types will be stripped away.
    void funcName1(int paramVar1, [String paramVar2 = "", bool paramVar3 = false, double paramVar4 = 1.5]) {
        if (varName1 == paramVar1) {
            print("varName1 is equal to paramVar1");
        }
        else if (varName1 != paramVar1 || varName1 <= paramVar1) {
            print("varName1 is less than or equal to paramVar1");
        } else {
            print("varName1 is NOT less than or equal to paramVar1 or something else");
        }
        return;
    }
    funcName1(varName9);
    // this is how a while loop works in your lang
    bool var1 = false;
    while (var1 == false) {
        print("we are inside the while loop");
        var1 = true;
    }
    print("we are outside the while loop");
    // this is how to use a loop whit arrays
    List<String> array123 = ["hey"];
    HTVM_Append(array123, "hello");
    HTVM_Append(array123, "how");
    HTVM_Append(array123, "are");
    HTVM_Append(array123, "you");
    HTVM_Append(array123, "doing");
    for (int A_Index1 = 0; A_Index1 < HTVM_Size(array123) + 0; A_Index1++) {
        print("iteration: " + STR(A_Index1));
        print("Item: " + array123[A_Index1]);
    }
    print("this is how the escape char looks like \nthis is a new line");
    /*
    this is a comment block
    this is a comment block
    */
    // this is how to use an AutoHotKey like Loop
    for (int A_Index2 = 0; A_Index2 < 10 + 0; A_Index2++) {
        if (A_Index2 % 2 == 0) {
            continue;
        }
        print(A_Index2);
    }
    // this is how to use an AutoHotKey like infinite Loop
    for (int A_Index3 = 0; ; A_Index3++) {
        if (A_Index3 == 5) {
            break;
        } else {
            print(A_Index3);
        }
    }
    // this is how to use an AutoHotKey like Loop, parse
    String someText = "hello how are you doing\ntoday we are good.";
    var items4 = LoopParseFunc(someText, " ", "\n");
    for (int A_Index4 = 0; A_Index4 < items4.length; A_Index4++) {
        var A_LoopField4 = items4[A_Index4 - 0];
        print(A_LoopField4);
    }
    // Error Handling
    try {
        throw Exception("Something went wrong!");
    }
    catch (e) {
        print(e);
    }
    finally {
        print("Finally block executed");
    }
}