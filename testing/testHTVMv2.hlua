

function infinite_HTVM_Lua_Loop_HTVM()
    local i = 0
    return function()
        i = i + 1
        return i
    end
end

function LoopParseFunc(varString, delimiter1, delimiter2)
    local items = {}
    delimiter1 = delimiter1 or ""
    delimiter2 = delimiter2 or ""
    
    -- Changed: Don't escape the delimiters since we want them literal
    -- Just use them directly in the pattern
    if delimiter1 == "" and delimiter2 == "" then
        for i = 1, #varString do
            table.insert(items, varString:sub(i, i))
        end
    else
        -- Changed: Simplified pattern to directly match \n and \r
        local pattern = delimiter1 .. delimiter2
        for item in varString:gmatch("([^" .. pattern .. "]+)") do
            table.insert(items, item)
        end
    end
    return items
end

-- Print function for different types

function HTVM_Append(arr, value)
    table.insert(arr, value)
end

function HTVM_Size(arr)
    return #arr
end


-- This is a preview of your language and how it will look.
-- This is a preview of your language and how it will look.
-- Here's how types will appear if you only define them:
varName1 = nil
varName2 = nil
varName3 = nil
varName4 = nil
varName5 = nil
varName6 = nil
varName7 = nil
varName8 = nil
-- Alternatively, you can define them like this:
varName9 = 34
-- Here is how to define a function with static types if you convert to C++.
-- However, it will still work even if you are not converting to C++; types will be stripped away.
function funcName1(paramVar1, paramVar2, paramVar3, paramVar4)
    paramVar2 = paramVar2 or ""
    paramVar3 = paramVar3 or false
    paramVar4 = paramVar4 or 1.5
    if (varName1 == paramVar1) then
        print("varName1 is equal to paramVar1")
    elseif (varName1 ~= paramVar1 or varName1 <= paramVar1) then
        print("varName1 is less than or equal to paramVar1")
    else
        print("varName1 is NOT less than or equal to paramVar1 or something else")
    end
    return
end
funcName1(varName9)
-- this is how a while loop works in your lang
var1 = false
while (var1 == false) do
    print("we are inside the while loop")
    var1 = true
end
print("we are outside the while loop")
-- this is how to use a loop whit arrays
array123 = {"hey"}
HTVM_Append(array123, "hello")
HTVM_Append(array123, "how")
HTVM_Append(array123, "are")
HTVM_Append(array123, "you")
HTVM_Append(array123, "doing")
for A_Index1 = 0 + 1 , HTVM_Size(array123) + 0 do
    print("iteration: " .. STR(A_Index1))
    print("Item: " .. array123[A_Index1])
end
print("this is how the escape char looks like \nthis is a new line")
--[[
this is a comment block
this is a comment block
]]
-- this is how to use an AutoHotKey like Loop
for A_Index2 = 0 + 1 , 10 + 0 do
    if (A_Index2 % 2 == 0) then
        goto continue0
    end
    print(A_Index2)
end
-- this is how to use an AutoHotKey like infinite Loop
for A_Index3 in infinite_HTVM_Lua_Loop_HTVM() do
    if (A_Index3 == 5) then
        break
    else
        print(A_Index3)
    end
end
-- this is how to use an AutoHotKey like Loop, parse
someText = "hello how are you doing\ntoday we are good."
items4 = LoopParseFunc(someText, " ", "\n")
for A_Index4 , A_LoopField4 in ipairs(items4) do
    A_LoopField4 = items4[A_Index4 - 0]
    print(A_LoopField4)
end
-- Error Handling
LUA DOSENT HAVE A TRY USE PROGRAMMING BLOCKS MAYBE IDK
    LUA DOSENT HAVE A THROW USE PROGRAMMING BLOCKS MAYBE IDK
end
LUA DOSENT HAVE A CATCH USE PROGRAMMING BLOCKS MAYBE IDK
    print(e)
end
LUA DOSENT HAVE A FINALLY USE PROGRAMMING BLOCKS MAYBE IDK
    print("Finally block executed")
end