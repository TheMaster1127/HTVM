package main
import (
"fmt"
"regexp"
)

func LoopParseFunc(varString string, delimiter1 string, delimiter2 string) []string {
    var items []string
    if delimiter1 == "" && delimiter2 == "" {
        // If no delimiters are provided, convert string to slice of strings
        items = make([]string, len(varString))
        for i, c := range varString {
            items[i] = string(c)
        }
    } else {
        // Construct the regular expression pattern for splitting the string
        pattern := fmt.Sprintf("[%s%s]+", delimiter1, delimiter2)
        // Split the string using the constructed pattern
        items = regexp.MustCompile(pattern).Split(varString, -1)
    }
    return items
}

func print(value interface{}) {
    fmt.Println(value)
}

// Append to a slice
func HTVM_Append[T any](arr *[]T, value T) {
    *arr = append(*arr, value)
}

// Get the size of a slice
func HTVM_Size[T any](arr []T) int {
    return len(arr)
}


func main() {
    // This is a preview of your language and how it will look.
    // This is a preview of your language and how it will look.
    // Here's how types will appear if you only define them:
    var varName1 int
    var varName2 string
    var varName3 bool
    var varName4 float32
    var varName5 int8
    var varName6 int16
    var varName7 int32
    var varName8 int64
    // Alternatively, you can define them like this:
    var varName9 int = 34
    // Here is how to define a function with static types if you convert to C++.
    // However, it will still work even if you are not converting to C++; types will be stripped away.
    func funcName1(paramVar1 int, __HTVM_V2_TO_GO_optionalParams__ ...interface{}) {
        paramVar2 := ""
        paramVar3 := false
        paramVar4 := 1.5
        if len(__HTVM_V2_TO_GO_optionalParams__) > 0 {
            paramVar2 = __HTVM_V2_TO_GO_optionalParams__[0].(string)
        }
        if len(__HTVM_V2_TO_GO_optionalParams__) > 1 {
            paramVar3 = __HTVM_V2_TO_GO_optionalParams__[1].(bool)
        }
        if len(__HTVM_V2_TO_GO_optionalParams__) > 2 {
            paramVar4 = __HTVM_V2_TO_GO_optionalParams__[2].(float32)
        }
        if (varName1 == paramVar1) {
            print("varName1 is equal to paramVar1")
        } else if (varName1 != paramVar1 || varName1 <= paramVar1) {
            print("varName1 is less than or equal to paramVar1")
        } else {
            print("varName1 is NOT less than or equal to paramVar1 or something else")
        }
        break
    }
    funcName1(varName9)
    // this is how a while loop works in your lang
    var var1 bool = false
    for (var1 == false) {
        print("we are inside the while loop")
        var1 = true
    }
    print("we are outside the while loop")
    // this is how to use a loop whit arrays
    array123 := []string{"hey"}
    HTVM_Append(&array123, "hello")
    HTVM_Append(&array123, "how")
    HTVM_Append(&array123, "are")
    HTVM_Append(&array123, "you")
    HTVM_Append(&array123, "doing")
    for A_Index1 := 0; A_Index1 < HTVM_Size(array123) + 0; A_Index1++ {
        print("iteration: " + STR(A_Index1))
        print("Item: " + array123[A_Index1])
    }
    print("this is how the escape char looks like \nthis is a new line")
    /*
    this is a comment block
    this is a comment block
    */
    // this is how to use an AutoHotKey like Loop
    for A_Index2 := 0; A_Index2 < 10 + 0; A_Index2++ {
        if (A_Index2 % 2 == 0) {
            continue
        }
        print(A_Index2)
    }
    // this is how to use an AutoHotKey like infinite Loop
    for A_Index3 := 0; ; A_Index3++ {
        if (A_Index3 == 5) {
            break
        } else {
            print(A_Index3)
        }
    }
    // this is how to use an AutoHotKey like Loop, parse
    var someText string = "hello how are you doing\ntoday we are good."
    items4 := LoopParseFunc(someText, " ", "\n")
    for _ , A_LoopField4 := range items4 {
        print(A_LoopField4)
    }
    // Error Handling
    GO DOSENT HAVE A TRY USE PROGRAMMING BLOCKS MAYBE IDK {
        GO DOSENT HAVE A THROW USE PROGRAMMING BLOCKS MAYBE IDK
    }
    GO DOSENT HAVE A CATCH USE PROGRAMMING BLOCKS MAYBE IDK {
        print(e)
    }
    GO DOSENT HAVE A FINALLY USE PROGRAMMING BLOCKS MAYBE IDK {
        print("Finally block executed")
    }
}