


___js start
allKeyWordsIn = ""; // Global variable to store the result
allKeyWordsOut = "";
allFunctionNamesString = ""; // Global string to store function names



async function getFunctionNames() {
    const url = 'https://raw.githubusercontent.com/TheMaster1127/HTVM/refs/heads/main/HTVM-instructions.txt';
    
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        const text = await response.text();
        
        // Split text by line and get lines starting from line 162
        const lines = text.split('\n').slice(162); // Line 162 starts at index 161
        
        // Extract function names that start with "name: "
        const functionNames = lines
            .map(line => line.trim()) // Trim each line
            .filter(line => line.startsWith("name: ")) // Only lines that start with "name: "
            .map(line => line.replace("name: ", "").trim()) // Get function name (remove "name: " part)
            .filter((value, index, self) => self.indexOf(value) === index); // Remove duplicates
        
        // Save the function names in the global variable
        allFunctionNamesString = functionNames.join('\n');
        
    } catch (error) {
        console.error('Error fetching the text file:', error);
    }
}

// Function to fetch the first 161 lines from a remote text file
async function fetchFirst161Lines(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        const text = await response.text();
        return text.split('\n').slice(0, 162).join('\n');
    } catch (error) {
        console.error('Error fetching the text file:', error);
        return null;
    }
}

// Main function to handle localStorage and data retrieval
async function getAllKeyWordsIn() {
    const id = new URLSearchParams(window.location.search).get('id');
    if (!id) {
        console.error('No ID found in the URL');
        return;
    }

    const storageKey = "htvm_lang_" + id;
    let storedData = localStorage.getItem(storageKey);
    
    // If the key exists, use localStorage data and return
    if (storedData !== null) {
        try {
            const arrayData = JSON.parse(storedData);
            if (Array.isArray(arrayData)) {
                allKeyWordsIn = arrayData.slice(0, 162).join('\n'); // Save in global variable
                return;
            } else {
                console.error('Stored data is not an array');
                return;
            }
        } catch (error) {
            console.error('Error parsing JSON from localStorage:', error);
            return;
        }
    }
    else
    {
        // If key is missing, fetch data from the remote file
    const url = 'https://raw.githubusercontent.com/TheMaster1127/HTVM/refs/heads/main/HTVM-instructions.txt';
    const fetchedData = await fetchFirst161Lines(url);
    if (fetchedData) 
    {
        localStorage.setItem(storageKey, JSON.stringify(fetchedData.split('\n'))); // Store in localStorage
        allKeyWordsIn = fetchedData; // Save in global variable
    } 
    else
    {
        console.error('Failed to fetch data from the remote file');
    } 
    }


}



___js end


func str fixSomeBugUGH()
{
str var123Out := ""




___js start

const id = new URLSearchParams(window.location.search).get('id');
if (!id) {
    console.error('No ID found in the URL');
    return;
}

const storageKey = "htvm_lang_" + id;
let storedData = localStorage.getItem(storageKey);

// If the key exists, use localStorage data and return
if (storedData !== null) {
    allKeyWordsIn = JSON.parse(storedData);

    // Convert the array into a string (each index becomes a new line)
    allKeyWordsIn = allKeyWordsIn.join('\n'); // This turns the array into a string with each element on a new line

    // Now you can use the allKeyWordsIn string here for further processing
    //console.log(allKeyWordsIn);  // Example of using the resulting string
} else {
    console.error('No data found in localStorage for the given key');
}

    ___js end    
        
str allKeyWordsIn_OUT := ""
str allKeyWordsIn_OUT_TEMP := ""

Loop, Parse, allKeyWordsIn, `n, `r
{
if (A_Index != 0) and (A_Index != 1)
{

allKeyWordsIn_OUT .= A_LoopField . "`n"

}
}
StringTrimRight, allKeyWordsIn_OUT, allKeyWordsIn_OUT, 1
var123Out := allKeyWordsIn_OUT


return var123Out
}


async func str getAllKeyWords()
{
await getAllKeyWordsIn()
await getFunctionNames()

___js start

const id = new URLSearchParams(window.location.search).get('id');
if (!id) {
    console.error('No ID found in the URL');
    return;
}

const storageKey = "htvm_lang_" + id;
let storedData = localStorage.getItem(storageKey);

// If the key exists, use localStorage data and return
if (storedData !== null) {
    allKeyWordsIn = JSON.parse(storedData);

    // Convert the array into a string (each index becomes a new line)
    allKeyWordsIn = allKeyWordsIn.join('\n'); // This turns the array into a string with each element on a new line

    // Now you can use the allKeyWordsIn string here for further processing
    //console.log(allKeyWordsIn);  // Example of using the resulting string
} else {
    console.error('No data found in localStorage for the given key');
}

    ___js end    
        
str allKeyWordsIn_OUT := ""
str allKeyWordsIn_OUT_TEMP := ""

Loop, Parse, allKeyWordsIn, `n, `r
{
if (A_Index != 0) and (A_Index != 1)
{

allKeyWordsIn_OUT .= A_LoopField . "`n"

}
}
StringTrimRight, allKeyWordsIn_OUT, allKeyWordsIn_OUT, 1
allKeyWordsOut := allKeyWordsIn_OUT

}

___js start

let allFunctionNamesString2 = "";


(async function () {
    await getAllKeyWords();
    //console.log(allKeyWordsOut);


___js end
allFunctionNamesString2 := Trim(StrReplace(allFunctionNamesString, Chr(10), "|"))
;print("=============================")
;print(allFunctionNamesString2)
;print("=============================")
___js start


// Get the URL parameter 'id'
const urlParams = new URLSearchParams(window.location.search);
const id = urlParams.get('id');

// Check if 'id' is present in the URL
if (id) {
    // Create the key for localStorage
    const storageKey = `htvm_lang_${id}_allFunctionNamesString`;
    const storageKey2 = `htvm_lang_${id}_allKeyWordsOut`;

    // Save 'allFunctionNamesString2' to localStorage
    localStorage.setItem(storageKey, allFunctionNamesString2);
    localStorage.setItem(storageKey2, allKeyWordsOut);
} else {
    console.error('URL parameter "id" is missing.');
}





})();





// Define the HTVM mode for Ace Editor
ace.define("ace/mode/htvm", ["require", "exports", "module", "ace/lib/oop", "ace/mode/text", "ace/mode/text_highlight_rules"], function(require, exports, module) {
    var oop = require("ace/lib/oop");
    var TextMode = require("ace/mode/text").Mode;
    var TextHighlightRules = require("ace/mode/text_highlight_rules").TextHighlightRules;

    var HTVMHighlightRules = function() {
        
        //console.log(new URLSearchParams(window.location.search).get('id'));
let allFunctionNamesString3 = "";
let allKeyWordsOut3 = "";

// Get the URL parameter 'id'
const urlParams = new URLSearchParams(window.location.search);
const id = urlParams.get('id');

// Check if 'id' is present in the URL
if (id) {
    // Create the key for localStorage
    const storageKey = `htvm_lang_${id}_allFunctionNamesString`;
    const storageKey2 = `htvm_lang_${id}_allKeyWordsOut`;

    // Retrieve 'allFunctionNamesString' from localStorage
    allFunctionNamesString3 = localStorage.getItem(storageKey);

    if (localStorage.getItem("htvm_lang_" + id))
    {
        allKeyWordsOut3 = fixSomeBugUGH();
    }
    else
    {
        allKeyWordsOut3 = localStorage.getItem(storageKey2);    
    }



} else {
    console.error('URL parameter "id" is missing.');
}



___js end
str builtInCommands_temp := ""
str htvmKeywords_temp := ""
str staticTypes_temp := ""
str builtInVars_temp := ""
str operators_temp := ""
str arrayMethods_temp := ""
str programmingBlocksAndImport_temp := ""
str htvm_trueFalseGlobalNull_temp := ""
str htvm_comment_temp := ""
str htvm_commentOpen1_temp := ""
str htvm_commentClose2_temp := ""

Loop, Parse, allKeyWordsOut3, `n, `r
{
if (Trim(A_LoopField) != "")
{

if (A_Index = 0)
{
Loop, Parse, A_LoopField, "|"
{
Loop, Parse, A_LoopField, `,
{
builtInCommands_temp .= Trim(A_LoopField) . "|"
}
}
}

if (A_Index = 1) or (A_Index = 2) or (A_Index = 3) or (A_Index = 4) or (A_Index = 5) or (A_Index = 64) or (A_Index = 65) or (A_Index = 66) or (A_Index = 67) or (A_Index = 68) or (A_Index = 69) or (A_Index = 70) or (A_Index = 71) or (A_Index = 72) or (A_Index = 73) or (A_Index = 74) or (A_Index = 75) or (A_Index = 76) or (A_Index = 78) or (A_Index = 79) or (A_Index = 80) or (A_Index = 81) or (A_Index = 93) or (A_Index = 94) or (A_Index = 95) or (A_Index = 96)
{
htvmKeywords_temp .= A_LoopField . "|"
}

if (A_Index = 77)
{
allFunctionNamesString3 .= "|" . Trim(A_LoopField)
}

if (A_Index >= 49) and (A_Index <= 63)
{
staticTypes_temp .= A_LoopField . "|"
}
if (A_Index >= 88) and (A_Index <= 92)
{
staticTypes_temp .= A_LoopField . "|"
}

if (A_Index = 145) or (A_Index = 146) or (A_Index = 6)
{
builtInVars_temp .= A_LoopField . "|"
}

if (A_Index >= 103) and (A_Index <= 126)
{
operators_temp .= A_LoopField . "|"
}

if (A_Index >= 140) and (A_Index <= 141)
{
operators_temp .= A_LoopField . "|"
}


if (A_Index >= 82) and (A_Index <= 87)
{
arrayMethods_temp .= Trim(StrReplace(A_LoopField, ".", "")) . "|"
}

if (A_Index >= 7) and (A_Index <= 43)
{
programmingBlocksAndImport_temp .= A_LoopField . "|"
}

if (A_Index = 98)
{
htvm_comment_temp := Trim(A_LoopField)
}

if (A_Index = 99)
{
htvm_commentOpen1_temp := Trim(A_LoopField)
}

if (A_Index = 100)
{
htvm_commentClose2_temp := Trim(A_LoopField)
}

if (A_Index = 46) or (A_Index = 47) or (A_Index = 48) or (A_Index = 97)
{
htvm_trueFalseGlobalNull_temp .= A_LoopField . "|"
}

}
}


StringTrimRight, builtInCommands_temp, builtInCommands_temp, 1
StringTrimRight, htvmKeywords_temp, htvmKeywords_temp, 1
StringTrimRight, staticTypes_temp, staticTypes_temp, 1
StringTrimRight, builtInVars_temp, builtInVars_temp, 1
StringTrimRight, operators_temp, operators_temp, 1
StringTrimRight, arrayMethods_temp, arrayMethods_temp, 1
StringTrimRight, programmingBlocksAndImport_temp, programmingBlocksAndImport_temp, 1
StringTrimRight, htvm_trueFalseGlobalNull_temp, htvm_trueFalseGlobalNull_temp, 1
___js start


var htvmKeywords = htvmKeywords_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var builtInCommands = builtInCommands_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var builtInFunctions = allFunctionNamesString3.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var staticTypes = staticTypes_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var builtInVars = builtInVars_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var arrayMethods = arrayMethods_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var programmingBlocksAndImport = programmingBlocksAndImport_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var htvm_trueFalseGlobalNull = htvm_trueFalseGlobalNull_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');
var htvm_operators = operators_temp.replace(/[^A-Za-z0-9_|\s]/g, '').replace(/^\d+/g, '').replace(/\|+/g, '|').replace(/^(\|)+|(\|)+$/g, '');

        
        
        var htvm_comment = htvm_comment_temp;

        // Escape special characters in the comment symbol (just in case)
        var escapedComment = htvm_comment.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        var htvm_commentOpen1 = htvm_commentOpen1_temp.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        var htvm_commentClose2 = htvm_commentClose2_temp.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

        this.$rules = {
            start: [
                { token: "comment", regex: escapedComment + ".*$" },
                { token: "comment.block", regex: new RegExp(htvm_commentOpen1), next: "comment_block" },
                { token: "keyword", regex: "\\b(?:" + htvmKeywords + ")\\b" },
                { token: "command", regex: "\\b(?:" + builtInCommands + ")(?=\\,)" },
                { token: "functions", regex: "\\b(?:" + builtInFunctions + ")(?=\\()" },
                { token: "BuildInFunc", regex: "\\b(?:" + builtInVars + ")\\b" },
                { token: "arrayMethods", regex: "\\.(?:" + arrayMethods + ")\\b" },
                { token: "static_types", regex: "\\b(?:" + staticTypes + ")\\b" },
                { token: "programmingBlocksAndImport", regex: "\\b(?:" + programmingBlocksAndImport + ")\\b" },
                { token: "operators", regex: "\\b(?:" + htvm_operators + ")\\b" },
                { token: "trueANDfalse", regex: "\\b(?:" + htvm_trueFalseGlobalNull + ")\\b" },
                { token: "variables", regex: "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b" },
                { token: "constant.numeric", regex: "\\b[0-9]+\\b" },
                { token: "braces_Open", regex: "\\{" },
                { token: "braces_Close", regex: "\\}" },
              { token: "string", regex: '".*?"' },
              // Multi-line comments
              {
                token: "comment.block", // Token for multi-line comments
               regex: new RegExp(htvm_commentOpen1),
                next: "comment_block",
              },
            ],
            comment_block: [
              {
                token: "comment.block",
                regex: new RegExp(htvm_commentClose2),
                next: "start", // Go back to the start state
              },
              {
                token: "comment.block",
                regex: /.*/, // Any other content within the comment
              },
            ],
          };
        };

  oop.inherits(HTVMHighlightRules, TextHighlightRules);

    var Mode = function() {
        this.HighlightRules = HTVMHighlightRules;
    };
    oop.inherits(Mode, TextMode);

    exports.Mode = Mode;
});
___js end
