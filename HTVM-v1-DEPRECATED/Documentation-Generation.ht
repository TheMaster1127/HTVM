str params := ""
str param1 := ""
str param2 := ""


params := Trim(GetParams())

if (Trim(StrSplit(params, "`n", 1)) = "")
{
print("no params Exiting...")
ExitApp()
}

Loop, Parse, params, `n, `r 
{
if (A_Index = 0)
{
print(A_LoopField) 
param1 := Trim(A_LoopField)
}
if (A_Index = 1) 
{
print(A_LoopField)
param2 := Trim(A_LoopField)
}

}


if (!FileExist(param1))
{
print("the file doesn't exist!!!")
ExitApp()
}

int checkIfFuncNameExists := 0
if (Trim(param2) != "")
{
checkIfFuncNameExists := 1
}


str instructionFileData := ""
instructionFileData := FileRead(Trim(param1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
int inFunc := 0

def obj funcData
{
arr str tempArrayInitOSP
prop arr str lang := tempArrayInitOSP
prop arr str name := tempArrayInitOSP
prop arr str desc := tempArrayInitOSP
}



Loop, Parse, instructionFileData, `n, `r
{

if (Trim(A_LoopField) = "funcEND======================funcEND==============")
{
inFunc := 0
}

if (inFunc = 1)
{

if (SubStr(Trim(A_LoopField), 1, 6) = "lang: ")
{
funcData.lang.add(Trim(A_LoopField))
}
else if (SubStr(Trim(A_LoopField), 1, 6) = "name: ")
{
funcData.name.add(Trim(A_LoopField))
}
else if (SubStr(Trim(A_LoopField), 1, 13) = "description: ")
{
funcData.desc.add(Trim(A_LoopField))
}



}


if (Trim(A_LoopField) = "func======================func==============")
{
inFunc := 1
}

}


arr str allFuncNames := sortArr(funcData.name)

str theFuncThatExistsIsCalled := ""

if (checkIfFuncNameExists = 1)
{
int exitedLoopCheckIfFuncNameExists := 0
Loop, % allFuncNames.size()
{
print(allFuncNames[A_Index])
if (StrLower(param2) = StrLower(Trim(StrSplit(allFuncNames[A_Index], ":", 2))))
{
theFuncThatExistsIsCalled := Trim(StrSplit(allFuncNames[A_Index], ":", 2))
exitedLoopCheckIfFuncNameExists := 1
break
}
}

if (exitedLoopCheckIfFuncNameExists = 1)
{
print("the func alredy exists!!! called: " + theFuncThatExistsIsCalled)
ExitApp()
}
else
{
print("the func dosent exists!!! YOU CAN USE IT")
ExitApp()
}

}

; allFuncNames

str allFuncNamesTemp := ""

str tempDesc := ""
str tempLang := ""


Loop, % funcData.name.size()
{
;print(funcData.name[A_Index])

allFuncNamesTemp := funcData.name[A_Index]
tempLang := funcData.lang[A_Index]
tempDesc := funcData.desc[A_Index]


Loop, % allFuncNames.size()
{
if (Trim(allFuncNamesTemp) = Trim(StrSplit(allFuncNames[A_Index], "|", 1)))
{

if (countChars(allFuncNames[A_Index], "|") = 0)
{
allFuncNames[A_Index] := allFuncNames[A_Index] . "|" . Trim(tempDesc) . "|" . Trim(tempLang)
}
else
{
allFuncNames[A_Index] := allFuncNames[A_Index] . "|" . Trim(tempLang)
}

}
}



}


arr str allFuncs

str tempstr := ""

str isLangCpp := ""
str isLangPy := ""
str isLangJs := ""

str allFuncsTempAdd := ""

int isDescNull := 0

Loop, % allFuncNames.size()
{
;print(allFuncNames[A_Index])
tempstr := Trim(allFuncNames[A_Index])
isDescNull := 0
allFuncsTempAdd := ""
isLangCpp := "No"
isLangPy := "No"
isLangJs := "No"
Loop, Parse, tempstr, "|"
{
if (SubStr(Trim(A_LoopField), 1, 8) = "lang: js")
{
isLangJs := "Yes"
}
else if (SubStr(Trim(A_LoopField), 1, 8) = "lang: py")
{
isLangPy := "Yes"
}
else if (SubStr(Trim(A_LoopField), 1, 9) = "lang: cpp")
{
isLangCpp := "Yes"
}
else if (SubStr(Trim(A_LoopField), 1, 6) = "name: ")
{
allFuncsTempAdd .= Trim(A_LoopField) . "|"
}
else if (SubStr(Trim(A_LoopField), 1, 13) = "description: ")
{
allFuncsTempAdd .= Trim(A_LoopField) . "|"
}

if (Trim(StrLower(A_LoopField)) = "description: null")
{
isDescNull := 1
}

}


if (isDescNull != 1)
{
allFuncsTempAdd .= isLangCpp . "|" . isLangPy . "|" . isLangJs
allFuncs.add(allFuncsTempAdd)
}

}
Loop, 20
{
;print("===========================================")
}


arr str categories

str theCurrentLine := ""
str theCurrentDescCategory := ""

int once := 0

int didWeFindSameCategory := 0
Loop, % allFuncs.size()
{
;print(allFuncs[A_Index])
once++
theCurrentLine := Trim(allFuncs[A_Index])
theCurrentDescCategory := Trim(StrSplit(theCurrentLine, "|", 2))
theCurrentDescCategory := Trim(StrSplit(theCurrentDescCategory, ":", 2))
theCurrentDescCategory := Trim(StrLower(Trim(StrSplit(theCurrentDescCategory, "~~~", 1))))

didWeFindSameCategory := 0
if (once = 1)
{
categories.add(theCurrentDescCategory . "`n" . theCurrentLine)
}
else
{

Loop, % categories.size()
{

if (Trim(StrLower(StrSplit(categories[A_Index], "`n", 1))) = Trim(theCurrentDescCategory))
{
didWeFindSameCategory := 1
categories[A_Index] := categories[A_Index] . "`n" . theCurrentLine
break
}
}
if (didWeFindSameCategory = 0)
{
categories.add(theCurrentDescCategory . "`n" . theCurrentLine)
}
}



}

Loop, 20
{
;print("==========================")
}


str outMDup := "# HTVM Documentation`n`n1. [Introduction](#introduction-to-htvm)  `nUnderstand why HTVM is the future of programming.  `n`n2. [OSP (Objectively Simplified Programming) Paradigm](#osp-objectively-simplified-programming-paradigm)  `nLearn about the new paradigm that replaces traditional object-oriented programming.  `n`n3. [Built-in Functions](#built-in-functions)  `nExplore the wide range of built-in functions categorized for ease of use.  `n`n---`n`n## Introduction to HTVM`n`n[Go back](#htvm-documentation) `n`nHTVM is a revolutionary tool designed to replace traditional programming. With HTVM, you can create your own programming language directly [here](https://themaster1127.github.io/HTVM/).`n`nWhat makes HTVM powerful:  `n- **Syntax Customization**:  `n  Hereâ€™s what you can change:  `n  - **Keywords**: Modify the keywords used for " . Chr(96) . "if" . Chr(96) . " statements, " . Chr(96) . "while" . Chr(96) . " loops, " . Chr(96) . "for" . Chr(96) . " loops, and more.  `n  - **Operators**: Change the operators like " . Chr(96) . "==" . Chr(96) . ", " . Chr(96) . "!=" . Chr(96) . ", and others to suit your needs.  `n`n- **Inspiration from AutoHotKey**:  `n  Features like " . Chr(96) . "Loop" . Chr(96) . " and " . Chr(96) . "Loop, Parse" . Chr(96) . " (just like in AutoHotKey) are supported and customizable.  `n`n- **Cross-Language Compatibility**:  `n  Languages created with HTVM can be transpiled into **C++**, **Python**, and **JavaScript**.  `n`n- **Static Typing**:  `n  Types are required when converting to C++, but are optional for Python and JavaScript.  `n`n- **Built-in Functions**:  `n  Instead of libraries, HTVM offers built-in functions organized into categories. Scroll to the [Built-in Functions](#built-in-functions) section for more details.  `n`n## Core Features`n`n### Language Configuration`n- **Target Language Selection**`n  - Choose between **C++**, **Python** and **JavaScript** `n  - Specify file extensions for output files`n  - Configure HTML wrapping for JavaScript output`n`n### Syntax Customization`n- **Code Block Style**`n  - Toggle between curly braces " . Chr(96) . "{}" . Chr(96) . " or " . Chr(96) . "end" . Chr(96) . " keywords`n  - Enable/disable Python-style colon syntax`n  - Customize parentheses usage`n  - Control semicolon placement`n`n- **Function Definitions**`n  - Toggle function keywords`n  - Customize async main function for JavaScript`n  - Configure global variable handling`n`n### Type System`n- **Basic Types**`n  - Integer (INT)`n  - String (STR)`n  - Boolean (BOOL)`n  - Float (FLOAT)`n`n- **Extended Integer Types**`n  - INT8`n  - INT16`n  - INT32`n  - INT64`n`n### Control Structures`n- **Conditional Statements**`n  - If/Else/ElseIf`n  - Switch/Case/Default`n  - Custom keywords for all conditional operators`n`n- **Loops**`n  - While loops`n  - For loops with customizable syntax`n  - Infinite loops`n  - Parse loops (AutoHotkey-style)`n  - Custom indexing (0-based or 1-based)`n  - Loop control (break, continue)`n`n### Arrays and Collections`n- **Array Types**`n  - Integer arrays`n  - String arrays`n  - Float arrays`n  - Boolean arrays`n`n- **Array Operations**`n  - Append`n  - Pop`n  - Insert`n  - Remove`n  - Size`n  - IndexOf`n`n### Error Handling`n- **Exception Management**`n  - Try blocks`n  - Catch blocks`n  - Finally blocks`n  - Custom error messages`n  - Throw statements`n`n### JavaScript-Specific Features`n- **Variable Declaration**`n  - var, let, const keywords`n  - Automatic var declaration option`n  - await keyword support`n`n### Operators`n- **Assignment Operators**`n  - Basic assignment`n  - Addition assignment`n  - Subtraction assignment`n  - Multiplication assignment`n  - Division assignment`n  - Concatenation assignment`n`n- **Comparison Operators**`n  - Equal to`n  - Not equal to`n  - Greater than`n  - Less than`n  - Greater than or equal to`n  - Less than or equal to`n`n- **Logical Operators**`n  - AND`n  - OR`n  - NOT`n`n### Comments`n- Single-line comments`n- Multi-line comments`n- Custom comment symbols`n`n### AutoHotkey-Inspired Features`n- **Loop Variables**`n  - A_Index (customizable)`n  - A_LoopField (customizable)`n- **Loop Types**`n  - Parse loops`n  - Count loops`n  - Infinite loops`n`n## Configuration Options`n`n### Syntax Style`n- " . Chr(96) . "useFuncKeyWord" . Chr(96) . ": Toggle function definition keywords`n- " . Chr(96) . "useCurlyBraces" . Chr(96) . ": Toggle curly brace block definitions`n- " . Chr(96) . "useEnd" . Chr(96) . ": Toggle 'end' keyword for block closure`n- " . Chr(96) . "useSemicolon" . Chr(96) . ": Toggle statement-ending semicolons`n- " . Chr(96) . "useParentheses" . Chr(96) . ": Configure parentheses requirements`n- " . Chr(96) . "usePythonicColonSyntax" . Chr(96) . ": Enable Python-style block definitions`n`n### JavaScript Configuration`n- " . Chr(96) . "useInJavaScriptAlwaysUseVar" . Chr(96) . ": Force 'var' declarations`n- " . Chr(96) . "useJavaScriptInAfullHTMLfile" . Chr(96) . ": Enable HTML wrapping`n- " . Chr(96) . "useJavaScriptAmainFuncDef" . Chr(96) . ": Configure async main function`n`n### Loop Configuration`n- " . Chr(96) . "AHKlikeLoopsIndexedAt" . Chr(96) . ": Set loop index starting value`n- " . Chr(96) . "forLoopLang" . Chr(96) . ": Select loop syntax style`n- " . Chr(96) . "keyWordAIndex" . Chr(96) . ": Customize loop index variable name`n- " . Chr(96) . "keyWordALoopField" . Chr(96) . ": Customize loop field variable name`n`n`nHTVM empowers developers to create programming languages tailored to their needs while maintaining compatibility with modern technologies.  `n`n---`n`n## OSP (Objectively Simplified Programming) Paradigm  `n`n[Go back](#htvm-documentation) `n`nOSP (Objectively Simplified Programming) is a paradigm designed to replace OOP since OOP was a mistake. To learn OSP you need to first forget everything about OOP. Forget about concepts like inheritance, polymorphism, encapsulation, private/public keywords and instances.`n`nOSP eliminates the complexities of object-oriented programming.  `n`nHereâ€™s how OSP works:  `n- **Hierarchies**:  `n  - **Alliance**: The top-level structure, defined using the " . Chr(96) . "alliance" . Chr(96) . " keyword. `n  - **Crew**: Sub-levels within an alliance, defined using the " . Chr(96) . "crew" . Chr(96) . " keyword.  `n  - **Method**: Functions defined within alliances or crews using the " . Chr(96) . "method" . Chr(96) . " keyword.  `n  - **Object**: Objects are defined using the " . Chr(96) . "def obj" . Chr(96) . " keyword.  `n`n- **Properties**:  `n  - Defined within objects using the " . Chr(96) . "porp" . Chr(96) . " keyword. You must specify the type, even when converting to Python or JavaScript, for readability.  `n`n`n### **The " . Chr(96) . "this" . Chr(96) . " Keyword**:`n`n- **Definition**:  `n  The " . Chr(96) . "this" . Chr(96) . " keyword is a reference to the current object that invoked a method. In OSP, " . Chr(96) . "this" . Chr(96) . " is **explicitly required to refer to objects**, and **you must always specify the full path** of objects and their properties when using it. Additionally, " . Chr(96) . "this" . Chr(96) . " is **only valid within methods**, as it represents the object calling that specific method.`n`n---`n`n### **Key Rules**:`n1. **Full Path Requirement**:  `n   - In OSP, **you must always specify the full path** of objects and properties when using " . Chr(96) . "this" . Chr(96) . ".  `n   - For example:  `n     - **Correct**: " . Chr(96) . "Movable.Vehicles.Car.fuel" . Chr(96) . "  `n     - **Incorrect**: " . Chr(96) . "fuel" . Chr(96) . "`n`n2. **Only Inside Methods**:  `n   - The " . Chr(96) . "this" . Chr(96) . " keyword can **only** be used inside a method. It refers to the object that invoked the method and provides context for operations on that object.  `n   - Using " . Chr(96) . "this" . Chr(96) . " outside of a method will result in an error, as there is no calling object to reference.`n`n---`n`n### **Explanation Using the Example**:`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`nmethod void move(this) {`n    if (this == " . Chr(34) . "Movable.Vehicles.Car" . Chr(34) . ") {`n        if (Movable.Vehicles.Car.fuel " . Chr(62) . " 0) {`n            print(" . Chr(34) . "The car is driving." . Chr(34) . ")`n            Movable.Vehicles.Car.fuel = Movable.Vehicles.Car.fuel - 10`n        } else {`n            print(" . Chr(34) . "The car is out of fuel." . Chr(34) . ")`n            Movable.Vehicles.Car.hasFUEL = false`n        }`n    }`n    else if (this == " . Chr(34) . "Movable.Vehicles.Bike" . Chr(34) . ") {`n        if (Movable.Vehicles.Bike.energy " . Chr(62) . " 0) {`n            print(" . Chr(34) . "The bike is pedaling." . Chr(34) . ")`n            Movable.Vehicles.Bike.energy = Movable.Vehicles.Bike.energy - 5`n        } else {`n            print(" . Chr(34) . "The bike is out of energy." . Chr(34) . ")`n            Movable.Vehicles.Bike.hasENERGY = false`n        }`n    }`n}`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n- The " . Chr(96) . "this" . Chr(96) . " keyword in this method represents the specific object calling " . Chr(96) . "move()" . Chr(96) . ".  `n  For instance:`n  - If " . Chr(96) . "this == " . Chr(34) . "Movable.Vehicles.Car" . Chr(34) . "" . Chr(96) . ", the method knows the caller is the **Car object**, and it manipulates " . Chr(96) . "Movable.Vehicles.Car" . Chr(96) . " properties.`n  - Similarly, if " . Chr(96) . "this == " . Chr(34) . "Movable.Vehicles.Bike" . Chr(34) . "" . Chr(96) . ", the method operates on the **Bike object**.`n`n- If you try to use " . Chr(96) . "this" . Chr(96) . " **outside of any method**, it wonâ€™t work because " . Chr(96) . "this" . Chr(96) . " has no object context to refer to.  `n  For example:`n  " . Chr(96) . "" . Chr(96) . "" . Chr(96) . " cpp`n  def obj Car {`n      prop int fuel = 100`n      print(this)  // This will cause an error!`n  }`n  " . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`n---`n`n### **Why This Restriction Exists**:`n1. **Object Context**:  `n   - The " . Chr(96) . "this" . Chr(96) . " keyword needs a calling object to provide context. Without a method invocation, thereâ€™s no object to reference.`n`n2. **Scope Control**:  `n   - Limiting " . Chr(96) . "this" . Chr(96) . " to methods ensures clear and explicit usage, making code easier to understand and debug.`n`n3. **Example: Calling a Method with an Object**:  `n   - To use the " . Chr(96) . "this" . Chr(96) . " keyword, you must **pass an object** when invoking the method:  `n   " . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`n   allianceName.crewName.move(allianceName.crewName.objName)`n   " . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n   - Here:`n     - " . Chr(96) . "allianceName" . Chr(96) . " is the main alliance.`n     - " . Chr(96) . "crewName" . Chr(96) . " is the crew containing the method " . Chr(96) . "move" . Chr(96) . ".`n     - " . Chr(96) . "objName" . Chr(96) . " is the specific object being passed to the method. This allows " . Chr(96) . "this" . Chr(96) . " to refer to " . Chr(96) . "objName" . Chr(96) . " inside the method.`n`n---`n`n## **You Donâ€™t Need an Alliance or Crew to Define Objects**`n- In OSP, you can define objects (" . Chr(96) . "def obj" . Chr(96) . ") directly without placing them inside an **alliance** or a **crew**.  `n- This makes it flexible to create standalone objects when you donâ€™t need a larger structure.  `n`n### **Example: Standalone Object Definition**`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`ndef obj Standalone {`n    prop int value = 10`n    prop str name = " . Chr(34) . "Independent" . Chr(34) . "`n}`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`nto access later just use:`n`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`nStandalone.value`nStandalone.name`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`n---`n`n### **Methods in Alliances**`n- Methods can also be defined directly in an **alliance**, without being part of a **crew** and the opposite is well.`n`n### **Example: Method in an Alliance**`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`nalliance ExampleAlliance {`n    method void greet() {`n        print(" . Chr(34) . "Hello from ExampleAlliance!" . Chr(34) . ")`n    }`n}`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`nto call greet just do:`n`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`nExampleAlliance.greet()`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`n## Global Accessibility:  `n  - There are no scopes in OSP. As long as a variable or structure is defined above, it is accessible below. Everything is global, and the full path must always be used.  `n`n## Arrays:  `n  - When using arrays you need to create a temporary array and then copy it to another like this:`n`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "py`ndef obj name {`n    arr str temp`n    prop arr str prop1 = temp`n    prop arr str prop2 = temp`n    prop arr str prop3 = temp`n    prop arr str prop4 = temp`n}`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`n### **Summary**:`n- **Full Paths Always**: Explicit references, such as " . Chr(96) . "Movable.Vehicles.Car.fuel" . Chr(96) . ", are mandatory in OSP. Always use the full path to reference objects. This avoids ambiguity and ensures that each object is uniquely identified within the code.`n- **Only Inside Methods**: The " . Chr(96) . "this" . Chr(96) . " keyword can only be used inside a method to refer to the calling object. It is not valid outside of a method because it requires the context of the method invocation to work correctly.`n- **Promotes Clarity**: These rules ensure consistency, clarity, and unambiguous functionality in OSP. By restricting the use of " . Chr(96) . "this" . Chr(96) . " to methods and requiring full paths, the code remains explicit and easier to follow.`n- **Helps with Debugging**: Since " . Chr(96) . "this" . Chr(96) . " is only valid inside methods, errors related to improper use are easier to detect. Using full paths also helps pinpoint issues more precisely by avoiding confusion with similarly named objects.`n- **Encourages Best Practices**: These guidelines encourage a more structured and organized approach to coding in OSP, fostering a clearer and more maintainable codebase in larger projects.`n`n---`n`n## Note:`n`n### Never use underscores when naming things in OSP. Otherwise, you can use them, but be cautious because underscores can be unstable.`n`n`n#### Example of OSP`n`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "cpp`nalliance Movable {`n    crew Vehicles {`n        def obj Car {`n            prop int door = 4`n            prop int fuel = 100`n            prop bool hasFUEL = true`n        }`n        def obj Bike {`n            prop bool hasGears = true`n            prop int energy = 100`n            prop bool hasENERGY = true`n        }`n`n        method void move(this) {`n            if (this == " . Chr(34) . "Movable.Vehicles.Car" . Chr(34) . ") {`n                if (Movable.Vehicles.Car.fuel " . Chr(62) . " 0) {`n                    print(" . Chr(34) . "The car is driving." . Chr(34) . ")`n                    Movable.Vehicles.Car.fuel = Movable.Vehicles.Car.fuel - 10`n                } else {`n                    print(" . Chr(34) . "The car is out of fuel." . Chr(34) . ")`n                    Movable.Vehicles.Car.hasFUEL = false`n                }`n            }`n            else if (this == " . Chr(34) . "Movable.Vehicles.Bike" . Chr(34) . ") {`n                if (Movable.Vehicles.Bike.energy " . Chr(62) . " 0) {`n                    print(" . Chr(34) . "The bike is pedaling." . Chr(34) . ")`n                    Movable.Vehicles.Bike.energy = Movable.Vehicles.Bike.energy - 5`n                } else {`n                    print(" . Chr(34) . "The bike is out of energy." . Chr(34) . ")`n                    Movable.Vehicles.Bike.hasENERGY = false`n                }`n            }`n        }`n    }`n    `n    crew settings {`n        def obj GeneralSettings {`n            prop str difficulty = " . Chr(34) . "normal" . Chr(34) . "`n            prop int volume = 50`n            prop str resolution = " . Chr(34) . "1920x1080" . Chr(34) . "`n        }`n        def obj AudioSettings {`n            prop int masterVolume = 70`n            prop int musicVolume = 50`n            prop int sfxVolume = 40`n        }`n        def obj DisplaySettings {`n            prop bool fullscreen = true`n            prop str aspectRatio = " . Chr(34) . "16:9" . Chr(34) . "`n        }`n    }`n    `n    crew actions {`n        // General Settings Methods`n        method void resetGeneralSettings() {`n            Movable.settings.GeneralSettings.difficulty = STR(" . Chr(34) . "normal" . Chr(34) . ")`n            Movable.settings.GeneralSettings.volume = 50`n            Movable.settings.GeneralSettings.resolution = STR(" . Chr(34) . "1920x1080" . Chr(34) . ")`n            print(" . Chr(34) . "General settings reset to default." . Chr(34) . ")`n        }`n        method void printGeneralSettings() {`n            print(" . Chr(34) . "General Settings:" . Chr(34) . ")`n            print(" . Chr(34) . "Difficulty: " . Chr(34) . " + Movable.settings.GeneralSettings.difficulty)`n            print(" . Chr(34) . "Volume: " . Chr(34) . " + STR(Movable.settings.GeneralSettings.volume))`n            print(" . Chr(34) . "Resolution: " . Chr(34) . " + Movable.settings.GeneralSettings.resolution)`n        }`n`n        // Audio Settings Methods`n        method void resetAudioSettings() {`n            Movable.settings.AudioSettings.masterVolume = 70`n            Movable.settings.AudioSettings.musicVolume = 50`n            Movable.settings.AudioSettings.sfxVolume = 40`n            print(" . Chr(34) . "Audio settings reset to default." . Chr(34) . ")`n        }`n        method void printAudioSettings() {`n            print(" . Chr(34) . "Audio Settings:" . Chr(34) . ")`n            print(" . Chr(34) . "Master Volume: " . Chr(34) . " + STR(Movable.settings.AudioSettings.masterVolume))`n            print(" . Chr(34) . "Music Volume: " . Chr(34) . " + STR(Movable.settings.AudioSettings.musicVolume))`n            print(" . Chr(34) . "SFX Volume: " . Chr(34) . " + STR(Movable.settings.AudioSettings.sfxVolume))`n        }`n`n        // Display Settings Methods`n        method void resetDisplaySettings() {`n            Movable.settings.DisplaySettings.fullscreen = true`n            Movable.settings.DisplaySettings.aspectRatio = STR(" . Chr(34) . "16:9" . Chr(34) . ")`n            print(" . Chr(34) . "Display settings reset to default." . Chr(34) . ")`n        }`n        method void printDisplaySettings() {`n            print(" . Chr(34) . "Display Settings:" . Chr(34) . ")`n            print(" . Chr(34) . "Fullscreen: " . Chr(34) . " + STR(Movable.settings.DisplaySettings.fullscreen))`n            print(" . Chr(34) . "Aspect Ratio: " . Chr(34) . " + Movable.settings.DisplaySettings.aspectRatio)`n        }`n    }`n`n    crew array {`n        def obj name {`n            arr str temp`n            prop arr str prop1 = temp`n            prop arr str prop2 = temp`n            prop arr str prop3 = temp`n            prop arr str prop4 = temp`n        }`n    }`n    `n}`n`nmain`n// Test vehicle movement`nwhile (Movable.Vehicles.Car.hasFUEL == true) && (Movable.Vehicles.Bike.hasENERGY = true) {`n    Movable.Vehicles.move(Movable.Vehicles.Car)`n    Movable.Vehicles.move(Movable.Vehicles.Bike)`n    print(" . Chr(34) . "=====================================" . Chr(34) . ")`n}`n`n// Test settings manipulation`nMovable.settings.GeneralSettings.difficulty = STR(" . Chr(34) . "hard" . Chr(34) . ")`nMovable.settings.GeneralSettings.volume = 80`nMovable.settings.GeneralSettings.resolution = STR(" . Chr(34) . "2560x1440" . Chr(34) . ")`nMovable.settings.AudioSettings.masterVolume = 90`nMovable.settings.AudioSettings.musicVolume = 60`nMovable.settings.AudioSettings.sfxVolume = 50`nMovable.settings.DisplaySettings.fullscreen = false`nMovable.settings.DisplaySettings.aspectRatio = STR(" . Chr(34) . "21:9" . Chr(34) . ")`n`nMovable.actions.printGeneralSettings()`nMovable.actions.printAudioSettings()`nMovable.actions.printDisplaySettings()`n`nMovable.actions.resetGeneralSettings()`nMovable.actions.resetAudioSettings()`nMovable.actions.resetDisplaySettings()`n`nMovable.actions.printGeneralSettings()`nMovable.actions.printAudioSettings()`nMovable.actions.printDisplaySettings()`n`n// Test array manipulation`nMovable.array.name.prop1.push(" . Chr(34) . "1text1" . Chr(34) . ")`nMovable.array.name.prop1.push(" . Chr(34) . "1text2" . Chr(34) . ")`nMovable.array.name.prop1.push(" . Chr(34) . "1text3" . Chr(34) . ")`nMovable.array.name.prop2.push(" . Chr(34) . "2text1" . Chr(34) . ")`nMovable.array.name.prop2.push(" . Chr(34) . "2text2" . Chr(34) . ")`nMovable.array.name.prop2.push(" . Chr(34) . "2text3" . Chr(34) . ")`nMovable.array.name.prop3.push(" . Chr(34) . "3text1" . Chr(34) . ")`nMovable.array.name.prop3.push(" . Chr(34) . "3text2" . Chr(34) . ")`nMovable.array.name.prop3.push(" . Chr(34) . "3text3" . Chr(34) . ")`nMovable.array.name.prop4.push(" . Chr(34) . "4text1" . Chr(34) . ")`nMovable.array.name.prop4.push(" . Chr(34) . "4text2" . Chr(34) . ")`nMovable.array.name.prop4.push(" . Chr(34) . "4text3" . Chr(34) . ")`n`n// why this`n// cuz python used len(param) insed of param.len() so it meses up evrything`n// if using OSP objects that have a dot (.) it doset work in python to get the lenght`n// but for a name whit no dots it works`n`narr str arrayTempOnlyGetSize1 = Movable.array.name.prop1`narr str arrayTempOnlyGetSize2 = Movable.array.name.prop2`narr str arrayTempOnlyGetSize3 = Movable.array.name.prop3`narr str arrayTempOnlyGetSize4 = Movable.array.name.prop4`n`n`n`n`nLoop, % arrayTempOnlyGetSize1.size() `n{`nprint(Movable.array.name.prop1[A_Index])`n}`nLoop, % arrayTempOnlyGetSize2.size() {`n    print(Movable.array.name.prop2[A_Index])`n}`nLoop, % arrayTempOnlyGetSize3.size() {`n    print(Movable.array.name.prop3[A_Index])`n}`nLoop, % arrayTempOnlyGetSize4.size() {`n    print(Movable.array.name.prop4[A_Index])`n}`n`n" . Chr(96) . "" . Chr(96) . "" . Chr(96) . "`n`nOSP simplifies programming while ensuring compatibility with **C++**, **Python**, and **JavaScript**.  `n`n---`n`n## Built-in Functions  `n`n[Go back](#htvm-documentation) `n`nHTVM includes a variety of built-in functions organized into categories for convenience.`n`n"




str outMD := ""

str str1 := ""
str str2 := ""
str str3 := ""
str str4 := ""
str str5 := ""
str str6 := ""
str str7 := ""
str str8 := ""
str str9 := ""
str str10 := ""

Loop, % categories.size()
{
;print(categories[A_Index])
str1 := Trim(StrTitleCase(Trim(StrSplit(categories[A_Index], "`n", 1)))) . " Functions"
; 1. [String Functions](#string-functions)
str2 := STR(A_Index + 1) . ". [" . str1 . "](#" . Trim(StrReplace(StrLower(str1), " ", "-")) . ")"

outMD .= str2 . "`n"
; [Go back](#built-in-functions)
}


outMD .= "`n---`n`n"


str categoriesElement := ""


Loop, % categories.size()
{

;print(categories[A_Index])
str1 := Trim(StrTitleCase(Trim(StrSplit(categories[A_Index], "`n", 1)))) . " Functions"
; ## String Functions
str2 := "## " . Trim(str1) . "`n`n[Go back](#built-in-functions)`n`n"
str10 := "[Go back](#" . Trim(StrReplace(StrLower(str1), " ", "-")) . ")"


outMD .= str2


; 1. [str1](#str1)
; 2. [str2](#str2)
; 3. [str3](#str3)


categoriesElement := categories[A_Index]
Loop, Parse, categoriesElement, `n, `r
{
if (A_Index != 0)
{
if (Trim(A_LoopField) != "")
{

str1 := Trim(StrSplit(StrSplit(A_LoopField, "|", 1), ":", 2))
str3 := STR(A_Index) . ". [" . str1 . "](#" . Trim(StrReplace(StrLower(str1), " ", "-")) . ")"
outMD .= str3 . "`n"
}
}
}


outMD .= "`n---`n`n**HTVM built-in functions are designed to work across C++, Python, and JavaScript, with availability varying depending on language-specific capabilities, libraries, and syntax. Some functions are supported in JavaScript but not in Python or C++, while others are available in all or some languages.**`n`n**HTVM build-in functions availability.**`n`n| Functions | C++ | Python | JavaScript |`n|----------|----------|----------|----------|`n"

Loop, Parse, categoriesElement, `n, `r
{
if (A_Index != 0)
{
if (Trim(A_LoopField) != "")
{

str1 := Trim(StrSplit(StrSplit(A_LoopField, "|", 1), ":", 2))

; cpp py js
str4 := Trim(StrSplit(A_LoopField, "|", 3))
str5 := Trim(StrSplit(A_LoopField, "|", 4))
str6 := Trim(StrSplit(A_LoopField, "|", 5))
; | str1 | Yes | No | Yes |
str3 := "| " . str1 . " | " . str4 . " | " . str5 . " | " . str6 . " |"
outMD .= str3 . "`n"
}
}
}

outMD .= "`n---`n`n"

Loop, Parse, categoriesElement, `n, `r
{
if (A_Index != 0)
{
if (Trim(A_LoopField) != "")
{

str1 := Trim(StrSplit(StrSplit(A_LoopField, "|", 1), ":", 2))
str2 := "### " . str1 . "`n`n" . Trim(str10) . "`n`n**HTVM build-in functions availability.**`n`n| Function | C++ | Python | JavaScript |`n|----------|----------|----------|----------|`n"

; cpp py js
str4 := Trim(StrSplit(A_LoopField, "|", 3))
str5 := Trim(StrSplit(A_LoopField, "|", 4))
str6 := Trim(StrSplit(A_LoopField, "|", 5))
; | str1 | Yes | No | Yes |
str3 := "| " . str1 . " | " . str4 . " | " . str5 . " | " . str6 . " |"

str7 := ""
str8 := Trim(StrSplit(StrSplit(A_LoopField, "|", 2), "description:", 2))
Loop, Parse, str8, "~~~"
{
if (A_Index != 0)
{
if (A_LoopField != "")
{
str7 .= A_LoopField . "`n"
}
}
}


outMD .= str2 . str3 . "`n`n" . str7 . "`n---`n`n"
}
}
}




}

;print("=========================")
;print("=========================")

;print(outMDup . outMD)
FileDelete("DOCUMENTATION.md")
FileAppend(outMDup . outMD, "DOCUMENTATION.md")
print("Everything is saved in DOCUMENTATION.md")
print("Done!")






