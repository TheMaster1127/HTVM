alliance Movable {
    crew Vehicles {
        struct Car {
            prop int door := 4
            prop int fuel := 100
            prop bool hasFUEL := true
        }
        struct Bike {
            prop bool hasGears := true
            prop int energy := 100
            prop bool hasENERGY := true
        }

        proc void move(this) {
            global Movable.Vehicles.Car.fuel
            global Movable.Vehicles.Car.hasFUEL
            global Movable.Vehicles.Bike.energy
            global Movable.Vehicles.Bike.hasENERGY
            if (this = "Movable.Vehicles.Car") {
                if (Movable.Vehicles.Car.fuel > 0) {
                    print("The car is driving.")
                    Movable.Vehicles.Car.fuel := Movable.Vehicles.Car.fuel - 10
                } else {
                    print("The car is out of fuel.")
                    Movable.Vehicles.Car.hasFUEL := false
                }
            }
            else if (this = "Movable.Vehicles.Bike") {
                if (Movable.Vehicles.Bike.energy > 0) {
                    print("The bike is pedaling.")
                    Movable.Vehicles.Bike.energy := Movable.Vehicles.Bike.energy - 5
                } else {
                    print("The bike is out of energy.")
                    Movable.Vehicles.Bike.hasENERGY := false
                }
            }
        }
    }
    
    crew settings {
        struct GeneralSettings {
            prop str difficulty := "normal"
            prop int volume := 50
            prop str resolution := "1920x1080"
        }
        struct AudioSettings {
            prop int masterVolume := 70
            prop int musicVolume := 50
            prop int sfxVolume := 40
        }
        struct DisplaySettings {
            prop bool fullscreen := true
            prop str aspectRatio := "16:9"
        }
    }
    
    crew actions {
        ; General Settings Procs
        proc void resetGeneralSettings() {
            Movable.settings.GeneralSettings.difficulty := STR("normal")
            Movable.settings.GeneralSettings.volume := 50
            Movable.settings.GeneralSettings.resolution := STR("1920x1080")
            print("General settings reset to default.")
        }
        proc void printGeneralSettings() {
            print("General Settings:")
            print("Difficulty: " . Movable.settings.GeneralSettings.difficulty)
            print("Volume: " . STR(Movable.settings.GeneralSettings.volume))
            print("Resolution: " . Movable.settings.GeneralSettings.resolution)
        }

        ; Audio Settings Procs
        proc void resetAudioSettings() {
            Movable.settings.AudioSettings.masterVolume := 70
            Movable.settings.AudioSettings.musicVolume := 50
            Movable.settings.AudioSettings.sfxVolume := 40
            print("Audio settings reset to default.")
        }
        proc void printAudioSettings() {
            print("Audio Settings:")
            print("Master Volume: " . STR(Movable.settings.AudioSettings.masterVolume))
            print("Music Volume: " . STR(Movable.settings.AudioSettings.musicVolume))
            print("SFX Volume: " . STR(Movable.settings.AudioSettings.sfxVolume))
        }

        ; Display Settings Procs
        proc void resetDisplaySettings() {
            Movable.settings.DisplaySettings.fullscreen := true
            Movable.settings.DisplaySettings.aspectRatio := STR("16:9")
            print("Display settings reset to default.")
        }
        proc void printDisplaySettings() {
            print("Display Settings:")
            print("Fullscreen: " . STR(Movable.settings.DisplaySettings.fullscreen))
            print("Aspect Ratio: " . Movable.settings.DisplaySettings.aspectRatio)
        }
    }

    crew array {
        struct name {
            prop arr str prop1
            prop arr str prop2
            prop arr str prop3
            prop arr str prop4
        }
    }
    
}

main
; Test vehicle movement
while (Movable.Vehicles.Car.hasFUEL = true) and (Movable.Vehicles.Bike.hasENERGY = true) {
    Movable.Vehicles.move("Movable.Vehicles.Car")
    Movable.Vehicles.move("Movable.Vehicles.Bike")
    print("=====================================")
}

; Test settings manipulation
Movable.settings.GeneralSettings.difficulty := STR("hard")
Movable.settings.GeneralSettings.volume := 80
Movable.settings.GeneralSettings.resolution := STR("2560x1440")
Movable.settings.AudioSettings.masterVolume := 90
Movable.settings.AudioSettings.musicVolume := 60
Movable.settings.AudioSettings.sfxVolume := 50
Movable.settings.DisplaySettings.fullscreen := false
Movable.settings.DisplaySettings.aspectRatio := STR("21:9")

Movable.actions.printGeneralSettings()
Movable.actions.printAudioSettings()
Movable.actions.printDisplaySettings()

Movable.actions.resetGeneralSettings()
Movable.actions.resetAudioSettings()
Movable.actions.resetDisplaySettings()

Movable.actions.printGeneralSettings()
Movable.actions.printAudioSettings()
Movable.actions.printDisplaySettings()

; Test array manipulation
Movable.array.name.prop1.add("1text1")
Movable.array.name.prop1.add("1text2")
Movable.array.name.prop1.add("1text3")
Movable.array.name.prop2.add("2text1")
Movable.array.name.prop2.add("2text2")
Movable.array.name.prop2.add("2text3")
Movable.array.name.prop3.add("3text1")
Movable.array.name.prop3.add("3text2")
Movable.array.name.prop3.add("3text3")
Movable.array.name.prop4.add("4text1")
Movable.array.name.prop4.add("4text2")
Movable.array.name.prop4.add("4text3")


; Loop over and print

Loop, % Movable.array.name.prop1.size() 
{
print(Movable.array.name.prop1[A_Index])
}
Loop, % Movable.array.name.prop2.size() {
    print(Movable.array.name.prop2[A_Index])
}
Loop, % Movable.array.name.prop3.size() {
    print(Movable.array.name.prop3[A_Index])
}
Loop, % Movable.array.name.prop4.size() {
    print(Movable.array.name.prop4[A_Index])
}