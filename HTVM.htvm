

str str0 := "nothing"
str str00 := "nothing"
str str1 := ""
str str2 := ""
str str3 := ""
str str4 := ""
str str5 := ""
str str6 := ""
str str7 := ""
str str8 := ""
str str9 := ""
str str10 := ""
str str11 := ""
str str12 := ""
str str13 := ""
str str14 := ""
str str15 := ""
str str16 := ""
str str17 := ""
str str18 := ""
str str19 := ""
str str20 := ""
str str21 := ""

int int0 := 0
int int1 := 0
int int2 := 0
int int3 := 0
int int4 := 0
int int5 := 0
int int6 := 0
int int7 := 0

arr str argHTVMinstrMORE

int isNotHTVMfileEXTRA_INT := 0
int isNotHTVMfile2 := 0

str isNotHTVMfileEXTRA_LIB_INFO := ""
str isNotHTVMfileEXTRA_FUNCS_INFO := ""

arr str programmingBlock_InTheTranspiledLang
arr str programmingBlock_CPP
arr str programmingBlock_PY
arr str programmingBlock_JS
arr str programmingBlock_GO
arr str programmingBlock_LUA
arr str programmingBlock_CS
arr str programmingBlock_JAVA
arr str programmingBlock_KT
arr str programmingBlock_RB
arr str programmingBlock_NIM
arr str programmingBlock_AHK
arr str programmingBlock_SWIFT
arr str programmingBlock_DART
arr str programmingBlock_TS
arr str programmingBlock_GROOVY
arr str programmingBlock_HTVM
arr str programmingBlock_HTVMsyntax

arr str fullLangAllOperators
arr str fullLangAllOperators_HELP

int fixExpertionLineFuncOnly := 0

str langToConvertTo := ""
str langFileExtension := ""
str commands := ""
str keyWordAlliance := ""
str keyWordCrew := ""
str keyWordMethod := ""
str keyWordDefObj := ""
str keyWordProp := ""
str keyWordThis := ""
str keyWordInclude := ""

str keyWordCodeInTheTranspiledLangStart := ""
str keyWordCodeInTheTranspiledLangEnd := ""
str keyWordCodeInTheTranspiledLangStartCPP := ""
str keyWordCodeInTheTranspiledLangEndCPP := ""
str keyWordCodeInTheTranspiledLangStartPY := ""
str keyWordCodeInTheTranspiledLangEndPY := ""
str keyWordCodeInTheTranspiledLangStartJS := ""
str keyWordCodeInTheTranspiledLangEndJS := ""
str keyWordCodeInTheTranspiledLangStartGO := ""
str keyWordCodeInTheTranspiledLangEndGO := ""
str keyWordCodeInTheTranspiledLangStartLUA := ""
str keyWordCodeInTheTranspiledLangEndLUA := ""
str keyWordCodeInTheTranspiledLangStartCS := ""
str keyWordCodeInTheTranspiledLangEndCS := ""
str keyWordCodeInTheTranspiledLangStartJAVA := ""
str keyWordCodeInTheTranspiledLangEndJAVA := ""
str keyWordCodeInTheTranspiledLangStartKT := ""
str keyWordCodeInTheTranspiledLangEndKT := ""
str keyWordCodeInTheTranspiledLangStartRB := ""
str keyWordCodeInTheTranspiledLangEndRB := ""
str keyWordCodeInTheTranspiledLangStartNIM := ""
str keyWordCodeInTheTranspiledLangEndNIM := ""
str keyWordCodeInTheTranspiledLangStartAHK := ""
str keyWordCodeInTheTranspiledLangEndAHK := ""
str keyWordCodeInTheTranspiledLangStartSWIFT := ""
str keyWordCodeInTheTranspiledLangEndSWIFT := ""
str keyWordCodeInTheTranspiledLangStartDART := ""
str keyWordCodeInTheTranspiledLangEndDART := ""
str keyWordCodeInTheTranspiledLangStartTS := ""
str keyWordCodeInTheTranspiledLangEndTS := ""
str keyWordCodeInTheTranspiledLangStartGROOVY := ""
str keyWordCodeInTheTranspiledLangEndGROOVY := ""
str keyWordCodeInTheTranspiledLangStartHTVM := ""
str keyWordCodeInTheTranspiledLangEndHTVM := ""
str keyWordCodeInHTVMstart := ""
str keyWordCodeInHTVMend := ""
str keyWordCurlyBraceOpen := ""
str keyWordCurlyBraceClose := ""
str keyWordNull := ""
str keyWordTrue := ""
str keyWordFalse := ""
str keyWordVoid := ""
str keyWordDouble := ""
str keyWordChar := ""
str keyWordUint8 := ""
str keyWordUint16 := ""
str keyWordUint32 := ""
str keyWordUint64 := ""
str keyWordINT := ""
str keyWordSTR := ""
str keyWordBOOL := ""
str keyWordFLOAT := ""
str keyWordINT8 := ""
str keyWordINT16 := ""
str keyWordINT32 := ""
str keyWordINT64 := ""
str keyWordIF := ""
str keyWordElseIf := ""
str keyWordElse := ""
str keyWordWhileLoop := ""
str keyWordLoopInfinite := ""
str keyWordLoop := ""
str keyWordLoopParse := ""
str keyWordContinue := ""
str keyWordBreak := ""
str keyWordFunc := ""
str keyWordAwait := ""
str keyWordAsync := ""
str keyWordThrow := ""
str keyWordErrorMsg := ""
str keyWordTry := ""
str keyWordCatch := ""
str keyWordFinally := ""
str keyWordReturnStatement := ""
str keyWordArrayAppend := ""
str keyWordArrayPop := ""
str keyWordArraySize := ""
str keyWordArrayInsert := ""
str keyWordArrayRemove := ""
str keyWordArrayIndexOf := ""
str keyWordArrayDefinition := ""
str keyWordArrayOfIntegersDefinition := ""
str keyWordArrayOfStringsDefinition := ""
str keyWordArrayOfFloatingPointNumbersDefinition := ""
str keyWordArrayOfBooleansDefinition := ""
str keyWordVar := ""
str keyWordLet := ""
str keyWordConst := ""
str keyWordEnd := ""
str keyWordGlobal := ""
str keyWordComment := ""
str keyWordCommentOpenMultiLine := ""
str keyWordCommentCloseMultiLine := ""
str keyWordEscpaeChar := ""
str keyWordMainLabel := ""
str keyWordConcat := ""
str keyWordAdd := ""
str keyWordSub := ""
str keyWordMul := ""
str keyWordDiv := ""
str keyWordMod := ""
str keyWordExp := ""
str keyWordEqual := ""
str keyWordStrictEqual := ""
str keyWordNotEqual := ""
str keyWordGreater := ""
str keyWordLess := ""
str keyWordGreaterEqual := ""
str keyWordLessEqual := ""
str keyWordAnd := ""
str keyWordOr := ""
str keyWordNot := ""
str keyWordBitAnd := ""
str keyWordBitOr := ""
str keyWordBitXor := ""
str keyWordBitNot := ""
str keyWordShiftLeft := ""
str keyWordShiftRight := ""
str keyWordShiftUnsignedRight := ""
str keyWordAssign := ""
str keyWordAssignAdd := ""
str keyWordAssignConcat := ""
str keyWordAssignSub := ""
str keyWordAssignMul := ""
str keyWordAssignDiv := ""
str keyWordAssignMod := ""
str keyWordAssignShiftLeft := ""
str keyWordAssignShiftRight := ""
str keyWordLogicalAssignShiftRight := ""
str keyWordAssignBitAnd := ""
str keyWordAssignBitOr := ""
str keyWordAssignBitXor := ""
str keyWordTernary1 := ""
str keyWordTernary2 := ""
str keyWordInc := ""
str keyWordDec := ""
str AHKlikeLoopsIndexedAt := ""
str keyWordAIndex := ""
str keyWordALoopField := ""
str useFuncKeyWord := ""
str useCurlyBraces := ""
str useEnd := ""
str useSemicolon := ""
str theSemicolon := ""
str theColon := ""
str useParentheses := ""
str usePrefixTypeForTypeDefinition := ""
str usePostfixTypeForTypeDefinition := ""
str usePythonicColonSyntax := ""
str useCurlyBracesSyntaxForArrayDef := "" 
str useInJavaScriptAlwaysUseVar := ""
str useJavaScriptInAfullHTMLfile := ""
str useJavaScriptAmainFuncDef := ""
str useJavaScriptAllFuncsAreAsync := ""
str useJavaScriptAlwaysTripleEqual := ""

str langToConvertTo_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str langFileExtension_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str commands_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAlliance_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCrew_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordMethod_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordDefObj_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordProp_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordThis_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordInclude_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStart_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartCPP_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndCPP_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartPY_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndPY_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartJS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndJS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartGO_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndGO_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartLUA_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndLUA_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartCS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndCS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartJAVA_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndJAVA_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartKT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndKT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartRB_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndRB_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartNIM_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndNIM_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartAHK_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndAHK_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartSWIFT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndSWIFT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartDART_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndDART_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartTS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndTS_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartGROOVY_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndGROOVY_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangStartHTVM_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInTheTranspiledLangEndHTVM_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInHTVMstart_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCodeInHTVMend_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCurlyBraceOpen_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCurlyBraceClose_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordNull_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordTrue_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordFalse_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordVoid_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordDouble_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordChar_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordUint8_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordUint16_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordUint32_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordUint64_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordINT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordSTR_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBOOL_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordFLOAT_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordINT8_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordINT16_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordINT32_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordINT64_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordIF_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordElseIf_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordElse_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordWhileLoop_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLoopInfinite_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLoop_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLoopParse_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordContinue_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBreak_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordFunc_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAwait_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAsync_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordThrow_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordErrorMsg_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordTry_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCatch_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordFinally_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordReturnStatement_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayAppend_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayPop_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArraySize_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayInsert_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayRemove_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayIndexOf_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayOfIntegersDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayOfStringsDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayOfFloatingPointNumbersDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordArrayOfBooleansDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordVar_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLet_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordConst_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordEnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordGlobal_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordComment_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCommentOpenMultiLine_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordCommentCloseMultiLine_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordEscpaeChar_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordMainLabel_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordConcat_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAdd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordSub_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordMul_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordDiv_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordMod_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordExp_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordStrictEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordNotEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordGreater_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLess_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordGreaterEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLessEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordOr_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordNot_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBitAnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBitOr_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBitXor_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordBitNot_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordShiftLeft_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordShiftRight_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordShiftUnsignedRight_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssign_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignAdd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignConcat_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignSub_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignMul_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignDiv_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignMod_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignShiftLeft_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignShiftRight_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordLogicalAssignShiftRight_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignBitAnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignBitOr_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAssignBitXor_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordTernary1_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordTernary2_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordInc_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordDec_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str AHKlikeLoopsIndexedAt_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordAIndex_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str keyWordALoopField_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useCurlyBraces_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useEnd_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useSemicolon_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useParentheses_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str usePrefixTypeForTypeDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str usePostfixTypeForTypeDefinition_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str usePythonicColonSyntax_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useCurlyBracesSyntaxForArrayDef_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useInJavaScriptAlwaysUseVar_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useJavaScriptInAfullHTMLfile_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useJavaScriptAmainFuncDef_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useJavaScriptAllFuncsAreAsync_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"
str useJavaScriptAlwaysTripleEqual_2 := "awesdgfd-awesrs-awedsfd-aesdg-sc-zsdxfvc-sdfd"

str keyWordALoopFieldOriginal := "" 
str keyWordAIndexOriginal := ""

str out_KeyWordsCommands := ""
str outTrimCode := ""
str htCode := ""

str outVarOperator := ""
int lineDone := 0
int areWeInAFuncFromInstructions := 0
int areWeInAFuncFromInstructionsLineNum := 0
int javaMainFuncSeen := 0
int csMainFuncSeen := 0
int howMany_fixAindexInGoUnused := 0

int luaContinueFix_Num := 0

str theTryCatchVarForErrors := "jhku-dfsds-ds-d-ffdsf-sdfsfdsedsf"
arr str allVarsSoWeDontReDecVars
arr str allVarsSoWeDontReDecVars_FIX_uint8
arr str allVarsSoWeDontReDecVars_FIX_uint16
arr str allVarsSoWeDontReDecVars_FIX_uint32
arr str allVarsSoWeDontReDecVars_FIX_uint64
arr str allVarsSoWeDontReDecVars_FIX_int64
arr str allVarsSoWeDontReDecVars_FIX_float

int allVarsSoWeDontReDecVars_FIX_TOGGLE := 0


arr str ospDic
arr str ospDic1
arr str ospDic2


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


func str fixCSandJAVAstaticBugForFunc(str line)
{
str out := ""
int haveWeSeenMainFunc := 0

Loop, Parse, line, `n, `r
{
if (haveWeSeenMainFunc = 0) and (InStr(A_LoopField, "    static "))
{
out .= StrReplace(A_LoopField, "    static ", "    ") . Chr(10)
}
else
{
out .= A_LoopField . Chr(10)
}

if (InStr(StrLower(A_LoopField), " main("))
{
haveWeSeenMainFunc := 1
}
}


return out
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




func str allVarsSoWeDontReDecVarsFixFunc(str line, str varName)
{
str out := ""
if (RegExMatch(line, "^\d+(\.\d+)?$"))
{

Loop, % allVarsSoWeDontReDecVars_FIX_uint8.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_uint8[A_Index]) = Trim(varName))
{

if (langToConvertTo = "java")
{
out := "(byte) " . line
}
if (langToConvertTo = "kt")
{
out := line . "u"
}


}
}


Loop, % allVarsSoWeDontReDecVars_FIX_uint16.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_uint16[A_Index]) = Trim(varName))
{

if (langToConvertTo = "java")
{
out := "(short) " . line
}
if (langToConvertTo = "kt")
{
out := line . "u"
}


}
}

Loop, % allVarsSoWeDontReDecVars_FIX_uint32.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_uint32[A_Index]) = Trim(varName))
{

if (langToConvertTo = "kt")
{
out := line . "u"
}

if (langToConvertTo = "nim")
{
out := line . "'u32"
}


}
}

Loop, % allVarsSoWeDontReDecVars_FIX_uint64.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_uint64[A_Index]) = Trim(varName))
{

if (langToConvertTo = "kt")
{
out := line . "uL"
}

if (langToConvertTo = "cpp")
{
out := line . "ULL"
}

if (langToConvertTo = "java")
{
out := line . "L"
}


if (langToConvertTo = "cs")
{
out := line . "UL"
}

if (langToConvertTo = "nim")
{
out := line . "'u64"
}


if (langToConvertTo = "java")
{
out := line . "L"
}


if (langToConvertTo = "dart")
{
out := "BigInt.parse(" . Chr(34) . line . Chr(34) . ")"
}

if (langToConvertTo = "js") or (langToConvertTo = "ts")
{
out := line . "n"
}


}
}

Loop, % allVarsSoWeDontReDecVars_FIX_int64.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_int64[A_Index]) = Trim(varName))
{

if (langToConvertTo = "kt")
{
out := line . "L"
}

if (langToConvertTo = "cpp")
{
out := line . "LL"
}

if (langToConvertTo = "cs")
{
out := line . "L"
}

if (langToConvertTo = "js") or (langToConvertTo = "ts")
{
out := line . "n"
}


}
}

Loop, % allVarsSoWeDontReDecVars_FIX_float.size()
{
if (Trim(allVarsSoWeDontReDecVars_FIX_float[A_Index]) = Trim(varName))
{

if (langToConvertTo = "cpp") or (langToConvertTo = "cs") or (langToConvertTo = "java") or (langToConvertTo = "kt")
{
out := line . "f"
}


}
}



}
else
{
return line
}
if (Trim(out) = "")
{
return line
}
return out
}


func str KeyWordsCommands(str theCodeCommands, str mode, str keyWordsCommands, str langToConvertTo)
{
theCodeCommands := StrReplace(theCodeCommands, "%", "")
if (mode = "check")
{
Loop, Parse, keyWordsCommands, "|"
{
Loop, Parse, A_LoopField, `,
{
if (A_Index = 0)
{

if (SubStr(StrLower(theCodeCommands), 1, StrLen(A_LoopField . ", ")) = StrLower(A_LoopField . ", "))
{
;MsgBox, true
return "true"
}
}

if (A_Index = 0)
{
if (theCodeCommands = A_LoopField)
{
;MsgBox, true
return "true"
}
}


}

}
;MsgBox, false
return "false"
}

int AIndex := 0
if (mode = "transpile")
{

int keyWordsCommandsNumLine := 1
Loop, Parse, keyWordsCommands, "|"
{
AIndex := A_Index
Loop, Parse, A_LoopField, `,
{
if (A_Index = 0)
{
if (SubStr(StrLower(theCodeCommands), 1, StrLen(A_LoopField . ", ")) = StrLower(A_LoopField . ", "))
{
;MsgBox, true
keyWordsCommandsNumLine := AIndex
break
}
}

if (A_Index = 0)
{
;MsgBox, %theCodeCommands% = %A_LoopField%
if (theCodeCommands = A_LoopField)
{
;MsgBox, true
keyWordsCommandsNumLine := AIndex
break
}
}


}

}





str outConstuctTheOutFromTheCommands := ""
str outConstuctTheOutFromTheCommandsFucnName := ""
str outConstuctTheOutFromTheCommandsParams := ""
str outConstuctTheOutFromTheCommandsOutVar := ""
str outConstuctTheOutFromTheCommandsInVar := ""
int theCodeCommandNum := 0
int outConstuctTheOutFromTheCommandsLineTranspile := 0
str outConstuctTheOutFromTheCommandsLineTranspileText := ""

str semicolon := ""
if (langToConvertTo != "py") and (langToConvertTo != "nim") and (langToConvertTo != "ahk") and (langToConvertTo != "go") and (langToConvertTo != "lua") and (langToConvertTo != "kt") and (langToConvertTo != "rb") and (langToConvertTo != "swift") and (langToConvertTo != "groovy")
{
semicolon := ";"
}

arr str theCodeCommand
theCodeCommands := Trim(theCodeCommands)
Loop, Parse, theCodeCommands, `,
{
theCodeCommand.add(Trim(A_LoopField))
;MsgBox, % A_LoopField
}


Loop, Parse, keyWordsCommands, "|"
{



if (keyWordsCommandsNumLine = A_Index)
{

;MsgBox, % A_LoopField

Loop, Parse, A_LoopField, `,
{




if (A_Index = 0)
{
outConstuctTheOutFromTheCommandsFucnName := A_LoopField
}
else if (A_Index = 1)
{

;MsgBox, % A_LoopField
if (A_LoopField = "lineTranspile")
{
outConstuctTheOutFromTheCommandsLineTranspile := 1
}

if (A_LoopField = "OUTVAR")
{
outConstuctTheOutFromTheCommandsOutVar := theCodeCommand[theCodeCommandNum]
}
else if (A_LoopField = "INOUTVAR")
{

outConstuctTheOutFromTheCommandsOutVar := theCodeCommand[theCodeCommandNum]
outConstuctTheOutFromTheCommandsInVar := theCodeCommand[theCodeCommandNum]
}
else if (A_LoopField = "INVAR")
{
outConstuctTheOutFromTheCommandsInVar := theCodeCommand[theCodeCommandNum]
}
else
{
if (InStr(A_LoopField, Chr(39)))
{
outConstuctTheOutFromTheCommandsParams .= Chr(34) . theCodeCommand[theCodeCommandNum] . Chr(34) . ", "
}
else
{
outConstuctTheOutFromTheCommandsParams .= theCodeCommand[theCodeCommandNum] . ", "
}

}



}
else if (A_Index = 2)
{

if (outConstuctTheOutFromTheCommandsLineTranspile = 1)
{
outConstuctTheOutFromTheCommandsLineTranspileText := A_LoopField
}


if (A_LoopField = "INVAR")
{
outConstuctTheOutFromTheCommandsInVar := theCodeCommand[theCodeCommandNum]
}
else
{
if (InStr(A_LoopField, Chr(39)))
{
outConstuctTheOutFromTheCommandsParams .= Chr(34) . theCodeCommand[theCodeCommandNum] . Chr(34) . ", "
}
else
{
outConstuctTheOutFromTheCommandsParams .= theCodeCommand[theCodeCommandNum] . ", "
}
}

}
else
{

;MsgBox, % theCodeCommand[theCodeCommandNum]
if (InStr(A_LoopField, Chr(39)))
{
if (Trim(theCodeCommand[theCodeCommandNum]) != "")
{
outConstuctTheOutFromTheCommandsParams .= Chr(34) . theCodeCommand[theCodeCommandNum] . Chr(34) . ", "
}

}
else
{
if (Trim(theCodeCommand[theCodeCommandNum]) != "")
{
outConstuctTheOutFromTheCommandsParams .= theCodeCommand[theCodeCommandNum] . ", "
}
}
}
theCodeCommandNum++
}
break
}

}

StringTrimRight, outConstuctTheOutFromTheCommandsParams, outConstuctTheOutFromTheCommandsParams, 2

if (outConstuctTheOutFromTheCommandsOutVar != "")
{
if (outConstuctTheOutFromTheCommandsParams = "")
{
outConstuctTheOutFromTheCommands := outConstuctTheOutFromTheCommandsOutVar . " = " . outConstuctTheOutFromTheCommandsFucnName . "(" . outConstuctTheOutFromTheCommandsInVar . ")" . semicolon
}
else
{
outConstuctTheOutFromTheCommands := outConstuctTheOutFromTheCommandsOutVar . " = " . outConstuctTheOutFromTheCommandsFucnName . "(" . outConstuctTheOutFromTheCommandsInVar . ", " . outConstuctTheOutFromTheCommandsParams . ")" . semicolon
}

}

if (outConstuctTheOutFromTheCommandsOutVar = "")
{
if (outConstuctTheOutFromTheCommandsParams = "")
{
outConstuctTheOutFromTheCommands := outConstuctTheOutFromTheCommandsFucnName . "(" . outConstuctTheOutFromTheCommandsInVar . ")" . semicolon
}
else
{
outConstuctTheOutFromTheCommands := outConstuctTheOutFromTheCommandsFucnName . "(" . outConstuctTheOutFromTheCommandsInVar . ", " . outConstuctTheOutFromTheCommandsParams . ")" . semicolon
}
}

if (outConstuctTheOutFromTheCommandsLineTranspile = 1)
{
outConstuctTheOutFromTheCommands := outConstuctTheOutFromTheCommandsLineTranspileText
}


outConstuctTheOutFromTheCommands := StrReplace(outConstuctTheOutFromTheCommands, "(, ", "( ")
outConstuctTheOutFromTheCommands := StrReplace(outConstuctTheOutFromTheCommands, "(,", "(")
return outConstuctTheOutFromTheCommands





}

return "false"
}


func str HTVMmatchStrRrplace(str line, str matchString, str replaceString) {
    str lineOut := ""
    if (!InStr(line, matchString)) {
        return line
    }
    str allDelimiters := " ()[].,;:'!&|=<>+-*/^%~" . Chr(34) . Chr(9) . Chr(11)
    arr str lineArr
    Loop, Parse, line {
        lineArr.add(A_LoopField)
    }
    int matchStringLEN := StrLen(matchString)
    int replaceStringLEN := StrLen(replaceString)
    arr int allPosForReplacing
    str sildingLine := ""
    int isStart := 1
    int i1 := 0
    int hasFound := 0
    int hasFound2 := 0
    int isStartTrue := 0
    int isEndTrue := 0
    ; char1 is for text outside the start
    str char1 := ""
    ; char2 is for text inside the start
    str char2 := ""
    ; char3 is for text inside the end
    str char3 := ""
    ; char4 is for text outside the end
    str char4 := ""
    int isMatch := 0
    sildingLine := ""
    isStart := 1
    i1 := 0
    hasFound := 0
    hasFound2 := 0
    isStartTrue := 0
    isEndTrue := 0
    Loop, % lineArr.size() {
        char1 := ""
        char2 := ""
        char3 := ""
        char4 := ""
        isMatch := 0
        if (A_Index != 0) {
            isStart := 0
        }
        sildingLine := ""
        Loop, % matchStringLEN {
            if (A_Index + i1 <= lineArr.size() - 1) {
                sildingLine .= lineArr[A_Index + i1]
            }
        }
        if (StrLen(sildingLine) < matchStringLEN) {
            break
        }
        ;print("!!!!111111111!!!!!!: " . sildingLine)
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;==================
        if (sildingLine = matchString) {
            hasFound := 1
            if (isStart != 1) {
                ;print("!!!!2222222222!!!!!!: " . lineArr[i1 - 1])
                char1 := lineArr[i1 - 1]
                ;print("!!!!2222222222.555555555!!!!!!: " . lineArr[i1])
                char2 := lineArr[i1]
            } else {
                isStartTrue := 1
            }
            if (i1 + matchStringLEN < lineArr.size()) {
                ;print("!!!!3333333333.5555555555!!!!!!: " . lineArr[i1 + matchStringLEN - 1])
                char3 := lineArr[i1 + matchStringLEN - 1]
                ;print("!!!!3333333333!!!!!!: " . lineArr[i1 + matchStringLEN])
                char4 := lineArr[i1 + matchStringLEN]
            } else {
                isEndTrue := 1
            }
            if (InStr(allDelimiters, char1)) or (InStr(allDelimiters, char2)) {
                isStartTrue := 1
            }
            if (InStr(allDelimiters, char3)) or (InStr(allDelimiters, char4)) {
                isEndTrue := 1
            }
            if (isStartTrue = 1) and (isEndTrue = 1) {
                isMatch := 1
            }
        }
        ;;;;;;;;;;;;;;;;;;;;===============
        if (isMatch = 1) {
            if (allPosForReplacing.size() > 0) {
                Loop, % allPosForReplacing.size() {
                    if (i1 + 1 != allPosForReplacing[A_Index]) {
                        allPosForReplacing.add(i1 + 1)
                        break
                    }
                }
            } else {
                allPosForReplacing.add(i1 + 1)
            }
        }
        i1++
    }
    str lineTEMP := ""
    lineOut := line
    ;print(allPosForReplacing)
    if (allPosForReplacing.size() > 0) {
        ; matchStringLEN
        ; replaceStringLEN
        int l2 := 0
        int currentPos := 0
        int onceEnd := 0
        Loop, % allPosForReplacing.size() {
            if (A_Index = 0) {
                currentPos := allPosForReplacing[A_Index]
            } else {
                currentPos := allPosForReplacing[A_Index] - (matchStringLEN - replaceStringLEN)
            }
            onceEnd := 0
            Loop, Parse, lineOut {
                if (A_Index + 2 > currentPos) and (A_Index + 1 < currentPos + matchStringLEN) {
                    onceEnd++
                    ;print("DDDDDDDDDDD" . STR(A_Index))
                    if (onceEnd = 1) {
                        lineTEMP .= replaceString
                    }
                } else {
                    lineTEMP .= A_LoopField
                }
            }
            lineOut := lineTEMP
            lineTEMP := ""
            ;print(lineTEMP)
            l2++
        }
    } else {
        return line
    }
    return lineOut
}

func str SubStrLastChars(str text, int numOfChars) {
    str LastOut := ""
    int NumOfChars := 0
    Loop, Parse, text {
        NumOfChars++
    }
    Loop, % numOfChars {
        NumOfChars--
    }
    Loop, Parse, text {
        if (A_Index >= NumOfChars) {
            LastOut .= A_LoopField
        }
    }
    return LastOut
}


func str ExtractDigits(str inputString)
{
str digits := ""

Loop, Parse, inputString
{
    if (RegExMatch(A_LoopField, "\d"))
    {
        digits .= A_LoopField
    }
}
return digits
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Helper function to create spaces
func str spaces(int n)
{
str s := ""
if (n != 0)
{
Loop, % n
{
s .= " "
}
}
return s
}


; Define the function to check odd spaces at the beginning
func str CheckOddLeadingSpaces(str string123)
{
; Initialize a variable to count the spaces
int spaceCount := 0

; Loop through the string one character at a time
Loop, Parse, string123
{
; Check if the current character is a space
if (A_LoopField = Chr(32))
{
spaceCount++
}
else
{
; When we hit a non-space character, break the loop
break
}
}

; Return true if the number of spaces is odd, false otherwise
str sdsfawasd := STR(Mod(spaceCount, 2) = 1)
;MsgBox, % sdsfawasd
return sdsfawasd
}

func str LTrim(str input)
{
    str result := ""
    bool foundNonSpace := false

    Loop, Parse, input
    {
        if (A_LoopField != " " or foundNonSpace)
        {
            result .= A_LoopField
            foundNonSpace := true
        }
    }

    return result
}


func str getLastChar(str strippedString)
{
str lastChar
Loop, Parse, strippedString
{
lastChar := A_LoopField
}
return lastChar
}

func str AddCurlyBraces(str pythonCode)
{
pythonCode := StrReplace(pythonCode, Chr(9), "    ")
str result := ""
int indentLevel := 0
int indent := 0
str line := ""
str stripped := ""
Loop, Parse, pythonCode, `n, `r
{
line := A_LoopField
stripped := Trim(line)
if (stripped = "")
{
result .= line . Chr(10)
continue
}

; Count leading spaces
indent := StrLen(line) - StrLen(LTrim(line))

; Close braces for unindents

Loop
{
if (indentLevel <= indent)
{
break
}
indentLevel -= 4
result .= spaces(indentLevel) . "}`n"
}


; Add opening brace for new blocks
if (getLastChar(stripped) = ":") and (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordComment))) != StrLower(keyWordComment))
{
result .= SubStr(line, 1, -1) . " {`n"
indentLevel += 4
}
else
{
result .= line . Chr(10)
}
}

; Close any remaining open braces
Loop
{
if (indentLevel <= 0)
{
break
}
indentLevel -= 4
result .= spaces(indentLevel) . "}`n"
}


return result
}


func str RepeatSpaces(int count)
{
str spaces := ""
Loop, % count
{
spaces .= Chr(32)
}
return spaces
}


func str indent_nested_curly_braces(str input_string, int modeCurlyBracesOn)
{
int indent_size := 4
int current_indent := 0
str result := ""
str trimmed_line := ""
str resultOut := ""

str culyOpenFix := "{"
str culyCloseFix := "}"
if (langToConvertTo = langFileExtension_2)
{
culyOpenFix := Trim(keyWordCurlyBraceOpen_2)
culyCloseFix := Trim(keyWordCurlyBraceClose_2)
}



;MsgBox, % input_string
Loop, Parse, input_string, `n, `r
{

trimmed_line := Trim(A_LoopField)

if (trimmed_line = Chr(123))
{

result .= Chr(32) . RepeatSpaces(current_indent) . trimmed_line . Chr(10)
current_indent := current_indent + indent_size
}
else if (trimmed_line = Chr(125))
{

current_indent := current_indent - indent_size
result .= Chr(32) . RepeatSpaces(current_indent) . trimmed_line . Chr(10)
}
else
{

result .= Chr(32) . RepeatSpaces(current_indent) . trimmed_line . Chr(10)
}

}


if (modeCurlyBracesOn = 0)
{
str resultOut := ""
Loop, Parse, result, `n, `r
{
if (Trim(A_LoopField) != "{") and (Trim(A_LoopField) != "}")
{
resultOut .= A_LoopField . Chr(10)
}
}
StringTrimRight, result, resultOut, 1
}
else
{
; format curly braces in a K&R style

arr str lookIntoFurture

Loop, Parse, result, `n, `r
{
lookIntoFurture.add(Trim(A_LoopField))
}
lookIntoFurture.add(" ")

str resultOut := ""
int skipNext := 0
Loop, Parse, result, `n, `r
{


skipNext--
if (skipNext <= 0)
{
skipNext := 0
}
if (Trim(lookIntoFurture[A_Index + 1]) = "{")
{
resultOut .= A_LoopField . " " . culyOpenFix . Chr(10)
skipNext := 2
}

if (skipNext = 0)
{
resultOut .= A_LoopField . Chr(10)
}


}
StringTrimRight, result, resultOut, 1

arr str lookIntoFurture2

Loop, Parse, result, `n, `r
{
lookIntoFurture2.add(Trim(A_LoopField))
}
lookIntoFurture2.add(" ")


resultOut := ""
skipNext := 0
str addSpacesAtTheBegginig
Loop, Parse, result, `n, `r
{
skipNext--
if (skipNext <= 0)
{
skipNext := 0
}

if (langToConvertTo != "lua") and (langToConvertTo != "rb") and (langToConvertTo != langFileExtension_2)
{
if (Trim(A_LoopField) = "}") and (Trim(lookIntoFurture2[A_Index + 1]) = "else {")
{
skipNext := 2
addSpacesAtTheBegginig := ""
Loop, Parse, A_LoopField
{
if (A_LoopField = " ")
{
if (A_LoopField != " ")
{
break
}
addSpacesAtTheBegginig .= StrReplace(A_LoopField, "}", culyCloseFix)
}
}
resultOut .= addSpacesAtTheBegginig . culyCloseFix . " else " . culyOpenFix . Chr(10)
}
}


if (skipNext = 0)
{
resultOut .= A_LoopField . Chr(10)
}
}
StringTrimRight, result, resultOut, 1
}


resultOut := ""
str ALoopField
Loop, Parse, result, `n, `r
{
if (CheckOddLeadingSpaces(A_LoopField) = "1")
{
StringTrimLeft, ALoopField, A_LoopField, 1
resultOut .= ALoopField . Chr(10)
}
else
{
resultOut .= A_LoopField . Chr(10)
}
}

StringTrimRight, result, resultOut, 1


str fixResultFIX := ""
if (langToConvertTo = langFileExtension_2) and (modeCurlyBracesOn = 1)
{

Loop, Parse, result, `n, `r
{
if (Trim(A_LoopField) = "}")
{
fixResultFIX .= StrReplace(A_LoopField, "}", culyCloseFix) . Chr(10)
}
else
{
fixResultFIX .= A_LoopField . Chr(10)
}
}

StringTrimRight, result, fixResultFIX, 1
}


; Return the result
return result
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




; path.path.path:propName1[str],propName2[bool],propName3[str array]|path.path.path:propName1[str],propName2[bool],propName3[str array]
str OSPstrArrayStrALLobjInOSP := ""
str HoldOSPdethodNamePath := ""

func str findTypeOfOSPprop(str fullARRAYstr, str FromPath)
{
str outType := ""
; if the fullARRAYstr is in this format
; path.path.path:propName1[str],propName2[bool],propName3[str array]|path.path.path:propName1[str],propName2[bool],propName3[str array]

str outFormat := ""
str outFormatHELP1 := ""
str outFormatHELP2 := ""


Loop, Parse, fullARRAYstr, "|"
{
if (Trim(A_LoopField) != "")
{
outFormatHELP1 := StrSplit(A_LoopField, ":", 1)
outFormatHELP2 := StrSplit(A_LoopField, ":", 2)
Loop, Parse, outFormatHELP2, `,
{
outFormat .= outFormatHELP1 . "." . A_LoopField . "|"
}
}
}
StringTrimRight, outFormat, outFormat, 1


Loop, Parse, outFormat, "|"
{
if (Trim(A_LoopField) != "")
{
if (StrSplit(Trim(A_LoopField), "[", 1) = Trim(FromPath))
{
outType := StrSplit(Trim(A_LoopField), "[", 2)
StringTrimRight, outType, outType, 1
break
}

}
}




if (outType = "vector<int>")
{
outType := "std::vector<int>&"
}
else if (outType = "vector<string>")
{
outType := "std::vector<std::string>&"
}
else if (outType = "vector<string>")
{
outType := "std::vector<std::string>&"
}
else if (outType = "vector<float>")
{
outType := "std::vector<float>&"
}
else if (outType = "vector<bool>")
{
outType := "std::vector<bool>&"
}
else if (outType = Trim(keyWordINT))
{
outType := "int"
}
else if (outType = Trim(keyWordSTR))
{
outType := "std::string"
}
else if (outType = Trim(keyWordFLOAT))
{
outType := "float"
}
else if (outType = Trim(keyWordBOOL))
{
outType := "bool"
}
else if (outType = Trim(keyWordINT8))
{
outType := "int8_t"
}
else if (outType = Trim(keyWordINT16))
{
outType := "int16_t"
}
else if (outType = Trim(keyWordINT32))
{
outType := "int32_t"
}
else if (outType = Trim(keyWordINT64))
{
outType := "int64_t"
}


return outType
}


func str REMOVELastSTRfromDOT(str THESTR)
{
str THESTRout := ""
if (Trim(THESTR) = "")
{
return ""
}
int count12345 := 0

Loop, Parse, THESTR, "."
{
count12345++
}


Loop, Parse, THESTR, "."
{
if (count12345 = A_Index)
{
break
}
else
{
THESTRout .= Trim(A_LoopField) . "."
}
}

StringTrimRight, THESTRout, THESTRout, 1

return THESTRout
}


;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;

func str replaceTheOSPpathsPY_JS(str theSTR123, str ALoopFieldIN)
{

if (Trim(theSTR123) = "")
{
return ""
}
if (Trim(ALoopFieldIN) = "")
{
return ""
}

str type := ""
str theSTR123out := ""
str ALoopField := ""
str ALoopField1 := ""
str ALoopField11 := ""

if (InStr(ALoopFieldIN, "["))
{
; ALoopFieldIN
; animalsKingdom.animals.Dog.typeOf2[2]

ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)


ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 1)
ALoopField11 := StrSplit(Trim(ALoopFieldIN), "[", 2)
ALoopField1 := REMOVELastSTRfromDOT(ALoopField1) . "[" . ALoopField11


; REMOVELastSTRfromDOT(param1)
theSTR123 := StrReplace(theSTR123, Trim(ALoopField), "OSPHTVMOSP_" . StrReplace(ALoopField1, ".", "_"))

}
else
{
ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)

ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 2)

ALoopField1 := REMOVELastSTRfromDOT(StrSplit(Trim(ALoopFieldIN), "]", 1))

ALoopField1 := "[" . Trim(StrSplit(ALoopField1, "[", 2)) . "]"
theSTR123 := StrReplace(theSTR123, Trim(ALoopFieldIN), "OSPHTVMOSP_" . StrReplace(ALoopFieldIN, ".", "_"))

}

;this__OSP__this
theSTR123 := RegExReplace(theSTR123, "\bthis\b", "this__OSP__this[0]")
theSTR123 := StrReplace(theSTR123, "OSPHTVMOSP_OSPHTVMOSP_", "OSPHTVMOSP_")



return theSTR123
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func str replaceTheOSPpathsLEFT(str theSTR123, str ALoopFieldIN)
{

if (Trim(theSTR123) = "")
{
return ""
}
if (Trim(ALoopFieldIN) = "")
{
return ""
}

str type := ""
str theSTR123out := ""
str ALoopField := ""
str ALoopField1 := ""
str ALoopField11 := ""

if (InStr(ALoopFieldIN, "["))
{
; ALoopFieldIN
; animalsKingdom.animals.Dog.typeOf2[2]

ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)


ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 1)
ALoopField11 := StrSplit(Trim(ALoopFieldIN), "[", 2)
ALoopField1 := REMOVELastSTRfromDOT(ALoopField1) . "[" . ALoopField11


; REMOVELastSTRfromDOT(param1)
theSTR123 := StrReplace(theSTR123, Trim(ALoopField), "OSPHTVMOSP_" . StrReplace(ALoopField1, ".", "_"))

}
else
{
ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)

ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 2)

ALoopField1 := REMOVELastSTRfromDOT(StrSplit(Trim(ALoopFieldIN), "]", 1))

ALoopField1 := "[" . Trim(StrSplit(ALoopField1, "[", 2)) . "]"
theSTR123 := StrReplace(theSTR123, Trim(ALoopFieldIN), "OSPHTVMOSP_" . StrReplace(ALoopFieldIN, ".", "_"))

}

;this__OSP__this
theSTR123 := RegExReplace(theSTR123, "\bthis\b", "std::any_cast<std::string>((*this__OSP__this)[0])")
theSTR123 := StrReplace(theSTR123, "OSPHTVMOSP_OSPHTVMOSP_", "OSPHTVMOSP_")



return theSTR123
}

func str replaceTheOSPpathsRIGHT(str theSTR123, str ALoopFieldIN)
{

if (Trim(theSTR123) = "")
{
return ""
}
if (Trim(ALoopFieldIN) = "")
{
return ""
}

str type := ""
str theSTR123out := ""
str ALoopField := ""
str ALoopField1 := ""
str ALoopField11 := ""

if (InStr(ALoopFieldIN, "["))
{
; ALoopFieldIN
; animalsKingdom.animals.Dog.typeOf2[2]

ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)


ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 1)
ALoopField11 := StrSplit(Trim(ALoopFieldIN), "[", 2)
ALoopField1 := REMOVELastSTRfromDOT(ALoopField1) . "[" . ALoopField11


; REMOVELastSTRfromDOT(param1)
type := findTypeOfOSPprop(OSPstrArrayStrALLobjInOSP, ALoopField)
;MsgBox, % type

theSTR123 := StrReplace(theSTR123, Trim(ALoopField), "std::any_cast<" . type . ">(OSPHTVMOSP_" . StrReplace(ALoopField1, ".", "_") . ")")

}
else
{
ALoopField := StrSplit(Trim(ALoopFieldIN), "[", 1)

ALoopField1 := StrSplit(Trim(ALoopFieldIN), "[", 2)

ALoopField1 := REMOVELastSTRfromDOT(StrSplit(Trim(ALoopFieldIN), "]", 1))

ALoopField1 := "[" . Trim(StrSplit(ALoopField1, "[", 2)) . "]"
theSTR123 := StrReplace(theSTR123, Trim(ALoopFieldIN), "OSPHTVMOSP_" . StrReplace(ALoopFieldIN, ".", "_"))

}

;this__OSP__this
theSTR123 := RegExReplace(theSTR123, "\bthis\b", "std::any_cast<std::string>((*this__OSP__this)[0])")
theSTR123 := StrReplace(theSTR123, "OSPHTVMOSP_OSPHTVMOSP_", "OSPHTVMOSP_")



return theSTR123
}


func str CheckStringPosition(str text, str target, str reference)
{

    str posReference := SubStr(text, 1, StrLen(reference))
    str posTarget := SubStr(text, 1, StrLen(target))

    ; Check if both strings are found (not using InStr)
    if (posReference != "" and posTarget != "")
    {
        ; Manually find the positions of the target and reference
        posTarget := RegExMatch(text, target)
        posReference := RegExMatch(text, reference)

        ; Compare positions of target and reference
        if (posTarget < posReference)
        {

            return "left"
        }
        else if (posTarget > posReference)
        {

return "not left"
        }
        else
        {

return "uuh"
        }
    }
    else
    {

        return "One or both strings not found."
    }

return "huh"
}


func str getIndexOfTheStrArrayStrOST(str ALoopField, str theSringOSPlineARRAYstrstrSTR)
{



Loop, Parse, theSringOSPlineARRAYstrstrSTR, "|"
{
if (Trim(StrSplit(A_LoopField, ":", 1)) = Trim(ALoopField))
{

return STR(A_Index)
}
}



return "0"
}



func str parserOSPgloabl(str theSringOSPline, str str123)
{
str str_1 := ""
str str_2 := ""
str str_3 := ""
str str_4 := ""
str str_5 := ""
str str_6 := ""

str HELPHoldOSPdethodNamePath := ""



Loop, Parse, theSringOSPline, "|"
{
str_1 .= Trim(StrSplit(A_LoopField, ":", 1)) . Chr(10)
str_5 := Trim(StrSplit(A_LoopField, ":", 1))
str_6 := Trim(StrSplit(A_LoopField, ":", 2))
Loop, Parse, str_6, `,
{
str_1 .= str_5 . "." . Trim(StrSplit(A_LoopField, "[", 1)) . "[" . STR(A_Index) . "]`n"
}

}

str_1 .= StrReplace(HELPHoldOSPdethodNamePath, "|", Chr(10))



str shortestLine := ""
str currentLine := ""
int currentLength := 0
int minLength := 0
str tempStr := ""

; Sorting by repeatedly finding and appending the shortest line
Loop
{
    ; Initialize variables to track the shortest line in this pass
    shortestLine := ""
    minLength := 999999

    ; Find the shortest line in str_1
    Loop, Parse, str_1, `n, `r
    {
        currentLine := A_LoopField
        currentLength := StrLen(currentLine)
        if (currentLength < minLength)
        {
            minLength := currentLength
            shortestLine := currentLine
        }
    }

    ; If no shortest line is found, break (str_1 is empty)
    if (shortestLine = "")
	{
        break
	}

    ; Add the shortest line to the sorted result
    str_2 .= shortestLine . Chr(10)

    ; Rebuild str_1 without the shortest line
    tempStr := ""
    Loop, Parse, str_1, `n, `r
    {
        if (A_LoopField != shortestLine)
		{
            tempStr .= A_LoopField . Chr(10)
		}

    }
    StringTrimRight, tempStr, tempStr, 1
    str_1 := tempStr
}

; Trim the final trailing newline from str_2
StringTrimRight, str_2, str_2, 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Initialize an empty result for the reversed lines
str reversedStr := ""

; Count the number of lines
int lineCount := 0
int index := 0
int lineNum := 0

Loop, Parse, str_2, `n, `r
{
    lineCount++
}

; Reverse the order by re-parsing and appending lines in reverse order
Loop, % lineCount
{
    ; Inner loop to find the (lineCount - A_Index + 1)-th line
    index := lineCount - A_Index + 1
    currentLine := ""
    lineNum := 0

    Loop, Parse, str_2, `n, `r
    {
        lineNum++
        if (lineNum = index)
        {
            currentLine := A_LoopField
            break
        }
    }

    ; Append the line in reverse order
    reversedStr .= currentLine . Chr(10)
}

; Trim the final trailing newline
StringTrimRight, str_2, reversedStr, 1


; Display the sorted result
;MsgBox, % str_2


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;CheckStringPosition(text, target, reference)
str ALoopField := ""
str ALoopField1 := ""

Loop, Parse, str_2, `n, `r
{

if (SubStr(A_LoopField, 1, StrLen(keyWordFunc)) != keyWordFunc)
{

if (langToConvertTo = "cpp")
{

if (Trim(A_LoopField) != "")
{


if (InStr(str123, " += "))
{
str6 := " += "
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str1 := Trim(StrSplit(str123, str6, 1))
str2 := Trim(StrSplit(str123, str6, 2))
str3 := Trim(replaceTheOSPpathsLEFT(str1, A_LoopField))
str4 := Trim(replaceTheOSPpathsRIGHT(str2, A_LoopField))
str5 := str3 . str6 . str4
str123 := Trim(str5)

}
else if (InStr(str123, " = "))
{

str6 := " = "
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str1 := Trim(StrSplit(str123, str6, 1))
str2 := Trim(StrSplit(str123, str6, 2))
str3 := Trim(replaceTheOSPpathsLEFT(str1, A_LoopField))
str4 := Trim(replaceTheOSPpathsRIGHT(str2, A_LoopField))
str5 := str3 . str6 . str4
str123 := Trim(str5)

}
else if (InStr(str123, " -= "))
{
str6 := " -= "
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str1 := Trim(StrSplit(str123, str6, 1))
str2 := Trim(StrSplit(str123, str6, 2))
str3 := Trim(replaceTheOSPpathsLEFT(str1, A_LoopField))
str4 := Trim(replaceTheOSPpathsRIGHT(str2, A_LoopField))
str5 := str3 . str6 . str4
str123 := Trim(str5)

}
else if (InStr(str123, " *= "))
{
str6 := " *= "
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str1 := Trim(StrSplit(str123, str6, 1))
str2 := Trim(StrSplit(str123, str6, 2))
str3 := Trim(replaceTheOSPpathsLEFT(str1, A_LoopField))
str4 := Trim(replaceTheOSPpathsRIGHT(str2, A_LoopField))
str5 := str3 . str6 . str4
str123 := Trim(str5)

}
else if (InStr(str123, " /= "))
{

str6 := " /= "
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str1 := Trim(StrSplit(str123, str6, 1))
str2 := Trim(StrSplit(str123, str6, 2))
str3 := Trim(replaceTheOSPpathsLEFT(str1, A_LoopField))
str4 := Trim(replaceTheOSPpathsRIGHT(str2, A_LoopField))
str5 := str3 . str6 . str4
str123 := Trim(str5)

}
else
{

str123 := replaceTheOSPpathsRIGHT(str123, A_LoopField)

}


;;;;;
}
}
else
{
if (Trim(A_LoopField) != "")
{
str123 := replaceTheOSPpathsPY_JS(str123, A_LoopField)
}
}



}
}



return str123
}



func bool isLineAconstruct(str line)
{
line := StrLower(Trim(line))
if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordIF))) = StrLower(keyWordIF))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordElseIf))) = StrLower(keyWordElseIf))
{
return true
}
else if (StrLower(Trim(line)) = StrLower(keyWordElse)) or (StrLower(Trim(line)) = StrLower(keyWordElse . ":"))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(keyWordCurlyBraceClose . " " . StrLower(keyWordElse))) = keyWordCurlyBraceClose . " " . StrLower(keyWordElse))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(StrLower(keyWordElse) . " " . StrLower(keyWordCurlyBraceOpen))) = StrLower(keyWordElse) . " " . StrLower(keyWordCurlyBraceOpen))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordWhileLoop))) = StrLower(keyWordWhileLoop))
{
return true
}
else if (StrLower(Trim(line)) = StrLower(keyWordLoopInfinite)) or (StrLower(Trim(line)) = StrLower(keyWordLoopInfinite . ":"))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(keyWordCurlyBraceClose . " " . StrLower(keyWordLoopInfinite))) = keyWordCurlyBraceClose . " " . StrLower(keyWordLoopInfinite))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(StrLower(keyWordLoopInfinite) . " " . StrLower(keyWordCurlyBraceOpen))) = StrLower(keyWordLoopInfinite) . " " . StrLower(keyWordCurlyBraceOpen))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordLoop))) = StrLower(keyWordLoop))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordLoopParse))) = StrLower(keyWordLoopParse))
{
return true
}
else if (StrLower(Trim(line)) = StrLower(keyWordTry)) or (StrLower(Trim(line)) = StrLower(keyWordTry . ":"))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(keyWordCurlyBraceClose . " " . StrLower(keyWordTry))) = keyWordCurlyBraceClose . " " . StrLower(keyWordTry))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(StrLower(keyWordTry) . " " . StrLower(keyWordCurlyBraceOpen))) = StrLower(keyWordTry) . " " . StrLower(keyWordCurlyBraceOpen))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordAlliance))) = StrLower(keyWordAlliance))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordCrew))) = StrLower(keyWordCrew))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordDefObj))) = StrLower(keyWordDefObj))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordMethod))) = StrLower(keyWordMethod))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordCatch))) = StrLower(keyWordCatch))
{
return true
}
else if (StrLower(Trim(line)) = StrLower(keyWordFinally)) or (StrLower(Trim(line)) = StrLower(keyWordFinally . ":"))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(keyWordCurlyBraceClose . " " . StrLower(keyWordFinally))) = keyWordCurlyBraceClose . " " . StrLower(keyWordFinally))
{
return true
}
else if (SubStr(Trim(line), 1, StrLen(StrLower(keyWordFinally) . " " . StrLower(keyWordCurlyBraceOpen))) = StrLower(keyWordFinally) . " " . StrLower(keyWordCurlyBraceOpen))
{
return true
}
else if (SubStr(StrLower(Trim(StrLower(line))), 1, StrLen(StrLower(keyWordFunc))) = StrLower(keyWordFunc))
{
return true
}
else if (SubStr(StrLower(Trim(line)), 1, StrLen(StrLower(keyWordAsync))) = StrLower(keyWordAsync))
{
return true
}
return false
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



func str fixDoubleQuotes(str line, int isLast)
{
str out := ""
if (isLast = 0)
{
out := StrReplace(line, Chr(92) . Chr(92) . Chr(34), Chr(92) . Chr(34))
}
else
{
StringTrimRight, line, line, 1

out := StrReplace(line, Chr(92) . Chr(92) . Chr(34), Chr(92) . Chr(34)) . Chr(34)
}

return out
}



func str fixArray1234(str line)
{
str out := ""
int started := 0


Loop, Parse, line
{
if (started = 1)
{
if (StrLen(line) = A_Index + 1)
{
return out
}
out .= A_LoopField
}

if (A_LoopField = "(")
{
started := 1
}

}
return out
}

func str fixArray123(str line, str arrayMethodStr, int mode)
{


; mode 1 = Append
; mode 2 = Pop
; mode 3 = Size
; mode 4 = Insert
; mode 5 = Remove
; mode 6 = IndexOf

; HTVM_Append
; HTVM_Pop
; HTVM_Size
; HTVM_Insert
; HTVM_Remove
; HTVM_IndexOf

if (langToConvertTo != "swift") and (langToConvertTo != "go")
{

if (mode = 1) 
{
return "HTVM_Append(" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 2)
{
return "HTVM_Pop(" . StrSplit(line, ".", 1) . ")"
}

if (mode = 3)
{
return "HTVM_Size(" . StrSplit(line, ".", 1) . ")"
}

if (mode = 4)
{
return "HTVM_Insert(" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 5)
{
return "HTVM_Remove(" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 6)
{
return "HTVM_IndexOf(" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}


}
else
{

if (mode = 1) 
{
return "HTVM_Append(&" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 2)
{
return "HTVM_Pop(&" . StrSplit(line, ".", 1) . ")"
}

if (mode = 3)
{
return "HTVM_Size(" . StrSplit(line, ".", 1) . ")"
}

if (mode = 4)
{
return "HTVM_Insert(&" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 5)
{
return "HTVM_Remove(&" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}

if (mode = 6)
{
return "HTVM_IndexOf(" . StrSplit(line, ".", 1) . ", " . fixArray1234(line) . ")"
}


}


return line
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
func str arrayParserTranspiler1(str line, str arrayMethodStr, int mode)
{
if (InStr(line, arrayMethodStr) = false)
{
return line
}

str out := ""
str allDelimiters := " ()[],;:'!&|=<>+-*/^%~" . Chr(34) . Chr(9) . Chr(11)
arr str arrAll
Loop, Parse, line
{
arrAll.add(A_LoopField)
}


int i1 := 0
str tempHold := ""
int holdPos := 0

arr int holdPositions
Loop, % arrAll.size()
{
tempHold := ""
if (arrAll.size() - StrLen(arrayMethodStr) + 1 = i1)
{
break
}

Loop, StrLen(arrayMethodStr)
{
tempHold .= arrAll[A_Index + i1]
}

i1++
;print(tempHold)
if (tempHold = arrayMethodStr)
{
holdPos := i1
;print(holdPos)
holdPositions.add(holdPos)
}

}

;print("===========================================")

int holdPositionsTEMP := 0
Loop, % holdPositions.size()
{
holdPositionsTEMP := holdPositions[A_Index]
i1 := arrAll.size()
tempHold := ""
Loop, % arrAll.size()
{

if (holdPositionsTEMP >= i1 + 1)
{
if (InStr(allDelimiters, arrAll[i1]) = false) 
{
tempHold .= arrAll[i1 - 1]
}
else
{
break
}

}


i1--
}


;print(StrLen(Trim(RegExReplace(tempHold, "[^A-Za-z0-9_]", ""))))
holdPositions[A_Index] := holdPositions[A_Index] - StrLen(Trim(RegExReplace(tempHold, "[^A-Za-z0-9_]", "")))
}



;;;;;;;;;;;;;;;;;;;


int foundFirstParenthesis := 0
int ParenthesisStackOPEN := 0
int ParenthesisStackCLOSE := 0

arr int holdPositionsEnd

holdPositionsTEMP := 0
Loop, % holdPositions.size()
{
holdPositionsTEMP := holdPositions[A_Index]
i1 := 0
tempHold := ""

foundFirstParenthesis := 0
ParenthesisStackOPEN := 0
ParenthesisStackCLOSE := 0

Loop, % arrAll.size()
{

if (holdPositionsTEMP < i1 + 1)
{

if (arrAll[i1] = "(")
{
foundFirstParenthesis := 1
}

if (arrAll[i1] = "(") and (foundFirstParenthesis = 1)
{
ParenthesisStackOPEN++
}


if (arrAll[i1] = ")") and (foundFirstParenthesis = 1)
{
ParenthesisStackCLOSE++
}
tempHold .= arrAll[i1 - 1]
if (ParenthesisStackOPEN = ParenthesisStackCLOSE) and (foundFirstParenthesis = 1)
{
tempHold .= arrAll[i1]
holdPositionsEnd.add(i1 + 1)
break
}


}


i1++
}
;print(tempHold)

}



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

int startPosReplace := 0
int endPosReplace := 0
int beenInside := 0
str holdDebug := ""
int holdDebugLen := 0
int canOut := 1

Loop, % holdPositions.size()
{

startPosReplace := holdPositions[holdPositions.size() - A_Index - 1]
endPosReplace := holdPositionsEnd[holdPositions.size() - A_Index - 1]


holdDebug := ""
beenInside := 0

holdDebugLen := 0
canOut := 1
Loop, Parse, line
{
if (A_Index + 1 >= startPosReplace) and (A_Index + 1 <= endPosReplace)
{
holdDebug .= A_LoopField
}
}

holdDebugLen := StrLen(holdDebug)

Loop, Parse, line
{
if (A_Index + 1 >= startPosReplace) and (A_Index + 1 <= endPosReplace)
{
beenInside++
}
if (beenInside = 1)
{
out .= fixArray123(holdDebug, arrayMethodStr, mode)
canOut := 0
}
else
{

if (canOut = 0)
{
holdDebugLen--
if (holdDebugLen = 0)
{
canOut := 1
}
}

if (canOut = 1)
{
out .= A_LoopField
}


}
}

;print("|" . holdDebug . "|")

line := out
out := ""
}


return line
}

func str arrayParserTranspiler(str line)
{
; mode 1 = Append
; mode 2 = Pop
; mode 3 = Size
; mode 4 = Insert
; mode 5 = Remove
; mode 6 = IndexOf

if (langToConvertTo = langFileExtension_2)
{
line := HTVMmatchStrRrplace(line, keyWordArrayAppend . "(", keyWordArrayAppend_2 . "(")
line := HTVMmatchStrRrplace(line, keyWordArrayPop . "(", keyWordArrayPop_2 . "(")
line := HTVMmatchStrRrplace(line, keyWordArraySize . "(", keyWordArraySize_2 . "(")
line := HTVMmatchStrRrplace(line, keyWordArrayInsert . "(", keyWordArrayInsert_2 . "(")
line := HTVMmatchStrRrplace(line, keyWordArrayRemove . "(", keyWordArrayRemove_2 . "(")
line := HTVMmatchStrRrplace(line, keyWordArrayIndexOf . "(", keyWordArrayIndexOf_2 . "(")
}
else
{
line := arrayParserTranspiler1(line, keyWordArrayAppend . "(", 1)
line := arrayParserTranspiler1(line, keyWordArrayPop . "(", 2)
line := arrayParserTranspiler1(line, keyWordArraySize . "(", 3)
line := arrayParserTranspiler1(line, keyWordArrayInsert . "(", 4)
line := arrayParserTranspiler1(line, keyWordArrayRemove . "(", 5)
line := arrayParserTranspiler1(line, keyWordArrayIndexOf . "(", 6)
}

return line
}

func str getFuncTypeConvert(str type)
{
str theType := ""
type := Trim(type)


if (allVarsSoWeDontReDecVars_FIX_TOGGLE = 1)
{



if (type = keyWordUint8)
{
allVarsSoWeDontReDecVars_FIX_uint8.add(str2)
}
if (type = keyWordUint16)
{
allVarsSoWeDontReDecVars_FIX_uint16.add(str2)
}
if (type = keyWordUint32)
{
allVarsSoWeDontReDecVars_FIX_uint32.add(str2)
}
if (type = keyWordUint64)
{
allVarsSoWeDontReDecVars_FIX_uint64.add(str2)
}

if (type = keyWordFLOAT)
{
allVarsSoWeDontReDecVars_FIX_float.add(str2)
}

if (type = keyWordINT64)
{
allVarsSoWeDontReDecVars_FIX_int64.add(str2)
}


if (langToConvertTo = "java")
{

if (type = keyWordINT8)
{
allVarsSoWeDontReDecVars_FIX_uint8.add(str2)
}
if (type = keyWordINT16)
{
allVarsSoWeDontReDecVars_FIX_uint16.add(str2)
}

}





}


if (langToConvertTo = "cpp") 
{
if (type = keyWordVoid)
{
    theType := "void"
}
if (type = keyWordDouble)
{
    theType := "double"
}
if (type = keyWordChar)
{
    theType := "char"
}
if (type = keyWordUint8)
{
    theType := "uint8_t"
}
if (type = keyWordUint16)
{
    theType := "uint16_t"
}
if (type = keyWordUint32)
{
    theType := "uint32_t"
}
if (type = keyWordUint64)
{
    theType := "uint64_t"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "std::string"
}
if (type = keyWordBOOL)
{
    theType := "bool"
}
if (type = keyWordFLOAT)
{
    theType := "float"
}
if (type = keyWordINT8)
{
    theType := "int8_t"
}
if (type = keyWordINT16)
{
    theType := "int16_t"
}
if (type = keyWordINT32)
{
    theType := "int32_t"
}
if (type = keyWordINT64)
{
    theType := "int64_t"
}
if (type = keyWordArrayDefinition)
{
    theType := "std::vector<std::string>"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "std::vector<int>"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "std::vector<std::string>"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "std::vector<float>"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "std::vector<bool>"
}

}
if (langToConvertTo = "py")
{
    theType := ""
}
if (langToConvertTo = "js")
{
    theType := ""
}
if (langToConvertTo = "go")
{
if (type = keyWordVoid)
{
    theType := ""
}
if (type = keyWordDouble)
{
    theType := "float64"
}
if (type = keyWordChar)
{
    theType := "byte"
}
if (type = keyWordUint8)
{
    theType := "uint8"
}
if (type = keyWordUint16)
{
    theType := "uint16"
}
if (type = keyWordUint32)
{
    theType := "uint32"
}
if (type = keyWordUint64)
{
    theType := "uint64"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "string"
}
if (type = keyWordBOOL)
{
    theType := "bool"
}
if (type = keyWordFLOAT)
{
    theType := "float64"
}
if (type = keyWordINT8)
{
    theType := "int8"
}
if (type = keyWordINT16)
{
    theType := "int16"
}
if (type = keyWordINT32)
{
    theType := "int32"
}
if (type = keyWordINT64)
{
    theType := "int64"
}
if (type = keyWordArrayDefinition)
{
    theType := "[]string"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "[]int"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "[]string"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "[]float64"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "[]bool"
}

}
if (langToConvertTo = "lua")
{
    theType := ""
}
if (langToConvertTo = "cs")
{
if (type = keyWordVoid)
{
    theType := "void"
}
if (type = keyWordDouble)
{
    theType := "double"
}
if (type = keyWordChar)
{
    theType := "char"
}
if (type = keyWordUint8)
{
    theType := "byte"
}
if (type = keyWordUint16)
{
    theType := "ushort"
}
if (type = keyWordUint32)
{
    theType := "uint"
}
if (type = keyWordUint64)
{
    theType := "ulong"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "string"
}
if (type = keyWordBOOL)
{
    theType := "bool"
}
if (type = keyWordFLOAT)
{
    theType := "float"
}
if (type = keyWordINT8)
{
    theType := "sbyte"
}
if (type = keyWordINT16)
{
    theType := "short"
}
if (type = keyWordINT32)
{
    theType := "int"
}
if (type = keyWordINT64)
{
    theType := "long"
}
if (type = keyWordArrayDefinition)
{
    theType := "List<string>"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "List<int>"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "List<string>"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "List<double>"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "List<bool>"
}

}
if (langToConvertTo = "java")
{
if (type = keyWordVoid)
{
    theType := "void"
}
if (type = keyWordDouble)
{
    theType := "double"
}
if (type = keyWordChar)
{
    theType := "char"
}
if (type = keyWordUint8)
{
    theType := "byte "
}
if (type = keyWordUint16)
{
    theType := "short"
}
if (type = keyWordUint32)
{
    theType := "int"
}
if (type = keyWordUint64)
{
    theType := "long"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "String"
}
if (type = keyWordBOOL)
{
    theType := "boolean"
}
if (type = keyWordFLOAT)
{
    theType := "float"
}
if (type = keyWordINT8)
{
    theType := "byte"
}
if (type = keyWordINT16)
{
    theType := "short"
}
if (type = keyWordINT32)
{
    theType := "int"
}
if (type = keyWordINT64)
{
    theType := "long"
}
if (type = keyWordArrayDefinition)
{
    theType := "ArrayList<String>"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "ArrayList<Integer>"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "ArrayList<String>"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "ArrayList<Double>"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "ArrayList<Boolean>"
}

}
if (langToConvertTo = "kt")
{
if (type = keyWordVoid)
{
    theType := ""
}
if (type = keyWordDouble)
{
    theType := "Double"
}
if (type = keyWordChar)
{
    theType := "Char"
}
if (type = keyWordUint8)
{
    theType := "UByte"
}
if (type = keyWordUint16)
{
    theType := "UShort"
}
if (type = keyWordUint32)
{
    theType := "UInt"
}
if (type = keyWordUint64)
{
    theType := "ULong"
}
if (type = keyWordINT)
{
    theType := "Int"
}
if (type = keyWordSTR)
{
    theType := "String"
}
if (type = keyWordBOOL)
{
    theType := "Boolean"
}
if (type = keyWordFLOAT)
{
    theType := "Float"
}
if (type = keyWordINT8)
{
    theType := "Byte"
}
if (type = keyWordINT16)
{
    theType := "Short"
}
if (type = keyWordINT32)
{
    theType := "Int"
}
if (type = keyWordINT64)
{
    theType := "Long"
}
if (type = keyWordArrayDefinition)
{
    theType := "ArrayList<String>"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "ArrayList<Int>"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "ArrayList<String>"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "ArrayList<Float>"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "ArrayList<Boolean>"
}

}
if (langToConvertTo = "rb")
{
    theType := ""
}
if (langToConvertTo = "nim")
{
if (type = keyWordVoid)
{
    theType := ""
}
if (type = keyWordDouble)
{
    theType := "float"
}
if (type = keyWordChar)
{
    theType := "char"
}
if (type = keyWordUint8)
{
    theType := "uint8"
}
if (type = keyWordUint16)
{
    theType := "uint16"
}
if (type = keyWordUint32)
{
    theType := "uint32"
}
if (type = keyWordUint64)
{
    theType := "uint64"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "string"
}
if (type = keyWordBOOL)
{
    theType := "bool"
}
if (type = keyWordFLOAT)
{
    theType := "float"
}
if (type = keyWordINT8)
{
    theType := "int8"
}
if (type = keyWordINT16)
{
    theType := "int16"
}
if (type = keyWordINT32)
{
    theType := "int32"
}
if (type = keyWordINT64)
{
    theType := "int64"
}
if (type = keyWordArrayDefinition)
{
    theType := "seq[string]"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "seq[int]"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "seq[string]"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "seq[float64]"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "seq[bool]"
}

}
if (langToConvertTo = "ahk")
{
    theType := ""
}
if (langToConvertTo = "swift")
{
if (type = keyWordVoid)
{
    theType := ""
}
if (type = keyWordDouble)
{
    theType := "Double"
}
if (type = keyWordChar)
{
    theType := "Character"
}
if (type = keyWordUint8)
{
    theType := "UInt8"
}
if (type = keyWordUint16)
{
    theType := "UInt16"
}
if (type = keyWordUint32)
{
    theType := "UInt32"
}
if (type = keyWordUint64)
{
    theType := "UInt64"
}
if (type = keyWordINT)
{
    theType := "Int"
}
if (type = keyWordSTR)
{
    theType := "String"
}
if (type = keyWordBOOL)
{
    theType := "Bool"
}
if (type = keyWordFLOAT)
{
    theType := "Float"
}
if (type = keyWordINT8)
{
    theType := "Int8"
}
if (type = keyWordINT16)
{
    theType := "Int16"
}
if (type = keyWordINT32)
{
    theType := "Int32"
}
if (type = keyWordINT64)
{
    theType := "Int64"
}
if (type = keyWordArrayDefinition)
{
    theType := "inout [String]"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "inout [Int]"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "inout [String]"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "inout [Float]"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "inout [Bool]"
}

}
if (langToConvertTo = "dart")
{
if (type = keyWordVoid)
{
    theType := "void"
}
if (type = keyWordDouble)
{
    theType := "double"
}
if (type = keyWordChar)
{
    theType := "String"
}
if (type = keyWordUint8)
{
    theType := "int"
}
if (type = keyWordUint16)
{
    theType := "int"
}
if (type = keyWordUint32)
{
    theType := "int"
}
if (type = keyWordUint64)
{
    theType := "BigInt"
}
if (type = keyWordINT)
{
    theType := "int"
}
if (type = keyWordSTR)
{
    theType := "String"
}
if (type = keyWordBOOL)
{
    theType := "bool"
}
if (type = keyWordFLOAT)
{
    theType := "double"
}
if (type = keyWordINT8)
{
    theType := "int"
}
if (type = keyWordINT16)
{
    theType := "int"
}
if (type = keyWordINT32)
{
    theType := "int"
}
if (type = keyWordINT64)
{
    theType := "int"
}
if (type = keyWordArrayDefinition)
{
    theType := "List<String>"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "List<int>"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "List<String>"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "List<double>"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "List<bool>"
}

}
if (langToConvertTo = "ts")
{
if (type = keyWordVoid)
{
    theType := "void"
}
if (type = keyWordDouble)
{
    theType := "number"
}
if (type = keyWordChar)
{
    theType := "string"
}
if (type = keyWordUint8)
{
    theType := "number"
}
if (type = keyWordUint16)
{
    theType := "number"
}
if (type = keyWordUint32)
{
    theType := "number"
}
if (type = keyWordUint64)
{
    theType := "bigint"
}
if (type = keyWordINT)
{
    theType := "number"
}
if (type = keyWordSTR)
{
    theType := "string"
}
if (type = keyWordBOOL)
{
    theType := "boolean"
}
if (type = keyWordFLOAT)
{
    theType := "number"
}
if (type = keyWordINT8)
{
    theType := "number"
}
if (type = keyWordINT16)
{
    theType := "number"
}
if (type = keyWordINT32)
{
    theType := "number"
}
if (type = keyWordINT64)
{
    theType := "bigint"
}
if (type = keyWordArrayDefinition)
{
    theType := "string[]"
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := "number[]"
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := "string[]"
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := "number[]"
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := "boolean[]"
}

}
if (langToConvertTo = "groovy")
{
    theType := ""
}
if (langToConvertTo = langFileExtension_2) 
{

; keyWordVoid
; keyWordDouble
; keyWordChar
; keyWordUint8
; keyWordUint16
; keyWordUint32
; keyWordUint64
; keyWordINT
; keyWordSTR
; keyWordBOOL
; keyWordFLOAT
; keyWordINT8
; keyWordINT16
; keyWordINT32
; keyWordINT64
; keyWordArrayDefinition
; keyWordArrayOfIntegersDefinition
; keyWordArrayOfStringsDefinition
; keyWordArrayOfFloatingPointNumbersDefinition
; keyWordArrayOfBooleansDefinition

if (type = keyWordVoid)
{
    theType := keyWordVoid_2
}
if (type = keyWordDouble)
{
    theType := keyWordDouble_2
}
if (type = keyWordChar)
{
    theType := keyWordChar_2
}
if (type = keyWordUint8)
{
    theType := keyWordUint8_2
}
if (type = keyWordUint16)
{
    theType := keyWordUint16_2
}
if (type = keyWordUint32)
{
    theType := keyWordUint32_2
}
if (type = keyWordUint64)
{
    theType := keyWordUint64_2
}
if (type = keyWordINT)
{
    theType := keyWordINT_2
}
if (type = keyWordSTR)
{
    theType := keyWordSTR_2
}
if (type = keyWordBOOL)
{
    theType := keyWordBOOL_2
}
if (type = keyWordFLOAT)
{
    theType := keyWordFLOAT_2
}
if (type = keyWordINT8)
{
    theType := keyWordINT8_2
}
if (type = keyWordINT16)
{
    theType := keyWordINT16_2
}
if (type = keyWordINT32)
{
    theType := keyWordINT32_2
}
if (type = keyWordINT64)
{
    theType := keyWordINT64_2
}
if (type = keyWordArrayDefinition)
{
    theType := keyWordArrayDefinition_2
}
if (type = keyWordArrayOfIntegersDefinition)
{
    theType := keyWordArrayOfIntegersDefinition_2
}
if (type = keyWordArrayOfStringsDefinition)
{
    theType := keyWordArrayOfStringsDefinition_2
}
if (type = keyWordArrayOfFloatingPointNumbersDefinition)
{
    theType := keyWordArrayOfFloatingPointNumbersDefinition_2
}
if (type = keyWordArrayOfBooleansDefinition)
{
    theType := keyWordArrayOfBooleansDefinition_2
}


}

return theType
}


func str getTheLastWord(str line)
{

if (InStr(Trim(line), " ") = false)
{
return line
}


Loop, Parse, line, " "
{
line := A_LoopField
}


return line
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func bool OSPhelp(str line, str keyWorddddddddddddd)
{

arr str lookAhead

Loop, Parse, line, `n, `r
{
lookAhead.add(A_LoopField)
}
lookAhead.add(" ")

Loop, Parse, line, `n, `r
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWorddddddddddddd)) = StrLower(keyWorddddddddddddd)) and (lookAhead[A_Index + 1] = "{")
{
return true
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWorddddddddddddd)) = StrLower(keyWorddddddddddddd)) and (lookAhead[A_Index + 1] = "{")
{
return true
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWorddddddddddddd))) = StrLower(keyWorddddddddddddd)) and (lookAhead[A_Index + 1] = "{")
{
return true
}
}

return false
}

func str OSP(str line)
{
str lineOriginal := line
str outOSP := ""

arr str lookAhead

Loop, Parse, line, `n, `r
{
lookAhead.add(A_LoopField)
}
lookAhead.add(" ")

arr str stack
int inConstructOSP := 0
int countParentheses := 0
int countParenthesesStart := 0
int countParenthesesOfSet := 0
str stackRN := ""

int alredy := 0




outOSP := ""

if (OSPhelp(line, keyWordAlliance))
{

Loop, Parse, line, `n, `r
{

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordAlliance))) = StrLower(keyWordAlliance)) and (lookAhead[A_Index + 1] = "{")
{
;print(A_LoopField)

stackRN := A_LoopField
countParentheses := 0
countParenthesesStart := 0
}





if (A_LoopField = "{")
{
countParentheses++

countParenthesesStart := 1
}
if (A_LoopField = "}")
{
countParentheses--
}


if (countParenthesesStart = 1) and (countParentheses = 0)
{
; escaped
countParentheses := 0
countParenthesesStart := 0
alredy := 1
outOSP .= A_LoopField + "_HTVM-OSP-HTVM-OSP-REMOVE-OSP-HTVMv2--OSP" . Chr(10)

countParentheses := 1

}



if (alredy = 0)
{
outOSP .= A_LoopField . "`n"
}
alredy := 0

}


StringTrimRight, outOSP, outOSP, 1
line := outOSP
}

inConstructOSP := 0
countParentheses := 0
countParenthesesStart := 0
countParenthesesOfSet := 0
stackRN := ""
alredy := 0




outOSP := ""

if (OSPhelp(line, keyWordCrew))
{


Loop, Parse, line, `n, `r
{

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordCrew)) = StrLower(keyWordCrew)) and (lookAhead[A_Index + 1] = "{")
{
;print(A_LoopField)

stackRN := A_LoopField
countParentheses := 0
countParenthesesStart := 0
}





if (A_LoopField = "{")
{
countParentheses++

countParenthesesStart := 1
}
if (A_LoopField = "}")
{
countParentheses--
}


if (countParenthesesStart = 1) and (countParentheses = 0)
{
; escaped
countParentheses := 0
countParenthesesStart := 0
alredy := 1
outOSP .= A_LoopField + "_HTVM-OSP-HTVM-OSP-REMOVE-OSP-HTVMv2--OSP" . Chr(10)

countParentheses := 1

}



if (alredy = 0)
{
outOSP .= A_LoopField . "`n"
}
alredy := 0

}


StringTrimRight, outOSP, outOSP, 1
line := outOSP
}

inConstructOSP := 0
countParentheses := 0
countParenthesesStart := 0
countParenthesesOfSet := 0
stackRN := ""
alredy := 0




outOSP := ""

if (OSPhelp(line, keyWordDefObj))
{

Loop, Parse, line, `n, `r
{


if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordDefObj)) = StrLower(keyWordDefObj)) and (lookAhead[A_Index + 1] = "{")
{
;print(A_LoopField)

stackRN := A_LoopField
countParentheses := 0
countParenthesesStart := 0
}





if (A_LoopField = "{")
{
countParentheses++

countParenthesesStart := 1
}
if (A_LoopField = "}")
{
countParentheses--
}


if (countParenthesesStart = 1) and (countParentheses = 0)
{
; escaped
countParentheses := 0
countParenthesesStart := 0
alredy := 1
outOSP .= A_LoopField + "_HTVM-OSP-HTVM-OSP-REMOVE-OSP-HTVMv2--OSP" . Chr(10)

countParentheses := 1

}



if (alredy = 0)
{
outOSP .= A_LoopField . "`n"
}
alredy := 0

}

line := outOSP
}


inConstructOSP := 0
countParentheses := 0
countParenthesesStart := 0
countParenthesesOfSet := 0
stackRN := ""
alredy := 0




int inOBJ := 0

str tempStackText := ""

outOSP := ""


Loop, Parse, line, `n, `r
{

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordDefObj)) = StrLower(keyWordDefObj)) and (lookAhead[A_Index + 1] = "{")
{
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordDefObj)))))

ospDic.add(str1)

alredy := 2
inOBJ := 1


tempStackText := ""

Loop, % ospDic.size()
{
tempStackText .= ospDic[A_Index] . "."
}
StringTrimRight, tempStackText, tempStackText, 1

outOSP .= "[][][][][] " . StrReplace(tempStackText, ".", "_") . " [][][][][]" . Chr(10)

}

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordProp)) = StrLower(keyWordProp))
{
tempStackText := ""

Loop, % ospDic.size() 
{
tempStackText .= ospDic[A_Index] . "."
}
StringTrimRight, tempStackText, tempStackText, 1

outOSP .= A_LoopField . "-----------------------HTVM-OSP-HTVM-OBJ--------------" . tempStackText . Chr(10)

}


if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordMethod)) = StrLower(keyWordMethod)) and (lookAhead[A_Index + 1] = "{")
{

tempStackText := ""

Loop, % ospDic.size()
{
tempStackText .= ospDic[A_Index] . "."
}
StringTrimRight, tempStackText, tempStackText, 1
alredy := 1
outOSP .= A_LoopField . "-----------------------HTVM-OSP-HTVM-OBJ-------------- " . "OSPHTVMOSP_" . StrReplace(tempStackText, ".", "_") . Chr(10)
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordCrew)) = StrLower(keyWordCrew)) and (lookAhead[A_Index + 1] = "{")
{
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordCrew)))))
;print("DEBUG11111111111111111111: " + str1)
ospDic.add(str1)
;print(A_LoopField)
alredy := 2
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordAlliance)) = StrLower(keyWordAlliance)) and (lookAhead[A_Index + 1] = "{")
{
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(keyWordAlliance)))))

ospDic.add(str1)
;print(A_LoopField)
alredy := 2
}

if (A_LoopField = "}_HTVM-OSP-HTVM-OSP-REMOVE-OSP-HTVMv2--OSP")
{
if (inOBJ = 1)
{
; extra code

tempStackText := ""

Loop, % ospDic.size()
{
tempStackText .= ospDic[A_Index] . "."
}
StringTrimRight, tempStackText, tempStackText, 1

outOSP .= "[end][end][end][end][end] " . StrReplace(tempStackText, ".", "_") . " [end][end][end][end][end]" . Chr(10)
inOBJ := 0
}

alredy := 1
ospDic.pop()
}


if (alredy <= 0)
{
outOSP .= A_LoopField . "`n"
}
alredy--

}




StringTrimRight, outOSP, outOSP, 1

if (Trim(outOSP) = "")
{
return lineOriginal
}
return outOSP
}



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


func str fixGoAindexUnseen(str codeToFixTheGoUNSEEN)
{
str tempFixBugInfLoop := ""
str AindexKeyWOrd := keyWordAIndex
; Regex to find all A_Index<num> occurrences
arr str fixAindexInGoUnused

str tempFixIDK := ""

int howMany_fixAindexInGoUnusedNUM := 0
int found_fixAindexInGoUnused := 0
str foundWHAT_fixAindexInGoUnused := ""


Loop, Parse, codeToFixTheGoUNSEEN, `n, `r
{
if (RegExMatch(A_LoopField, AindexKeyWOrd . "\d+"))
{
if (SubStr(Trim(A_LoopField), 1, 4) != "for ")
{

tempFixBugInfLoop := ""

Loop, Parse, A_LoopField, " "
{
if (InStr(A_LoopField, AindexKeyWOrd))
{
tempFixBugInfLoop := ExtractDigits(StrSplit(A_LoopField, AindexKeyWOrd, 2))
break
}
}



fixAindexInGoUnused.add(AindexKeyWOrd . tempFixBugInfLoop)

}
}
}

howMany_fixAindexInGoUnused++
howMany_fixAindexInGoUnused++
Loop, % howMany_fixAindexInGoUnused
{
howMany_fixAindexInGoUnusedNUM := A_Index
found_fixAindexInGoUnused := 0
foundWHAT_fixAindexInGoUnused := AindexKeyWOrd . STR(howMany_fixAindexInGoUnusedNUM)
Loop, % fixAindexInGoUnused.size()
{
if (fixAindexInGoUnused[A_Index] = AindexKeyWOrd . STR(howMany_fixAindexInGoUnusedNUM))
{
found_fixAindexInGoUnused := 1
break
}
} 

if (foundWHAT_fixAindexInGoUnused != "")
{
if (found_fixAindexInGoUnused = 0)
{

tempFixIDK := ""

Loop, Parse, codeToFixTheGoUNSEEN, `n, `r
{

if (InStr(A_LoopField, " := range "))
{
tempFixIDK .= StrReplace(A_LoopField, foundWHAT_fixAindexInGoUnused, "_") . Chr(10)
}
else
{
tempFixIDK .= StrReplace(A_LoopField, foundWHAT_fixAindexInGoUnused, "i") . Chr(10)
}


}

StringTrimRight, codeToFixTheGoUNSEEN, tempFixIDK, 1

}
}

}

return codeToFixTheGoUNSEEN

}





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



func arr str GETfullLangAllOperators()
{
arr str fullLangAllOperators
if (langToConvertTo = "cpp") 
{
    fullLangAllOperators.add("nullptr")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "py")
{
    fullLangAllOperators.add("None")
    fullLangAllOperators.add("True")
    fullLangAllOperators.add("False")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("**")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("is")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("and")
    fullLangAllOperators.add("or")
    fullLangAllOperators.add("not")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "js")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("**")
    if (useJavaScriptAlwaysTripleEqual = "on")
    {
        fullLangAllOperators.add("===")
    }
    else
    {
        fullLangAllOperators.add("==")    
    }
    fullLangAllOperators.add("===")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add(">>>")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "go")
{
    fullLangAllOperators.add("nil")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN GO SINCE GO DOES NOT HAVE A TERNARY OPERATOR")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN GO SINCE GO DOES NOT HAVE A TERNARY OPERATOR")
}

if (langToConvertTo = "lua")
{
    fullLangAllOperators.add("nil")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("..")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("~=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("and")
    fullLangAllOperators.add("or")
    fullLangAllOperators.add("not")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "cs")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "java")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add(">>>")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "kt")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("===")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("and")
    fullLangAllOperators.add("or")
    fullLangAllOperators.add("xor")
    fullLangAllOperators.add("inv")
    fullLangAllOperators.add("shl")
    fullLangAllOperators.add("shr")
    fullLangAllOperators.add("ushr")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "rb")
{
    fullLangAllOperators.add("nil")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("**")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "nim")
{
    fullLangAllOperators.add("nil")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("HTVM--Fix-Nim-TheConcat-NOT--Working--AA")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("mod")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("and")
    fullLangAllOperators.add("or")
    fullLangAllOperators.add("not")
    fullLangAllOperators.add("and")
    fullLangAllOperators.add("or")
    fullLangAllOperators.add("xor")
    fullLangAllOperators.add("not")
    fullLangAllOperators.add("shl")
    fullLangAllOperators.add("shr")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}


if (langToConvertTo = "ahk")
{
    fullLangAllOperators.add(Chr(34) . "" . Chr(34))
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add(".")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("=")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "swift")
{
    fullLangAllOperators.add("nil")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("===")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "dart")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("THIS OPERATOR DOES NOT EXIST IN THIS LANG SORRY FOR THIS ERROR")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("===")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add(">>>")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}

if (langToConvertTo = "ts")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("**")
    if (useJavaScriptAlwaysTripleEqual = "on")
    {
        fullLangAllOperators.add("===")
    }
    else
    {
        fullLangAllOperators.add("==")    
    }
    fullLangAllOperators.add("===")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add(">>>")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}


if (langToConvertTo = "groovy")
{
    fullLangAllOperators.add("null")
    fullLangAllOperators.add("true")
    fullLangAllOperators.add("false")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("+")
    fullLangAllOperators.add("-")
    fullLangAllOperators.add("*")
    fullLangAllOperators.add("/")
    fullLangAllOperators.add("%")
    fullLangAllOperators.add("**")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("==")
    fullLangAllOperators.add("!=")
    fullLangAllOperators.add(">")
    fullLangAllOperators.add("<")
    fullLangAllOperators.add(">=")
    fullLangAllOperators.add("<=")
    fullLangAllOperators.add("&&")
    fullLangAllOperators.add("||")
    fullLangAllOperators.add("!")
    fullLangAllOperators.add("&")
    fullLangAllOperators.add("|")
    fullLangAllOperators.add("^")
    fullLangAllOperators.add("~")
    fullLangAllOperators.add("<<")
    fullLangAllOperators.add(">>")
    fullLangAllOperators.add(">>>")
    fullLangAllOperators.add("?")
    fullLangAllOperators.add(":")
}
if (langToConvertTo = langFileExtension_2) 
{
    fullLangAllOperators.add(keyWordNull_2)
    fullLangAllOperators.add(keyWordTrue_2)
    fullLangAllOperators.add(keyWordFalse_2)
    fullLangAllOperators.add(keyWordConcat_2)
    fullLangAllOperators.add(keyWordAdd_2)
    fullLangAllOperators.add(keyWordSub_2)
    fullLangAllOperators.add(keyWordMul_2)
    fullLangAllOperators.add(keyWordDiv_2)
    fullLangAllOperators.add(keyWordMod_2)
    fullLangAllOperators.add(keyWordExp_2)
    fullLangAllOperators.add(keyWordEqual_2)
    fullLangAllOperators.add(keyWordStrictEqual_2)
    fullLangAllOperators.add(keyWordNotEqual_2)
    fullLangAllOperators.add(keyWordGreater_2)
    fullLangAllOperators.add(keyWordLess_2)
    fullLangAllOperators.add(keyWordGreaterEqual_2)
    fullLangAllOperators.add(keyWordLessEqual_2)
    fullLangAllOperators.add(keyWordAnd_2)
    fullLangAllOperators.add(keyWordOr_2)
    fullLangAllOperators.add(keyWordNot_2)
    fullLangAllOperators.add(keyWordBitAnd_2)
    fullLangAllOperators.add(keyWordBitOr_2)
    fullLangAllOperators.add(keyWordBitXor_2)
    fullLangAllOperators.add(keyWordBitNot_2)
    fullLangAllOperators.add(keyWordShiftLeft_2)
    fullLangAllOperators.add(keyWordShiftRight_2)
    fullLangAllOperators.add(keyWordShiftUnsignedRight_2)
    fullLangAllOperators.add(keyWordTernary1_2)
    fullLangAllOperators.add(keyWordTernary2_2)
}

return fullLangAllOperators
}


func arr str GETfullLangAllOperators_HELP()
{
arr str fullLangAllOperators_HELP

fullLangAllOperators_HELP.add(keyWordNull)
fullLangAllOperators_HELP.add(keyWordTrue)
fullLangAllOperators_HELP.add(keyWordFalse)
fullLangAllOperators_HELP.add(keyWordConcat)
fullLangAllOperators_HELP.add(keyWordAdd)
fullLangAllOperators_HELP.add(keyWordSub)
fullLangAllOperators_HELP.add(keyWordMul)
fullLangAllOperators_HELP.add(keyWordDiv)
fullLangAllOperators_HELP.add(keyWordMod)
fullLangAllOperators_HELP.add(keyWordExp)
fullLangAllOperators_HELP.add(keyWordEqual)
fullLangAllOperators_HELP.add(keyWordStrictEqual)
fullLangAllOperators_HELP.add(keyWordNotEqual)
fullLangAllOperators_HELP.add(keyWordGreater)
fullLangAllOperators_HELP.add(keyWordLess)
fullLangAllOperators_HELP.add(keyWordGreaterEqual)
fullLangAllOperators_HELP.add(keyWordLessEqual)
fullLangAllOperators_HELP.add(keyWordAnd)
fullLangAllOperators_HELP.add(keyWordOr)
fullLangAllOperators_HELP.add(keyWordNot)
fullLangAllOperators_HELP.add(keyWordBitAnd)
fullLangAllOperators_HELP.add(keyWordBitOr)
fullLangAllOperators_HELP.add(keyWordBitXor)
fullLangAllOperators_HELP.add(keyWordBitNot)
fullLangAllOperators_HELP.add(keyWordShiftLeft)
fullLangAllOperators_HELP.add(keyWordShiftRight)
fullLangAllOperators_HELP.add(keyWordShiftUnsignedRight)
fullLangAllOperators_HELP.add(keyWordTernary1)
fullLangAllOperators_HELP.add(keyWordTernary2)


return fullLangAllOperators_HELP
}

func str ospHELP2(str line) {
    str outHelp := ""
    int outHelpInt := 0
    int outHelpInt2 := 1
    Loop, Parse, line {
        if (A_LoopField = ".") {
            outHelpInt2++
        }
    }
    outHelpInt := StrLen(StrSplit(line, ".", outHelpInt2))
    outHelpInt++
    StringTrimRight, outHelp, line, outHelpInt
    return outHelp
}


func str expressionParserTranspiler(str expression)
{
str fixExpertionLineFuncOnlyTEXT_func := ""
int fixExpertionLineFuncOnlyTEXT_numDelete := 0
if (fixExpertionLineFuncOnly = 1)
{
fixExpertionLineFuncOnlyTEXT_func := StrSplit(expression, "(", 1)
fixExpertionLineFuncOnlyTEXT_numDelete := StrLen(fixExpertionLineFuncOnlyTEXT_func) + 1
expression := StringTrimLeft(expression, fixExpertionLineFuncOnlyTEXT_numDelete)
}

; osp dosent work in:
;java kinda works
;groovy 
;ruby

; but
;go works but kinda need to use:
;print(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD)

; the other langs works

; osp
if (langToConvertTo != langFileExtension_2) 
{
Loop, % ospDic1.size()
{
str00 := ospDic1[A_Index]


expression := StrReplace(expression, StrReplace(str00, "_", ".") . ".", str00 . "_")


}

Loop, % ospDic2.size()
{
str00 := ospDic2[A_Index]
expression := RegExReplace(expression, "\b" . str00 . "\b", "OSPHTVMOSP_" . StrReplace(str00, ".", "_"))
}
}

; extra for array methods
expression := arrayParserTranspiler(expression)


if (langToConvertTo = langFileExtension_2)
{
expression := RegExReplace(expression, "\b" . keyWordAwait . "\b", keyWordAwait_2)
}

if (langToConvertTo = "js") or (langToConvertTo = "ts")
{
expression := RegExReplace(expression, "\b" . keyWordAwait . "\b", "await ")
}


if (langToConvertTo != "js") and (langToConvertTo != "ts") and (langToConvertTo != langFileExtension_2)
{
expression := RegExReplace(expression, "\b" . keyWordAwait . "\b", "")
}


Loop, 29
{
if (InStr(expression, fullLangAllOperators_HELP[A_Index]))
{
if (A_Index = 0) or (A_Index = 1) or (A_Index = 2)  ; Changed 'and' to 'or' to check for any of these indexes
{
expression := RegExReplace(expression, "\b" . fullLangAllOperators_HELP[A_Index] . "\b", fullLangAllOperators[A_Index])
}
else
{
if (A_Index = 19)
{

if (langToConvertTo = "py") or (langToConvertTo = "lua") or (langToConvertTo = "nim")
{
expression := RegExReplace(expression, "\b" . fullLangAllOperators_HELP[A_Index] . "\b", "not")
}
else
{
expression := RegExReplace(expression, "\b" . fullLangAllOperators_HELP[A_Index] . "\b", "!")
}

if (langToConvertTo = "py") or (langToConvertTo = "lua") or (langToConvertTo = "nim")
{
expression := RegExReplace(expression, "!([\w]+)", "not $1")
}
expression := StrReplace(expression, " not= ", " != ")
}
else
{
expression := StrReplace(expression, " " . fullLangAllOperators_HELP[A_Index] . " ", " " . fullLangAllOperators[A_Index] . " ")

if (A_Index = 28)
{
if (langToConvertTo = "py")
{
; Convert C-like ternary to Python ternary using RegExReplace
expression := RegExReplace(expression, "(.*?)\s*\?\s*(.*?)\s*:\s*(.*?)", "$2 if $1 else $3")
}
if (langToConvertTo = "nim")
{
; Convert C-like ternary to Nim ternary using RegExReplace
expression := RegExReplace(expression, "(.*?)\s*\?\s*(.*?)\s*:\s*(.*)", "if $1: $2 else: $3")
}
if (langToConvertTo = "lua")
{
; Convert C-like ternary to Lua ternary-like expression using RegExReplace
expression := RegExReplace(expression, "(.*?)\s*\?\s*(.*?)\s*:\s*(.*?)", "$1 and $2 or $3")
}
if (langToConvertTo = "kt")
{
; Convert C-like ternary to Kotlin ternary-like expression using RegExReplace
expression := RegExReplace(expression, "(.*?)\s*\?\s*(.*?)\s*:\s*(.*?)", "if $1 $2 else $3")
}
}

}
}



}
}


if (langToConvertTo = "ahk")
{
if (InStr(expression, keyWordAIndex))
{
expression := RegExReplace(expression, "\b" . keyWordAIndex . "\b", "A_Index")
}
if (InStr(expression, keyWordALoopField))
{
expression := RegExReplace(expression, "\b" . keyWordALoopField . "\b", "A_LoopField")
}
}

if (langToConvertTo = "rb")
{
expression := RegExReplace(expression, keyWordAIndexOriginal . "(\d*)", StrLower(keyWordAIndexOriginal) . "$1")
expression := RegExReplace(expression, keyWordALoopFieldOriginal . "(\d*)", StrLower(keyWordALoopFieldOriginal) . "$1")
}


if (langToConvertTo = langFileExtension_2) 
{
if (InStr(expression, keyWordAIndex))
{
expression := RegExReplace(expression, "\b" . keyWordAIndex . "\b", keyWordAIndex_2)
}
if (InStr(expression, keyWordALoopField))
{
expression := RegExReplace(expression, "\b" . keyWordALoopField . "\b", keyWordALoopField_2)
}
}



if (langToConvertTo != langFileExtension_2) and (langToConvertTo != "ahk")
{
if (langToConvertTo = "py") or (langToConvertTo = "lua") or (langToConvertTo = "nim")
{
expression := StrReplace(expression, ") and (", " and ")
expression := StrReplace(expression, ") or (", " or ")
}
else
{
expression := StrReplace(expression, ") && (", " && ")
expression := StrReplace(expression, ") || (", " || ")
}
}




if (langToConvertTo = langFileExtension_2) 
{
expression := RegExReplace(expression, "\b" . keyWordThis . "\b", keyWordThis_2)
}
else
{
expression := RegExReplace(expression, "\b" . keyWordThis . "\b", "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD")
}

if (langToConvertTo = "cpp") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".what()")
}
if (langToConvertTo = "js") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".message")
}
if (langToConvertTo = "cs") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".Message")
}
if (langToConvertTo = "java") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".getMessage()")
}
if (langToConvertTo = "kt") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".message")
}
if (langToConvertTo = "rb") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".message")
}
if (langToConvertTo = "nim") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".msg")
}
if (langToConvertTo = "swift") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".localizedDescription")
}
if (langToConvertTo = "ts") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".message")
}
if (langToConvertTo = "groovy") {
expression := RegExReplace(expression, "\b" . theTryCatchVarForErrors . "\b", theTryCatchVarForErrors . ".message")
}

; fix java arrName[A_Index] not existing
if (langToConvertTo = "java") 
{
expression := RegExReplace(expression, "(\b[A-Za-z_]\w*)\s*\[", "$1.get(")
expression := StrReplace(expression, "]", ")")
}



if (langToConvertTo = "swift") 
{
expression := StrReplace(expression, Chr(39), Chr(34))
}
if (langToConvertTo = "ahk")
{
expression := StrReplace(expression, Chr(39), Chr(34))
}

if (fixExpertionLineFuncOnly = 1)
{
expression := fixExpertionLineFuncOnlyTEXT_func . "(" . expression
}

if (langToConvertTo = "nim") 
{
expression := StrReplace(expression, "HTVM--Fix-Nim-TheConcat-NOT--Working--AA", "&")
}

return expression
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func str propHELP(str line, str lineOspHelpLine)
{

if (lineOspHelpLine = "no-no")
{
lineOspHelpLine := ""
}

str htCodeOUTOUT := ""
str ALoopField := ""
Loop, Parse, line, `n, `r
{
if (InStr(A_LoopField, " " . keyWordAssign . " ")) or (InStr(A_LoopField, " " . keyWordAssignAdd . " ")) or (InStr(A_LoopField, " " . keyWordAssignConcat . " ")) or (InStr(A_LoopField, " " . keyWordAssignSub . " ")) or (InStr(A_LoopField, " " . keyWordAssignMul . " ")) or (InStr(A_LoopField, " " . keyWordAssignDiv . " ")) or (InStr(A_LoopField, " " . keyWordAssignMod . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftLeft . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitAnd . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitOr . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitXor . " ")) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
;keyWordAssign
;keyWordAssignAdd
;keyWordAssignConcat
;keyWordAssignSub
;keyWordAssignMul
;keyWordAssignDiv
;keyWordAssignMod
;keyWordAssignShiftLeft
;keyWordAssignShiftRight
;keyWordLogicalAssignShiftRight
;keyWordAssignBitAnd
;keyWordAssignBitOr
;keyWordAssignBitXor

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars

;allVarsSoWeDontReDecVars
;allVarsSoWeDontReDecVars_FIX_uint8
;allVarsSoWeDontReDecVars_FIX_uint16
;allVarsSoWeDontReDecVars_FIX_uint32
;allVarsSoWeDontReDecVars_FIX_uint64
;allVarsSoWeDontReDecVars_FIX_int64
;allVarsSoWeDontReDecVars_FIX_float


if (InStr(A_LoopField, " " . keyWordAssign . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssign . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssign . " ", 2)
str10 := keyWordAssign
str11 := keyWordAssign_2
if (langToConvertTo = "ahk")
{
str12 := ":="
}
else
{
str12 := "="
}
}
else if (InStr(A_LoopField, " " . keyWordAssignAdd . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignAdd . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignAdd . " ", 2)
str10 := keyWordAssignAdd
str11 := keyWordAssignAdd_2
str12 := "+="
}
else if (InStr(A_LoopField, " " . keyWordAssignConcat . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignConcat . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignConcat . " ", 2)
str10 := keyWordAssignConcat
str11 := keyWordAssignConcat_2
if (langToConvertTo = "ahk")
{
str12 := ".="
}
else
{
str12 := "+="
}

}
else if (InStr(A_LoopField, " " . keyWordAssignSub . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignSub . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignSub . " ", 2)
str10 := keyWordAssignSub
str11 := keyWordAssignSub_2
str12 := "-="
}
else if (InStr(A_LoopField, " " . keyWordAssignMul . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignMul . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignMul . " ", 2)
str10 := keyWordAssignMul
str11 := keyWordAssignMul_2
str12 := "*="
}
else if (InStr(A_LoopField, " " . keyWordAssignDiv . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignDiv . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignDiv . " ", 2)
str10 := keyWordAssignDiv
str11 := keyWordAssignDiv_2
str12 := "/="
}
else if (InStr(A_LoopField, " " . keyWordAssignMod . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignMod . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignMod . " ", 2)
str10 := keyWordAssignMod
str11 := keyWordAssignMod_2
str12 := "%="
}
else if (InStr(A_LoopField, " " . keyWordAssignShiftLeft . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignShiftLeft . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignShiftLeft . " ", 2)
str10 := keyWordAssignShiftLeft
str11 := keyWordAssignShiftLeft_2
str12 := "<<="
}
else if (InStr(A_LoopField, " " . keyWordAssignShiftRight . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignShiftRight . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignShiftRight . " ", 2)
str10 := keyWordAssignShiftRight
str11 := keyWordAssignShiftRight_2
str12 := ">>="
}
else if (InStr(A_LoopField, " " . keyWordLogicalAssignShiftRight . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ", 2)
str10 := keyWordLogicalAssignShiftRight
str11 := keyWordLogicalAssignShiftRight_2
str12 := ">>>="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitAnd . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitAnd . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitAnd . " ", 2)
str10 := keyWordAssignBitAnd
str11 := keyWordAssignBitAnd_2
str12 := "&="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitOr . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitOr . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitOr . " ", 2)
str10 := keyWordAssignBitOr
str11 := keyWordAssignBitOr_2
str12 := "|="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitXor . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitXor . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitXor . " ", 2)
str10 := keyWordAssignBitXor
str11 := keyWordAssignBitXor_2
str12 := "^="
}



str6 := Trim(expressionParserTranspiler(Trim(str6)))



if (SubStrLastChars(str6, 1) = ";")
{
StringTrimRight, str6, str6, 1
}
str1 := Trim(str1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
ALoopField := str1


if (InStr(ALoopField, " ") = false)
{
lineDone := 1
str1 := lineOspHelpLine . Trim(str1)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str1)

if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
str4 := str1 . " " . str11 . " " . str6 . ";"
}
else
{
str4 := str1 . " " . str11 . " " . str6
}
}
if (langToConvertTo = "cpp") 
{
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "py") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "js") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "go") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "java") {

if (InStr(str1, "["))
{
; Convert arr[something] to arr.set(something, value);
str1 := RegExReplace(str1, "(\b[A-Za-z_]\w*)\s*\[(.*?)\]", "$1.set($2, ")
str4 := str1 . str6 . ");"
}
else
{
str4 := str1 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy") {
str4 := str1 . " " . str12 . " " . str6
}
htCodeOUTOUT .= str4 . Chr(10)

}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordConst)) = keyWordConst) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordConst)))




Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordConst)))



str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)

if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}


if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " .  str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "let " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := "const " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
        str4 := "const " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "const " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{

str4 := "const " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := "final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "const " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := "final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "const " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := "final " . str2 . " " . str12 . " " . str6
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)







}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordVar)) = keyWordVar) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{


str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordVar)))



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordVar)))



str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}

if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)







}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordLet)) = keyWordLet) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{


str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordLet)))



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordLet)))


str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}




if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {

        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := "local " . str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{



str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)






}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordDouble . " ")) = keyWordDouble . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordChar . " ")) = keyWordChar . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint8 . " ")) = keyWordUint8 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint16 . " ")) = keyWordUint16 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint32 . " ")) = keyWordUint32 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint64 . " ")) = keyWordUint64 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT . " ")) = keyWordINT . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordSTR . " ")) = keyWordSTR . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordBOOL . " ")) = keyWordBOOL . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordFLOAT . " ")) = keyWordFLOAT . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT8 . " ")) = keyWordINT8 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT16 . " ")) = keyWordINT16 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT32 . " ")) = keyWordINT32 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT64 . " ")) = keyWordINT64 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayDefinition . " ")) = keyWordArrayDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfIntegersDefinition . " ")) = keyWordArrayOfIntegersDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfStringsDefinition . " ")) = keyWordArrayOfStringsDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfFloatingPointNumbersDefinition . " ")) = keyWordArrayOfFloatingPointNumbersDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfBooleansDefinition . " ")) = keyWordArrayOfBooleansDefinition . " ") and (usePrefixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)

if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{
if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2  . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)
}
else if (RegExMatch(Trim(str1), "^[a-zA-Z_][a-zA-Z_0-9]*:\s?.*$")) and (usePostfixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1




str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)



if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
if (langToConvertTo = langFileExtension_2) {


if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{
if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6 . ";"
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)
}




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordVar)) = keyWordVar) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordVar)))


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordVar)))
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") 
{
if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
        str4 := "var " . str2 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " .  str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}



}
if (langToConvertTo = "java")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "var " . str2 . ": " . str3 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)






allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordLet)) = keyWordLet) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordLet)))


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordLet)))
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}




if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"

}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {

        str4 := "let " . str2 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := "local " . str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}




if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}
}
if (langToConvertTo = "java")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)






allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordDouble . " ")) = keyWordDouble . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordChar . " ")) = keyWordChar . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint8 . " ")) = keyWordUint8 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint16 . " ")) = keyWordUint16 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint32 . " ")) = keyWordUint32 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint64 . " ")) = keyWordUint64 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT . " ")) = keyWordINT . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordSTR . " ")) = keyWordSTR . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordBOOL . " ")) = keyWordBOOL . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordFLOAT . " ")) = keyWordFLOAT . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT8 . " ")) = keyWordINT8 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT16 . " ")) = keyWordINT16 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT32 . " ")) = keyWordINT32 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT64 . " ")) = keyWordINT64 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayDefinition . " ")) = keyWordArrayDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfIntegersDefinition . " ")) = keyWordArrayOfIntegersDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfStringsDefinition . " ")) = keyWordArrayOfStringsDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfFloatingPointNumbersDefinition . " ")) = keyWordArrayOfFloatingPointNumbersDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfBooleansDefinition . " ")) = keyWordArrayOfBooleansDefinition . " ") and (usePrefixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
str1 := Trim(A_LoopField)


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := lineOspHelpLine . Trim(str2)
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)

if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{



if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ";"
    } else {
        str4 := "let " . str2 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}



if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "java")
{


if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (RegExMatch(Trim(A_LoopField), "^[a-zA-Z_][a-zA-Z0-9_]*: [^:]*;?$")) and (usePostfixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
str1 := Trim(A_LoopField)
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := lineOspHelpLine . Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)



if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " = [];"
    } else {
        str4 := "let " . str2 . " = [];"
    }
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " = [];"
    } else {
        str4 := "let " . str2 . ": " . str3 . " = [];"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {
if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ";"
    } else {
        str4 := "let " . str2 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}




if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "java")
{


if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCodeOUTOUT .= str4 . Chr(10)
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else
{
htCodeOUTOUT .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCodeOUTOUT, htCodeOUTOUT, 1
return htCodeOUTOUT
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
func arr str slidingWinFixCommentsRmFUNC(str line)
{
arr str slidingWinFixCommentsRmFFFF
Loop, Parse, line
{
slidingWinFixCommentsRmFFFF.add(A_LoopField)
}
Loop, % StrLen(keyWordComment . keyWordComment) + 2
{
slidingWinFixCommentsRmFFFF.add(" ")
}
return slidingWinFixCommentsRmFFFF
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func str compiler(str htCode, str allInstructionFile, str mode, str langToConvertToParam := "")
{



str instructions := allInstructionFile



Loop, Parse, allInstructionFile, `n, `r
{
    if (A_Index = 0) {
		langToConvertTo := Trim(A_LoopField)
	}
	if (A_Index = 1) {
		langFileExtension := Trim(A_LoopField)
	}
	if (A_Index = 2) {
		commands := Trim(A_LoopField)
	}
	if (A_Index = 3) {
		keyWordAlliance := Trim(A_LoopField) . " "
	}
	if (A_Index = 4) {
		keyWordCrew := Trim(A_LoopField) . " "
	}
	if (A_Index = 5) {
		keyWordMethod := Trim(A_LoopField) . " "
	}
	if (A_Index = 6) {
		keyWordDefObj := Trim(A_LoopField) . " "
	}
	if (A_Index = 7) {
		keyWordProp := Trim(A_LoopField) . " "
	}
	if (A_Index = 8) {
		keyWordThis := Trim(A_LoopField)
	}
	if (A_Index = 9) {
		keyWordInclude := Trim(A_LoopField)
	}
	if (A_Index = 10) {
		keyWordCodeInTheTranspiledLangStart := Trim(A_LoopField)
	}
	if (A_Index = 11) {
		keyWordCodeInTheTranspiledLangEnd := Trim(A_LoopField)
	}
	if (A_Index = 12) {
		keyWordCodeInTheTranspiledLangStartCPP := Trim(A_LoopField)
	}
	if (A_Index = 13) {
		keyWordCodeInTheTranspiledLangEndCPP := Trim(A_LoopField)
	}
	if (A_Index = 14) {
		keyWordCodeInTheTranspiledLangStartPY := Trim(A_LoopField)
	}
	if (A_Index = 15) {
		keyWordCodeInTheTranspiledLangEndPY := Trim(A_LoopField)
	}
	if (A_Index = 16) {
		keyWordCodeInTheTranspiledLangStartJS := Trim(A_LoopField)
	}
	if (A_Index = 17) {
		keyWordCodeInTheTranspiledLangEndJS := Trim(A_LoopField)
	}
	if (A_Index = 18) {
		keyWordCodeInTheTranspiledLangStartGO := Trim(A_LoopField)
	}
	if (A_Index = 19) {
		keyWordCodeInTheTranspiledLangEndGO := Trim(A_LoopField)
	}
	if (A_Index = 20) {
		keyWordCodeInTheTranspiledLangStartLUA := Trim(A_LoopField)
	}
	if (A_Index = 21) {
		keyWordCodeInTheTranspiledLangEndLUA := Trim(A_LoopField)
	}
	if (A_Index = 22) {
		keyWordCodeInTheTranspiledLangStartCS := Trim(A_LoopField)
	}
	if (A_Index = 23) {
		keyWordCodeInTheTranspiledLangEndCS := Trim(A_LoopField)
	}
	if (A_Index = 24) {
		keyWordCodeInTheTranspiledLangStartJAVA := Trim(A_LoopField)
	}
	if (A_Index = 25) {
		keyWordCodeInTheTranspiledLangEndJAVA := Trim(A_LoopField)
	}
	if (A_Index = 26) {
		keyWordCodeInTheTranspiledLangStartKT := Trim(A_LoopField)
	}
	if (A_Index = 27) {
		keyWordCodeInTheTranspiledLangEndKT := Trim(A_LoopField)
	}
	if (A_Index = 28) {
		keyWordCodeInTheTranspiledLangStartRB := Trim(A_LoopField)
	}
	if (A_Index = 29) {
		keyWordCodeInTheTranspiledLangEndRB := Trim(A_LoopField)
	}
	if (A_Index = 30) {
		keyWordCodeInTheTranspiledLangStartNIM := Trim(A_LoopField)
	}
	if (A_Index = 31) {
		keyWordCodeInTheTranspiledLangEndNIM := Trim(A_LoopField)
	}
	if (A_Index = 32) {
		keyWordCodeInTheTranspiledLangStartAHK := Trim(A_LoopField)
	}
	if (A_Index = 33) {
		keyWordCodeInTheTranspiledLangEndAHK := Trim(A_LoopField)
	}
	if (A_Index = 34) {
		keyWordCodeInTheTranspiledLangStartSWIFT := Trim(A_LoopField)
	}
	if (A_Index = 35) {
		keyWordCodeInTheTranspiledLangEndSWIFT := Trim(A_LoopField)
	}
	if (A_Index = 36) {
		keyWordCodeInTheTranspiledLangStartDART := Trim(A_LoopField)
	}
	if (A_Index = 37) {
		keyWordCodeInTheTranspiledLangEndDART := Trim(A_LoopField)
	}
	if (A_Index = 38) {
		keyWordCodeInTheTranspiledLangStartTS := Trim(A_LoopField)
	}
	if (A_Index = 39) {
		keyWordCodeInTheTranspiledLangEndTS := Trim(A_LoopField)
	}
	if (A_Index = 40) {
		keyWordCodeInTheTranspiledLangStartGROOVY := Trim(A_LoopField)
	}
	if (A_Index = 41) {
		keyWordCodeInTheTranspiledLangEndGROOVY := Trim(A_LoopField)
	}
	if (A_Index = 42) {
		keyWordCodeInTheTranspiledLangStartHTVM := Trim(A_LoopField)
	}
	if (A_Index = 43) {
		keyWordCodeInTheTranspiledLangEndHTVM := Trim(A_LoopField)
	}
	if (A_Index = 44) {
		keyWordCodeInHTVMstart := Trim(A_LoopField)
	}
	if (A_Index = 45) {
		keyWordCodeInHTVMend := Trim(A_LoopField)
	}
	if (A_Index = 46) {
		keyWordCurlyBraceOpen := Trim(A_LoopField)
	}
	if (A_Index = 47) {
		keyWordCurlyBraceClose := Trim(A_LoopField)
	}
	if (A_Index = 48) {
		keyWordNull := Trim(A_LoopField)
	}
	if (A_Index = 49) {
		keyWordTrue := Trim(A_LoopField)
	}
	if (A_Index = 50) {
		keyWordFalse := Trim(A_LoopField)
	}
	if (A_Index = 51) {
		keyWordVoid := Trim(A_LoopField)
	}
	if (A_Index = 52) {
		keyWordDouble := Trim(A_LoopField)
	}
	if (A_Index = 53) {
		keyWordChar := Trim(A_LoopField)
	}
	if (A_Index = 54) {
		keyWordUint8 := Trim(A_LoopField)
	}
	if (A_Index = 55) {
		keyWordUint16 := Trim(A_LoopField)
	}
	if (A_Index = 56) {
		keyWordUint32 := Trim(A_LoopField)
	}
	if (A_Index = 57) {
		keyWordUint64 := Trim(A_LoopField)
	}
	if (A_Index = 58) {
		keyWordINT := Trim(A_LoopField)
	}
	if (A_Index = 59) {
		keyWordSTR := Trim(A_LoopField)
	}
	if (A_Index = 60) {
		keyWordBOOL := Trim(A_LoopField)
	}
	if (A_Index = 61) {
		keyWordFLOAT := Trim(A_LoopField)
	}
	if (A_Index = 62) {
		keyWordINT8 := Trim(A_LoopField)
	}
	if (A_Index = 63) {
		keyWordINT16 := Trim(A_LoopField)
	}
	if (A_Index = 64) {
		keyWordINT32 := Trim(A_LoopField)
	}
	if (A_Index = 65) {
		keyWordINT64 := Trim(A_LoopField)
	}
	if (A_Index = 66) {
		keyWordIF := Trim(A_LoopField) . " "
	}
	if (A_Index = 67) {
		keyWordElseIf := Trim(A_LoopField) . " "
	}
	if (A_Index = 68) {
		keyWordElse := Trim(A_LoopField)
	}
	if (A_Index = 69) {
		keyWordWhileLoop := Trim(A_LoopField) . " "
	}
	if (A_Index = 70) {
		keyWordLoopInfinite := Trim(A_LoopField)
	}
	if (A_Index = 71) {
		keyWordLoop := Trim(A_LoopField) . " "
	}
	if (A_Index = 72) {
		keyWordLoopParse := Trim(A_LoopField) . " "
	}
	if (A_Index = 73) {
		keyWordContinue := Trim(A_LoopField)
	}
	if (A_Index = 74) {
		keyWordBreak := Trim(A_LoopField)
	}
	if (A_Index = 75) {
		keyWordFunc := Trim(A_LoopField) . " "
	}
	if (A_Index = 76) {
		keyWordAwait := Trim(A_LoopField) . " "
	}
	if (A_Index = 77) {
		keyWordAsync := Trim(A_LoopField) . " "
	}
	if (A_Index = 78) {
		keyWordThrow := Trim(A_LoopField) . " "
	}
	if (A_Index = 79) {
		keyWordErrorMsg := Trim(A_LoopField)
	}
	if (A_Index = 80) {
		keyWordTry := Trim(A_LoopField)
	}
	if (A_Index = 81) {
		keyWordCatch := Trim(A_LoopField) . " "
	}
	if (A_Index = 82) {
		keyWordFinally := Trim(A_LoopField)
	}
	if (A_Index = 83) {
		keyWordReturnStatement := Trim(A_LoopField) . " "
	}
	if (A_Index = 84) {
		keyWordArrayAppend := Trim(A_LoopField)
	}
	if (A_Index = 85) {
		keyWordArrayPop := Trim(A_LoopField)
	}
	if (A_Index = 86) {
		keyWordArraySize := Trim(A_LoopField)
	}
	if (A_Index = 87) {
		keyWordArrayInsert := Trim(A_LoopField)
	}
	if (A_Index = 88) {
		keyWordArrayRemove := Trim(A_LoopField)
	}
	if (A_Index = 89) {
		keyWordArrayIndexOf := Trim(A_LoopField)
	}
	if (A_Index = 90) {
		keyWordArrayDefinition := Trim(A_LoopField)
	}
	if (A_Index = 91) {
		keyWordArrayOfIntegersDefinition := Trim(A_LoopField)
	}
	if (A_Index = 92) {
		keyWordArrayOfStringsDefinition := Trim(A_LoopField)
	}
	if (A_Index = 93) {
		keyWordArrayOfFloatingPointNumbersDefinition := Trim(A_LoopField)
	}
	if (A_Index = 94) {
		keyWordArrayOfBooleansDefinition := Trim(A_LoopField)
	}
	if (A_Index = 95) {
		keyWordVar := Trim(A_LoopField) . " "
	}
	if (A_Index = 96) {
		keyWordLet := Trim(A_LoopField) . " "
	}
	if (A_Index = 97) {
		keyWordConst := Trim(A_LoopField) . " "
	}
	if (A_Index = 98) {
		keyWordEnd := Trim(A_LoopField)
	}
	if (A_Index = 99) {
		keyWordGlobal := Trim(A_LoopField) . " "
	}
	if (A_Index = 100) {
		keyWordComment := Trim(A_LoopField)
	}
	if (A_Index = 101) {
		keyWordCommentOpenMultiLine := Trim(A_LoopField)
	}
	if (A_Index = 102) {
		keyWordCommentCloseMultiLine := Trim(A_LoopField)
	}
	if (A_Index = 103) {
		keyWordEscpaeChar := Trim(A_LoopField)
	}
	if (A_Index = 104) {
		keyWordMainLabel := Trim(A_LoopField)
	}
	if (A_Index = 105) {
		keyWordConcat := Trim(A_LoopField)
	}
	if (A_Index = 106) {
		keyWordAdd := Trim(A_LoopField)
	}
	if (A_Index = 107) {
		keyWordSub := Trim(A_LoopField)
	}
	if (A_Index = 108) {
		keyWordMul := Trim(A_LoopField)
	}
	if (A_Index = 109) {
		keyWordDiv := Trim(A_LoopField)
	}
	if (A_Index = 110) {
		keyWordMod := Trim(A_LoopField)
	}
	if (A_Index = 111) {
		keyWordExp := Trim(A_LoopField)
	}
	if (A_Index = 112) {
		keyWordEqual := Trim(A_LoopField)
	}
	if (A_Index = 113) {
		keyWordStrictEqual := Trim(A_LoopField)
	}
	if (A_Index = 114) {
		keyWordNotEqual := Trim(A_LoopField)
	}
	if (A_Index = 115) {
		keyWordGreater := Trim(A_LoopField)
	}
	if (A_Index = 116) {
		keyWordLess := Trim(A_LoopField)
	}
	if (A_Index = 117) {
		keyWordGreaterEqual := Trim(A_LoopField)
	}
	if (A_Index = 118) {
		keyWordLessEqual := Trim(A_LoopField)
	}
	if (A_Index = 119) {
		keyWordAnd := Trim(A_LoopField)
	}
	if (A_Index = 120) {
		keyWordOr := Trim(A_LoopField)
	}
	if (A_Index = 121) {
		keyWordNot := Trim(A_LoopField)
	}
	if (A_Index = 122) {
		keyWordBitAnd := Trim(A_LoopField)
	}
	if (A_Index = 123) {
		keyWordBitOr := Trim(A_LoopField)
	}
	if (A_Index = 124) {
		keyWordBitXor := Trim(A_LoopField)
	}
	if (A_Index = 125) {
		keyWordBitNot := Trim(A_LoopField)
	}
	if (A_Index = 126) {
		keyWordShiftLeft := Trim(A_LoopField)
	}
	if (A_Index = 127) {
		keyWordShiftRight := Trim(A_LoopField)
	}
	if (A_Index = 128) {
		keyWordShiftUnsignedRight := Trim(A_LoopField)
	}
	if (A_Index = 129) {
		keyWordAssign := Trim(A_LoopField)
	}
	if (A_Index = 130) {
		keyWordAssignAdd := Trim(A_LoopField)
	}
	if (A_Index = 131) {
		keyWordAssignConcat := Trim(A_LoopField)
	}
	if (A_Index = 132) {
		keyWordAssignSub := Trim(A_LoopField)
	}
	if (A_Index = 133) {
		keyWordAssignMul := Trim(A_LoopField)
	}
	if (A_Index = 134) {
		keyWordAssignDiv := Trim(A_LoopField)
	}
	if (A_Index = 135) {
		keyWordAssignMod := Trim(A_LoopField)
	}
	if (A_Index = 136) {
		keyWordAssignShiftLeft := Trim(A_LoopField)
	}
	if (A_Index = 137) {
		keyWordAssignShiftRight := Trim(A_LoopField)
	}
	if (A_Index = 138) {
		keyWordLogicalAssignShiftRight := Trim(A_LoopField)
	}
	if (A_Index = 139) {
		keyWordAssignBitAnd := Trim(A_LoopField)
	}
	if (A_Index = 140) {
		keyWordAssignBitOr := Trim(A_LoopField)
	}
	if (A_Index = 141) {
		keyWordAssignBitXor := Trim(A_LoopField)
	}
	if (A_Index = 142) {
		keyWordTernary1 := Trim(A_LoopField)
	}
	if (A_Index = 143) {
		keyWordTernary2 := Trim(A_LoopField)
	}
	if (A_Index = 144) {
		keyWordInc := Trim(A_LoopField)
	}
	if (A_Index = 145) {
		keyWordDec := Trim(A_LoopField)
	}
	if (A_Index = 146) {
		AHKlikeLoopsIndexedAt := Trim(A_LoopField)
	}
	if (A_Index = 147) {
		keyWordAIndex := Trim(A_LoopField)
	}
	if (A_Index = 148) {
		keyWordALoopField := Trim(A_LoopField)
	}
	if (A_Index = 149) {
		useCurlyBraces := Trim(A_LoopField)
	}
	if (A_Index = 150) {
		useEnd := Trim(A_LoopField)
	}
	if (A_Index = 151) {
		useSemicolon := Trim(A_LoopField)
	}
	if (A_Index = 152) {
		useParentheses := Trim(A_LoopField)
	}
	if (A_Index = 153) {
		usePrefixTypeForTypeDefinition := Trim(A_LoopField)
	}
	if (A_Index = 154) {
		usePostfixTypeForTypeDefinition := Trim(A_LoopField)
	}
	if (A_Index = 155) {
		usePythonicColonSyntax := Trim(A_LoopField)
	}
	if (A_Index = 156) {
		useCurlyBracesSyntaxForArrayDef := Trim(A_LoopField)
	}
	if (A_Index = 157) {
		useInJavaScriptAlwaysUseVar := Trim(A_LoopField)
	}
	if (A_Index = 158) {
		useJavaScriptInAfullHTMLfile := Trim(A_LoopField)
	}
	if (A_Index = 159) {
		useJavaScriptAmainFuncDef := Trim(A_LoopField)
	}
	if (A_Index = 160) {
		useJavaScriptAllFuncsAreAsync := Trim(A_LoopField)
	}
	if (A_Index = 161) {
		useJavaScriptAlwaysTripleEqual := Trim(A_LoopField)
	}
}

if (argHTVMinstrMORE.size() > 0)
{
str allInstructionFile_2 := ""
if (HTVM_getLang_HTVM() = "js")
{
allInstructionFile_2 := Trim(argHTVMinstrMORE[0])
}
else
{
allInstructionFile_2 := Trim(FileRead(Trim(argHTVMinstrMORE[0])))
}

Loop, Parse, allInstructionFile_2, `n, `r
{
    if (A_Index = 0) {
		langToConvertTo_2 := Trim(A_LoopField)
	}
	if (A_Index = 1) {
		langFileExtension_2 := Trim(A_LoopField)
	}
	if (A_Index = 2) {
		commands_2 := Trim(A_LoopField)
	}
	if (A_Index = 3) {
		keyWordAlliance_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 4) {
		keyWordCrew_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 5) {
		keyWordMethod_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 6) {
		keyWordDefObj_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 7) {
		keyWordProp_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 8) {
		keyWordThis_2 := Trim(A_LoopField)
	}
	if (A_Index = 9) {
		keyWordInclude_2 := Trim(A_LoopField)
	}
	if (A_Index = 10) {
		keyWordCodeInTheTranspiledLangStart_2 := Trim(A_LoopField)
	}
	if (A_Index = 11) {
		keyWordCodeInTheTranspiledLangEnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 12) {
		keyWordCodeInTheTranspiledLangStartCPP_2 := Trim(A_LoopField)
	}
	if (A_Index = 13) {
		keyWordCodeInTheTranspiledLangEndCPP_2 := Trim(A_LoopField)
	}
	if (A_Index = 14) {
		keyWordCodeInTheTranspiledLangStartPY_2 := Trim(A_LoopField)
	}
	if (A_Index = 15) {
		keyWordCodeInTheTranspiledLangEndPY_2 := Trim(A_LoopField)
	}
	if (A_Index = 16) {
		keyWordCodeInTheTranspiledLangStartJS_2 := Trim(A_LoopField)
	}
	if (A_Index = 17) {
		keyWordCodeInTheTranspiledLangEndJS_2 := Trim(A_LoopField)
	}
	if (A_Index = 18) {
		keyWordCodeInTheTranspiledLangStartGO_2 := Trim(A_LoopField)
	}
	if (A_Index = 19) {
		keyWordCodeInTheTranspiledLangEndGO_2 := Trim(A_LoopField)
	}
	if (A_Index = 20) {
		keyWordCodeInTheTranspiledLangStartLUA_2 := Trim(A_LoopField)
	}
	if (A_Index = 21) {
		keyWordCodeInTheTranspiledLangEndLUA_2 := Trim(A_LoopField)
	}
	if (A_Index = 22) {
		keyWordCodeInTheTranspiledLangStartCS_2 := Trim(A_LoopField)
	}
	if (A_Index = 23) {
		keyWordCodeInTheTranspiledLangEndCS_2 := Trim(A_LoopField)
	}
	if (A_Index = 24) {
		keyWordCodeInTheTranspiledLangStartJAVA_2 := Trim(A_LoopField)
	}
	if (A_Index = 25) {
		keyWordCodeInTheTranspiledLangEndJAVA_2 := Trim(A_LoopField)
	}
	if (A_Index = 26) {
		keyWordCodeInTheTranspiledLangStartKT_2 := Trim(A_LoopField)
	}
	if (A_Index = 27) {
		keyWordCodeInTheTranspiledLangEndKT_2 := Trim(A_LoopField)
	}
	if (A_Index = 28) {
		keyWordCodeInTheTranspiledLangStartRB_2 := Trim(A_LoopField)
	}
	if (A_Index = 29) {
		keyWordCodeInTheTranspiledLangEndRB_2 := Trim(A_LoopField)
	}
	if (A_Index = 30) {
		keyWordCodeInTheTranspiledLangStartNIM_2 := Trim(A_LoopField)
	}
	if (A_Index = 31) {
		keyWordCodeInTheTranspiledLangEndNIM_2 := Trim(A_LoopField)
	}
	if (A_Index = 32) {
		keyWordCodeInTheTranspiledLangStartAHK_2 := Trim(A_LoopField)
	}
	if (A_Index = 33) {
		keyWordCodeInTheTranspiledLangEndAHK_2 := Trim(A_LoopField)
	}
	if (A_Index = 34) {
		keyWordCodeInTheTranspiledLangStartSWIFT_2 := Trim(A_LoopField)
	}
	if (A_Index = 35) {
		keyWordCodeInTheTranspiledLangEndSWIFT_2 := Trim(A_LoopField)
	}
	if (A_Index = 36) {
		keyWordCodeInTheTranspiledLangStartDART_2 := Trim(A_LoopField)
	}
	if (A_Index = 37) {
		keyWordCodeInTheTranspiledLangEndDART_2 := Trim(A_LoopField)
	}
	if (A_Index = 38) {
		keyWordCodeInTheTranspiledLangStartTS_2 := Trim(A_LoopField)
	}
	if (A_Index = 39) {
		keyWordCodeInTheTranspiledLangEndTS_2 := Trim(A_LoopField)
	}
	if (A_Index = 40) {
		keyWordCodeInTheTranspiledLangStartGROOVY_2 := Trim(A_LoopField)
	}
	if (A_Index = 41) {
		keyWordCodeInTheTranspiledLangEndGROOVY_2 := Trim(A_LoopField)
	}
	if (A_Index = 42) {
		keyWordCodeInTheTranspiledLangStartHTVM_2 := Trim(A_LoopField)
	}
	if (A_Index = 43) {
		keyWordCodeInTheTranspiledLangEndHTVM_2 := Trim(A_LoopField)
	}
	if (A_Index = 44) {
		keyWordCodeInHTVMstart_2 := Trim(A_LoopField)
	}
	if (A_Index = 45) {
		keyWordCodeInHTVMend_2 := Trim(A_LoopField)
	}
	if (A_Index = 46) {
		keyWordCurlyBraceOpen_2 := Trim(A_LoopField)
	}
	if (A_Index = 47) {
		keyWordCurlyBraceClose_2 := Trim(A_LoopField)
	}
	if (A_Index = 48) {
		keyWordNull_2 := Trim(A_LoopField)
	}
	if (A_Index = 49) {
		keyWordTrue_2 := Trim(A_LoopField)
	}
	if (A_Index = 50) {
		keyWordFalse_2 := Trim(A_LoopField)
	}
	if (A_Index = 51) {
		keyWordVoid_2 := Trim(A_LoopField)
	}
	if (A_Index = 52) {
		keyWordDouble_2 := Trim(A_LoopField)
	}
	if (A_Index = 53) {
		keyWordChar_2 := Trim(A_LoopField)
	}
	if (A_Index = 54) {
		keyWordUint8_2 := Trim(A_LoopField)
	}
	if (A_Index = 55) {
		keyWordUint16_2 := Trim(A_LoopField)
	}
	if (A_Index = 56) {
		keyWordUint32_2 := Trim(A_LoopField)
	}
	if (A_Index = 57) {
		keyWordUint64_2 := Trim(A_LoopField)
	}
	if (A_Index = 58) {
		keyWordINT_2 := Trim(A_LoopField)
	}
	if (A_Index = 59) {
		keyWordSTR_2 := Trim(A_LoopField)
	}
	if (A_Index = 60) {
		keyWordBOOL_2 := Trim(A_LoopField)
	}
	if (A_Index = 61) {
		keyWordFLOAT_2 := Trim(A_LoopField)
	}
	if (A_Index = 62) {
		keyWordINT8_2 := Trim(A_LoopField)
	}
	if (A_Index = 63) {
		keyWordINT16_2 := Trim(A_LoopField)
	}
	if (A_Index = 64) {
		keyWordINT32_2 := Trim(A_LoopField)
	}
	if (A_Index = 65) {
		keyWordINT64_2 := Trim(A_LoopField)
	}
	if (A_Index = 66) {
		keyWordIF_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 67) {
		keyWordElseIf_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 68) {
		keyWordElse_2 := Trim(A_LoopField)
	}
	if (A_Index = 69) {
		keyWordWhileLoop_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 70) {
		keyWordLoopInfinite_2 := Trim(A_LoopField)
	}
	if (A_Index = 71) {
		keyWordLoop_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 72) {
		keyWordLoopParse_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 73) {
		keyWordContinue_2 := Trim(A_LoopField)
	}
	if (A_Index = 74) {
		keyWordBreak_2 := Trim(A_LoopField)
	}
	if (A_Index = 75) {
		keyWordFunc_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 76) {
		keyWordAwait_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 77) {
		keyWordAsync_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 78) {
		keyWordThrow_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 79) {
		keyWordErrorMsg_2 := Trim(A_LoopField)
	}
	if (A_Index = 80) {
		keyWordTry_2 := Trim(A_LoopField)
	}
	if (A_Index = 81) {
		keyWordCatch_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 82) {
		keyWordFinally_2 := Trim(A_LoopField)
	}
	if (A_Index = 83) {
		keyWordReturnStatement_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 84) {
		keyWordArrayAppend_2 := Trim(A_LoopField)
	}
	if (A_Index = 85) {
		keyWordArrayPop_2 := Trim(A_LoopField)
	}
	if (A_Index = 86) {
		keyWordArraySize_2 := Trim(A_LoopField)
	}
	if (A_Index = 87) {
		keyWordArrayInsert_2 := Trim(A_LoopField)
	}
	if (A_Index = 88) {
		keyWordArrayRemove_2 := Trim(A_LoopField)
	}
	if (A_Index = 89) {
		keyWordArrayIndexOf_2 := Trim(A_LoopField)
	}
	if (A_Index = 90) {
		keyWordArrayDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 91) {
		keyWordArrayOfIntegersDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 92) {
		keyWordArrayOfStringsDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 93) {
		keyWordArrayOfFloatingPointNumbersDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 94) {
		keyWordArrayOfBooleansDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 95) {
		keyWordVar_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 96) {
		keyWordLet_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 97) {
		keyWordConst_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 98) {
		keyWordEnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 99) {
		keyWordGlobal_2 := Trim(A_LoopField) . " "
	}
	if (A_Index = 100) {
		keyWordComment_2 := Trim(A_LoopField)
	}
	if (A_Index = 101) {
		keyWordCommentOpenMultiLine_2 := Trim(A_LoopField)
	}
	if (A_Index = 102) {
		keyWordCommentCloseMultiLine_2 := Trim(A_LoopField)
	}
	if (A_Index = 103) {
		keyWordEscpaeChar_2 := Trim(A_LoopField)
	}
	if (A_Index = 104) {
		keyWordMainLabel_2 := Trim(A_LoopField)
	}
	if (A_Index = 105) {
		keyWordConcat_2 := Trim(A_LoopField)
	}
	if (A_Index = 106) {
		keyWordAdd_2 := Trim(A_LoopField)
	}
	if (A_Index = 107) {
		keyWordSub_2 := Trim(A_LoopField)
	}
	if (A_Index = 108) {
		keyWordMul_2 := Trim(A_LoopField)
	}
	if (A_Index = 109) {
		keyWordDiv_2 := Trim(A_LoopField)
	}
	if (A_Index = 110) {
		keyWordMod_2 := Trim(A_LoopField)
	}
	if (A_Index = 111) {
		keyWordExp_2 := Trim(A_LoopField)
	}
	if (A_Index = 112) {
		keyWordEqual_2 := Trim(A_LoopField)
	}
	if (A_Index = 113) {
		keyWordStrictEqual_2 := Trim(A_LoopField)
	}
	if (A_Index = 114) {
		keyWordNotEqual_2 := Trim(A_LoopField)
	}
	if (A_Index = 115) {
		keyWordGreater_2 := Trim(A_LoopField)
	}
	if (A_Index = 116) {
		keyWordLess_2 := Trim(A_LoopField)
	}
	if (A_Index = 117) {
		keyWordGreaterEqual_2 := Trim(A_LoopField)
	}
	if (A_Index = 118) {
		keyWordLessEqual_2 := Trim(A_LoopField)
	}
	if (A_Index = 119) {
		keyWordAnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 120) {
		keyWordOr_2 := Trim(A_LoopField)
	}
	if (A_Index = 121) {
		keyWordNot_2 := Trim(A_LoopField)
	}
	if (A_Index = 122) {
		keyWordBitAnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 123) {
		keyWordBitOr_2 := Trim(A_LoopField)
	}
	if (A_Index = 124) {
		keyWordBitXor_2 := Trim(A_LoopField)
	}
	if (A_Index = 125) {
		keyWordBitNot_2 := Trim(A_LoopField)
	}
	if (A_Index = 126) {
		keyWordShiftLeft_2 := Trim(A_LoopField)
	}
	if (A_Index = 127) {
		keyWordShiftRight_2 := Trim(A_LoopField)
	}
	if (A_Index = 128) {
		keyWordShiftUnsignedRight_2 := Trim(A_LoopField)
	}
	if (A_Index = 129) {
		keyWordAssign_2 := Trim(A_LoopField)
	}
	if (A_Index = 130) {
		keyWordAssignAdd_2 := Trim(A_LoopField)
	}
	if (A_Index = 131) {
		keyWordAssignConcat_2 := Trim(A_LoopField)
	}
	if (A_Index = 132) {
		keyWordAssignSub_2 := Trim(A_LoopField)
	}
	if (A_Index = 133) {
		keyWordAssignMul_2 := Trim(A_LoopField)
	}
	if (A_Index = 134) {
		keyWordAssignDiv_2 := Trim(A_LoopField)
	}
	if (A_Index = 135) {
		keyWordAssignMod_2 := Trim(A_LoopField)
	}
	if (A_Index = 136) {
		keyWordAssignShiftLeft_2 := Trim(A_LoopField)
	}
	if (A_Index = 137) {
		keyWordAssignShiftRight_2 := Trim(A_LoopField)
	}
	if (A_Index = 138) {
		keyWordLogicalAssignShiftRight_2 := Trim(A_LoopField)
	}
	if (A_Index = 139) {
		keyWordAssignBitAnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 140) {
		keyWordAssignBitOr_2 := Trim(A_LoopField)
	}
	if (A_Index = 141) {
		keyWordAssignBitXor_2 := Trim(A_LoopField)
	}
	if (A_Index = 142) {
		keyWordTernary1_2 := Trim(A_LoopField)
	}
	if (A_Index = 143) {
		keyWordTernary2_2 := Trim(A_LoopField)
	}
	if (A_Index = 144) {
		keyWordInc_2 := Trim(A_LoopField)
	}
	if (A_Index = 145) {
		keyWordDec_2 := Trim(A_LoopField)
	}
	if (A_Index = 146) {
		AHKlikeLoopsIndexedAt_2 := Trim(A_LoopField)
	}
	if (A_Index = 147) {
		keyWordAIndex_2 := Trim(A_LoopField)
	}
	if (A_Index = 148) {
		keyWordALoopField_2 := Trim(A_LoopField)
	}
	if (A_Index = 149) {
		useCurlyBraces_2 := Trim(A_LoopField)
	}
	if (A_Index = 150) {
		useEnd_2 := Trim(A_LoopField)
	}
	if (A_Index = 151) {
		useSemicolon_2 := Trim(A_LoopField)
	}
	if (A_Index = 152) {
		useParentheses_2 := Trim(A_LoopField)
	}
	if (A_Index = 153) {
		usePrefixTypeForTypeDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 154) {
		usePostfixTypeForTypeDefinition_2 := Trim(A_LoopField)
	}
	if (A_Index = 155) {
		usePythonicColonSyntax_2 := Trim(A_LoopField)
	}
	if (A_Index = 156) {
		useCurlyBracesSyntaxForArrayDef_2 := Trim(A_LoopField)
	}
	if (A_Index = 157) {
		useInJavaScriptAlwaysUseVar_2 := Trim(A_LoopField)
	}
	if (A_Index = 158) {
		useJavaScriptInAfullHTMLfile_2 := Trim(A_LoopField)
	}
	if (A_Index = 159) {
		useJavaScriptAmainFuncDef_2 := Trim(A_LoopField)
	}
	if (A_Index = 160) {
		useJavaScriptAllFuncsAreAsync_2 := Trim(A_LoopField)
	}
	if (A_Index = 161) {
		useJavaScriptAlwaysTripleEqual_2 := Trim(A_LoopField)
	}

}

}



if (Trim(langToConvertToParam) != "") {
    langToConvertTo := Trim(langToConvertToParam)
}


int isFullHTVMCode := 0
int isNotHTVMfile := 0

if (Trim(mode) = "full") {
    isFullHTVMCode := 1
} else {
    isFullHTVMCode := 0
}
if (Trim(mode) = "notHTVM") {
    isNotHTVMfile := 1
} else {
    isNotHTVMfile := 0
}

if (useEnd = "on")
{
keyWordCurlyBraceOpen := "{"
keyWordCurlyBraceClose := "}"
}

if (useEnd_2 = "on")
{
keyWordCurlyBraceOpen_2 := "{"
keyWordCurlyBraceClose_2 := "}"
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
'''1

if (langToConvertTo = langFileExtension_2) {

}
if (langToConvertTo = "cpp") {

}
if (langToConvertTo = "py") {

}
if (langToConvertTo = "js") {

}
if (langToConvertTo = "go") {

}
if (langToConvertTo = "lua") {

}
if (langToConvertTo = "cs") {

}
if (langToConvertTo = "java") {

}
if (langToConvertTo = "kt") {

}
if (langToConvertTo = "rb") {

}
if (langToConvertTo = "nim") {

}
if (langToConvertTo = "ahk") {

}
if (langToConvertTo = "swift") {

}
if (langToConvertTo = "dart") {

}
if (langToConvertTo = "ts") {

}
if (langToConvertTo = "groovy") {

}
'''2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
str HTVMout := ""

htCode := Trim(StrReplace(htCode, Chr(13), ""))

str code := ""

;print(htCode)
code := htCode
;print(mode)
;print(langToConvertTo)
;print("==================================")
;print("==================================")
;print("==================================")
;print("==================================")
;print("==================================")
;print(allInstructionFile)

if (langToConvertTo = "rb")
{
keyWordAIndexOriginal := keyWordAIndex
keyWordALoopFieldOriginal := keyWordALoopField


keyWordAIndex := StrLower(keyWordAIndex)
keyWordALoopField := StrLower(keyWordALoopField)
}



int haveWeEverUsedAloop := 0
int lineDone := 0
str var1 := ""
str nothing := ""
int AindexcharLength := 1
str AindexcharLengthStr := ""
str theFixTextLoopNL := ""
int htCodeAcurlyBraceAddSomeVrasFixNL := 0
str htCodeLoopfixa := ""
str htCodeLoopfixa1 := ""
str str123 := ""
str out2 := ""
str myVar := ""
str lineYGI := ""
str line := ""
str line1 := ""
str line2 := ""
str line3 := ""
str itemsOut := ""
str var1out := ""
str theFixTextLoopLP := ""
int htCodeAcurlyBraceAddSomeVrasFixLP := 0
int AIndexLoopCurlyFix := 0
str sstr123 := ""
str fixLoopLokingFor := ""
int fixLoopLokingForfound := 0
str out1 := ""
int wasAtanyIfsElseAddAIndexLoopCurlyFix := 0
int inTarget := 0
int insideBracket := 0
int netsedCurly := 0
int eldLoopNestedBADlol := 0
int readyToEnd := 0
int endBracketDOntPutThere := 0
int dontSaveStr := 0
int weAreDoneHereCurly := 0
int DeleayOneCuzOfLoopParse := 0
int fixLoopLokingForNum := 0
int insdeAnestedLoopBAD := 0
int foundTheTopLoop := 0
str out4758686d86d86d86578991a
str ALoopField := ""
str out1z := ""
int insideBracket1 := 0
int netsedCurly1 := 0
int readyToEnd1 := 0
str strstysrstsytTRIMHELP := ""
str out4758686d86dgt8r754444444 := ""
int hold := 0
str holdText := ""
int ignore := 0
str htCodeOut1234565432 := ""
str out := ""
str s := ""
int skipLeftCuleyForFuncPLS := 0

str strOspHold := ""


; PROGRAMMING BLOCK
; PROGRAMMING BLOCK
; PROGRAMMING BLOCK
; PROGRAMMING BLOCK



int COUNT_programmingBlock_InTheTranspiledLang := 0
int COUNT_programmingBlock_CPP := 0
int COUNT_programmingBlock_PY := 0
int COUNT_programmingBlock_JS := 0
int COUNT_programmingBlock_GO := 0
int COUNT_programmingBlock_LUA := 0
int COUNT_programmingBlock_CS := 0
int COUNT_programmingBlock_JAVA := 0
int COUNT_programmingBlock_KT := 0
int COUNT_programmingBlock_RB := 0
int COUNT_programmingBlock_NIM := 0
int COUNT_programmingBlock_AHK := 0
int COUNT_programmingBlock_SWIFT := 0
int COUNT_programmingBlock_DART := 0
int COUNT_programmingBlock_TS := 0
int COUNT_programmingBlock_GROOVY := 0
int COUNT_programmingBlock_HTVM := 0
int COUNT_programmingBlock_HTVMsyntax := 0

str programmingBlocksTemp := ""
int inProgarmmingBlock := 0
str holdTempDataProgrammingBlockThenPutInArr := ""

Loop, Parse, code, `n, `r
{

if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEnd))
{

COUNT_programmingBlock_InTheTranspiledLang++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_InTheTranspiledLang-programmingBlock_InTheTranspiledLang-AA" . STR(COUNT_programmingBlock_InTheTranspiledLang) . "AA`n"
programmingBlock_InTheTranspiledLang.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndCPP))
{

COUNT_programmingBlock_CPP++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(COUNT_programmingBlock_CPP) . "AA`n"
programmingBlock_CPP.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndPY))
{

COUNT_programmingBlock_PY++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_PY-programmingBlock_PY-AA" . STR(COUNT_programmingBlock_PY) . "AA`n"
programmingBlock_PY.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndJS))
{

COUNT_programmingBlock_JS++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_JS-programmingBlock_JS-AA" . STR(COUNT_programmingBlock_JS) . "AA`n"
programmingBlock_JS.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndGO))
{

COUNT_programmingBlock_GO++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_GO-programmingBlock_GO-AA" . STR(COUNT_programmingBlock_GO) . "AA`n"
programmingBlock_GO.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndLUA))
{

COUNT_programmingBlock_LUA++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(COUNT_programmingBlock_LUA) . "AA`n"
programmingBlock_LUA.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndCS))
{

COUNT_programmingBlock_CS++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_CS-programmingBlock_CS-AA" . STR(COUNT_programmingBlock_CS) . "AA`n"
programmingBlock_CS.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndJAVA))
{

COUNT_programmingBlock_JAVA++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(COUNT_programmingBlock_JAVA) . "AA`n"
programmingBlock_JAVA.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndKT))
{

COUNT_programmingBlock_KT++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_KT-programmingBlock_KT-AA" . STR(COUNT_programmingBlock_KT) . "AA`n"
programmingBlock_KT.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndRB))
{

COUNT_programmingBlock_RB++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_RB-programmingBlock_RB-AA" . STR(COUNT_programmingBlock_RB) . "AA`n"
programmingBlock_RB.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndNIM))
{

COUNT_programmingBlock_NIM++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_NIM-programmingBlock_NIM-AA" . STR(COUNT_programmingBlock_NIM) . "AA`n"
programmingBlock_NIM.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndAHK))
{

COUNT_programmingBlock_AHK++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_AHK-programmingBlock_AHK-AA" . STR(COUNT_programmingBlock_AHK) . "AA`n"
programmingBlock_AHK.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndSWIFT))
{

COUNT_programmingBlock_SWIFT++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_SWIFT-programmingBlock_SWIFT-AA" . STR(COUNT_programmingBlock_SWIFT) . "AA`n"
programmingBlock_SWIFT.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndDART))
{

COUNT_programmingBlock_DART++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_DART-programmingBlock_DART-AA" . STR(COUNT_programmingBlock_DART) . "AA`n"
programmingBlock_DART.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndTS))
{

COUNT_programmingBlock_TS++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_TS-programmingBlock_TS-AA" . STR(COUNT_programmingBlock_TS) . "AA`n"
programmingBlock_TS.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndGROOVY))
{

COUNT_programmingBlock_GROOVY++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(COUNT_programmingBlock_GROOVY) . "AA`n"
programmingBlock_GROOVY.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangEndHTVM))
{

COUNT_programmingBlock_HTVM++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_HTVM-programmingBlock_HTVM-AA" . STR(COUNT_programmingBlock_HTVM) . "AA`n"
programmingBlock_HTVM.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInHTVMend))
{
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

COUNT_programmingBlock_HTVMsyntax++
StringTrimRight, holdTempDataProgrammingBlockThenPutInArr, holdTempDataProgrammingBlockThenPutInArr, 1
programmingBlocksTemp .= "programmingBlock_HTVMsyntax-programmingBlock_HTVMsyntax-AA" . STR(COUNT_programmingBlock_HTVMsyntax) . "AA`n"
programmingBlock_HTVMsyntax.add(holdTempDataProgrammingBlockThenPutInArr)
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
}
else if (inProgarmmingBlock = 1)
{
holdTempDataProgrammingBlockThenPutInArr .= A_LoopField . Chr(10)
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStart))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartCPP))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartPY))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartJS))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartGO))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartLUA))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartCS))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartJAVA))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartKT))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartRB))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartNIM))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartAHK))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartSWIFT))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartDART))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartTS))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartGROOVY))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInTheTranspiledLangStartHTVM))
{
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
}
else if (Trim(StrLower(A_LoopField)) = StrLower(keyWordCodeInHTVMstart))
{
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
holdTempDataProgrammingBlockThenPutInArr := ""
inProgarmmingBlock := 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
}
else
{
programmingBlocksTemp .= A_LoopField . Chr(10)
}

}
StringTrimRight, code, programmingBlocksTemp, 1

;programmingBlock_InTheTranspiledLang
;programmingBlock_CPP
;programmingBlock_PY
;programmingBlock_JS
;programmingBlock_GO
;programmingBlock_LUA
;programmingBlock_CS
;programmingBlock_JAVA
;programmingBlock_KT
;programmingBlock_RB
;programmingBlock_NIM
;programmingBlock_AHK
;programmingBlock_SWIFT
;programmingBlock_DART
;programmingBlock_TS
;programmingBlock_GROOVY
;programmingBlock_HTVM
;programmingBlock_HTVMsyntax

; PROGRAMMING BLOCK
; PROGRAMMING BLOCK
; PROGRAMMING BLOCK
; PROGRAMMING BLOCK



; keyWordInclude
; keyWordInclude
; keyWordInclude

str allLibCODE := ""
str allLibCODEfix := ""
arr str allLibsWeSee
arr str allLibsWeSeeSEE
str allLibsWeSeeHOLD := ""
int doseCodeHaveLibs := 0
int doseCodeHaveLibs_HAS_SEEN := 0
int doseCodeHaveLibs_HAS_SEEN2 := 0
if (isNotHTVMfile = 0) 
{
if (langToConvertTo != langFileExtension_2)
{


if (InStr(StrLower(code), StrLower(keyWordInclude . " ")))
{

Loop, 10000 {
doseCodeHaveLibs := 0
allLibCODE := ""
if (A_Index = 0) 
{
Loop, Parse, code, `n, `r 
{
if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordInclude . " "))) = StrLower(keyWordInclude . " "))
{
allLibsWeSee.add(StrReplace(StringTrimLeft(Trim(A_LoopField), StrLen(StrLower(keyWordInclude) . " ")), Chr(34), ""))
allLibsWeSeeSEE.add(StrReplace(StringTrimLeft(Trim(A_LoopField), StrLen(StrLower(keyWordInclude) . " ")), Chr(34), ""))
doseCodeHaveLibs := 1
}
}
}
else 
{
Loop, Parse, code, `n, `r 
{
ALoopField := A_LoopField
if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordInclude . " "))) = StrLower(keyWordInclude . " ")) 
{
doseCodeHaveLibs_HAS_SEEN := 0
Loop, % allLibsWeSee.size() 
{
if (StrReplace(StringTrimLeft(Trim(ALoopField), StrLen(StrLower(keyWordInclude) . " ")), Chr(34), "") = allLibsWeSee[A_Index]) 
{
doseCodeHaveLibs_HAS_SEEN := 1
}
}
if (doseCodeHaveLibs_HAS_SEEN = 0) 
{
allLibsWeSee.add(StrReplace(StringTrimLeft(Trim(A_LoopField), StrLen(StrLower(keyWordInclude) . " ")), Chr(34), ""))
allLibsWeSeeSEE.add(StrReplace(StringTrimLeft(Trim(A_LoopField), StrLen(StrLower(keyWordInclude) . " ")), Chr(34), ""))
doseCodeHaveLibs := 1
}
}
}
}




Loop, % allLibsWeSee.size()
{
allLibsWeSeeHOLD := allLibsWeSee[A_Index]
doseCodeHaveLibs_HAS_SEEN2 := 0
Loop, % allLibsWeSeeSEE.size() - allLibsWeSee.size()
{
if (allLibsWeSeeHOLD = allLibsWeSeeSEE[A_Index])
{
doseCodeHaveLibs_HAS_SEEN2 := 1
}
}
if (doseCodeHaveLibs_HAS_SEEN2 = 0)
{
allLibCODE += FileRead(Trim(allLibsWeSee[allLibsWeSee.size() - A_Index - 1])) . Chr(10)
}

allLibsWeSee.pop()
}

allLibCODEfix := ""

Loop, Parse, code, `n, `r
{
if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordInclude . " "))) != StrLower(keyWordInclude . " ")) 
{
allLibCODEfix .= A_LoopField . Chr(10)
}
}
StringTrimRight, code, allLibCODEfix, 1

code := allLibCODE . code

if (doseCodeHaveLibs = 0) 
{
break
}


}


}
}
ALoopField := ""
}

; keyWordInclude
; keyWordInclude
; keyWordInclude



arr str lookIntoTheNextLineForFuncWhitNoKeyWord
int didWeUseMainLabel := 0
str codeOutFixAndAddMainFunc := ""
str htCodeOutFixEnd := ""
int htCodeOutFixINT := 0
int htCodeOutFixINT2 := 0

str beforeKeywordForRemoveCommentsOnTheEndOfTheLine := ""
str newStringOutCode := ""
int posForRemoveCommentsOnTheEndOfTheLine := 0
str originalStringForRemoveCommentsOnTheEndOfTheLine := ""
str OutFixDoubleQuotesInsideDoubleQuotes := ""

int fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 0
str htCodeOUT754754 := ""
int areWEinSome34sNum := 0
int theIdNumOfThe34 := 0


arr str slidingWinFixCommentsRm
str slidingWinFixCommentsRmHold := ""
int slidingWinFixCommentsRmI := 0

arr str theIdNumOfThe34theVar

str ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes := ""
arr str getAllCharForTheFurtureSoIcanAddEscapeChar

int removeNexFixkeyWordEscpaeChar := 0

if (isNotHTVMfile = 0)
{

;print("============programmingBlock_CPP==================")
;print("============programmingBlock_CPP==================")

;print("============programmingBlock_CPP==================")
;print("============programmingBlock_CPP==================")



Loop, Parse, code
{
theIdNumOfThe34theVar.add("")
theIdNumOfThe34theVar.add("")
}

Loop, Parse, code
{
theIdNumOfThe34theVar[A_Index] := theIdNumOfThe34theVar[A_Index] . Chr(34)
getAllCharForTheFurtureSoIcanAddEscapeChar.add(A_LoopField)
}

getAllCharForTheFurtureSoIcanAddEscapeChar.add(" ")

ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes := Chr(34) . "ihuiuuhuuhtheidFor" . str21 . "--" . str21 . "asds" . str21 . "as--" . str21 . "theuhtuwaesphoutr" . Chr(34)


Loop, Parse, code
{

if (A_LoopField = keyWordEscpaeChar) and (getAllCharForTheFurtureSoIcanAddEscapeChar[A_Index + 1] = Chr(34))
{
fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 1
OutFixDoubleQuotesInsideDoubleQuotes .= ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes
}
else
{
if (fixOutFixDoubleQuotesInsideDoubleQuotesFIXok != 1)
{
OutFixDoubleQuotesInsideDoubleQuotes .= A_LoopField
}
else
{
fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 0
}
}

}


code := OutFixDoubleQuotesInsideDoubleQuotes

if (keyWordEscpaeChar != Chr(92)) and (langToConvertTo != langFileExtension_2)
{
code := StrReplace(code, Chr(92), Chr(92) . Chr(92))
}




if (keyWordEscpaeChar = Chr(92)) and (langToConvertTo != langFileExtension_2)
{
Loop, Parse, code
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1) 
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = keyWordEscpaeChar) and (langToConvertTo != langFileExtension_2)
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . Chr(92)
}
else
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . A_LoopField
}
}
else
{
theIdNumOfThe34++
htCodeOUT754754 .= "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(theIdNumOfThe34) . Chr(65) . Chr(65)
}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
htCodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}

}
else
{

Loop, Parse, code
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1)
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = keyWordEscpaeChar) and (keyWordEscpaeChar = getAllCharForTheFurtureSoIcanAddEscapeChar[A_Index + 1]) and (langToConvertTo != langFileExtension_2)
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . keyWordEscpaeChar
removeNexFixkeyWordEscpaeChar := 1
}
else if (A_LoopField = keyWordEscpaeChar) and (langToConvertTo != langFileExtension_2)
{
if (removeNexFixkeyWordEscpaeChar != 1)
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . Chr(92)
}
else
{
removeNexFixkeyWordEscpaeChar := 0
}
}
else
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . A_LoopField
}

}
else
{
theIdNumOfThe34++
htCodeOUT754754 .= "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(theIdNumOfThe34) . Chr(65) . Chr(65)

}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
htCodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}
}






code := htCodeOUT754754

Loop, % theIdNumOfThe34
{
theIdNumOfThe34theVar[A_Index] := theIdNumOfThe34theVar[A_Index] . Chr(34)
}

theIdNumOfThe34theVar.add(Chr(34))



code := StrReplace(code, Chr(13), "")

slidingWinFixCommentsRmI := 0
newStringOutCode := ""
Loop, Parse, code, `n, `r
{
if (InStr(A_LoopField, " " . keyWordComment) != false)
{


posForRemoveCommentsOnTheEndOfTheLine := 0
slidingWinFixCommentsRmI := 0

slidingWinFixCommentsRm := slidingWinFixCommentsRmFUNC(A_LoopField)

Loop, % slidingWinFixCommentsRm.size()
{
slidingWinFixCommentsRmI := A_Index
slidingWinFixCommentsRmHold := ""
Loop, % StrLen(" " . keyWordComment)
{
slidingWinFixCommentsRmHold .= slidingWinFixCommentsRm[slidingWinFixCommentsRmI + A_Index]
}

if (Trim(slidingWinFixCommentsRmHold) = keyWordComment)
{
posForRemoveCommentsOnTheEndOfTheLine := A_Index
break
}

}

    if (posForRemoveCommentsOnTheEndOfTheLine > 0)
    {
        ; Keep only the part before the comment
        newStringOutCode .= SubStr(A_LoopField, 1, posForRemoveCommentsOnTheEndOfTheLine) . Chr(10)
    }
    else
    {
        ; Keep the whole line as it is
        newStringOutCode .= A_LoopField . Chr(10)
    }
    
}
else
{
newStringOutCode .= A_LoopField . Chr(10)
}
    
}

; Trim the last character (line break) from the final string
StringTrimRight, code, newStringOutCode, 1




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


if (langToConvertTo = langFileExtension_2)
{

if (useSemicolon_2 = "on") {
    theSemicolon := ";"
} else {
    theSemicolon := ""
}



if (usePythonicColonSyntax_2 = "off") {
    theColon := ""
} else {
    theColon := ":"
}


}
else
{

if (langToConvertTo != "py") and (langToConvertTo != "nim") and (langToConvertTo != "ahk") and (langToConvertTo != "go") and (langToConvertTo != "lua") and (langToConvertTo != "kt") and (langToConvertTo != "rb") and (langToConvertTo != "swift") and (langToConvertTo != "groovy") and (useSemicolon = "off") {
    theSemicolon := ";"
} else {
    theSemicolon := ""
}



if (langToConvertTo != "py") and (langToConvertTo != "nim") and (usePythonicColonSyntax = "off") {
    theColon := ""
} else {
    theColon := ":"
}


}




if (useCurlyBraces = "on")
{
if (keyWordCurlyBraceOpen != "{")
{

Loop, Parse, code, `n, `r
{
htCodeOutFixINT2 := 0
if (isLineAconstruct(Trim(A_LoopField)) = true) or (Trim(A_LoopField) = keyWordCurlyBraceOpen)
{
htCodeOutFixINT2 := 1
}

htCodeOutFixINT := 0
Loop, Parse, A_LoopField, " "
{
htCodeOutFixINT++
}

htCodeOutFixINT--
Loop, Parse, A_LoopField, " "
{
if (htCodeOutFixINT = A_Index) && (htCodeOutFixINT2 = 1)
{
htCodeOutFixINT2 := 0
htCodeOutFixEnd .= HTVMmatchStrRrplace(A_LoopField, keyWordCurlyBraceOpen, "{") . " "
}
else
{
htCodeOutFixEnd .= A_LoopField . " "
}

}
StringTrimRight, htCodeOutFixEnd, htCodeOutFixEnd, 1
htCodeOutFixEnd .= Chr(10)

}
StringTrimRight, code, htCodeOutFixEnd, 1

}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
htCodeOutFixEnd := ""

if (keyWordCurlyBraceClose != "}")
{

Loop, Parse, code, `n, `r
{
htCodeOutFixINT2 := 0
if (isLineAconstruct(Trim(A_LoopField)) = true) or (Trim(A_LoopField) = keyWordCurlyBraceClose)
{
htCodeOutFixINT2 := 1
}


Loop, Parse, A_LoopField, " "
{
if (htCodeOutFixINT2 = 1) or (Trim(A_LoopField) = keyWordCurlyBraceClose)
{
htCodeOutFixINT2 := 0
htCodeOutFixEnd .= HTVMmatchStrRrplace(A_LoopField, keyWordCurlyBraceClose, "}") . " "
}
else
{
htCodeOutFixEnd .= A_LoopField . " "
}

}
StringTrimRight, htCodeOutFixEnd, htCodeOutFixEnd, 1
htCodeOutFixEnd .= Chr(10)

}
StringTrimRight, code, htCodeOutFixEnd, 1

}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

htCodeOutFixEnd := ""
if (useEnd = "on")
{
Loop, Parse, code, `n, `r
{
if (StrLower(Trim(A_LoopField)) = StrLower(keyWordEnd))
{
htCodeOutFixEnd .= "}`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordIF))) = StrLower(keyWordIF)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= A_LoopField . "`n{`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordWhileLoop))) = StrLower(keyWordWhileLoop)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= A_LoopField . "`n{`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordElseIf))) = StrLower(keyWordElseIf)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= "`n}`n" . A_LoopField . "`n{`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordElse))) = StrLower(keyWordElse)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= "`n}`n" . A_LoopField . "`n{`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordCatch))) = StrLower(keyWordCatch)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= "`n}`n" . A_LoopField . "`n{`n"
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordFinally))) = StrLower(keyWordFinally)) and (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= "`n}`n" . A_LoopField . "`n{`n"
}
else if (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= A_LoopField . "`n{`n"
}
else
{
htCodeOutFixEnd .= A_LoopField . Chr(10)
}
}
StringTrimRight, code, htCodeOutFixEnd, 1
}

if (usePythonicColonSyntax = "off")
{
if (useEnd = "off") and (useCurlyBraces = "off")
{
htCodeOutFixEnd := ""
Loop, Parse, code, `n, `r
{
if (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= A_LoopField . ":`n"
}
else
{
htCodeOutFixEnd .= A_LoopField . Chr(10)
}
}
StringTrimRight, code, htCodeOutFixEnd, 1

}

}



if (useCurlyBraces = "off") and (useEnd = "off")
{
code := AddCurlyBraces(code)
}



outTrimCode := ""
Loop, Parse, code, `n, `r
{
outTrimCode .= Trim(A_LoopField) . Chr(10)
}
StringTrimRight, code, outTrimCode, 1


; for converting c++ to js and py
;code := StrReplace(code, "{}", "[]")

str outCodeFixBraces := ""
Loop, 2
{
outCodeFixBraces := ""
Loop, Parse, code, `n, `r
{

if (InStr(A_LoopField, " " . keyWordAssign . " ")) or (InStr(A_LoopField, " " . keyWordAssignAdd . " ")) or (InStr(A_LoopField, " " . keyWordAssignConcat . " ")) or (InStr(A_LoopField, " " . keyWordAssignSub . " ")) or (InStr(A_LoopField, " " . keyWordAssignMul . " ")) or (InStr(A_LoopField, " " . keyWordAssignDiv . " ")) or (InStr(A_LoopField, " " . keyWordAssignMod . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftLeft . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitAnd . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitOr . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitXor . " ")) and (useCurlyBracesSyntaxForArrayDef = "on")
{

if (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordFunc))) = StrLower(keyWordFunc)) or (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordAsync) . StrLower(keyWordFunc))) = StrLower(keyWordAsync) . StrLower(keyWordFunc))
{


if (InStr(Trim(A_LoopField), "{")) and (Trim(A_LoopField) != "{")
{
outCodeFixBraces .= Trim(StrReplace(Trim(A_LoopField), "{", "")) . "`n{`n"
}
else if (InStr(Trim(A_LoopField), "}")) and (Trim(A_LoopField) != "}")
{
outCodeFixBraces .= "}`n" . Trim(StrReplace(Trim(A_LoopField), "}", "")) . Chr(10)
}
else
{
outCodeFixBraces .= Trim(A_LoopField) . Chr(10)
}

}
else
{
outCodeFixBraces .= Trim(A_LoopField) . Chr(10)
}

}
else
{

if (InStr(Trim(A_LoopField), "{")) and (Trim(A_LoopField) != "{")
{
outCodeFixBraces .= Trim(StrReplace(Trim(A_LoopField), "{", "")) . "`n{`n"
}
else if (InStr(Trim(A_LoopField), "}")) and (Trim(A_LoopField) != "}")
{
outCodeFixBraces .= "}`n" . Trim(StrReplace(Trim(A_LoopField), "}", "")) . Chr(10)
}
else
{
outCodeFixBraces .= Trim(A_LoopField) . Chr(10)
}

}


}

StringTrimRight, code, outCodeFixBraces, 1
}



htCodeOutFixEnd := ""
if (usePythonicColonSyntax = "on") or (useCurlyBraces = "off") and (useEnd = "off")
{


Loop, Parse, code, `n, `r
{
if (isLineAconstruct(Trim(A_LoopField)) = true)
{
htCodeOutFixEnd .= StringTrimRight(A_LoopField, 1) . Chr(10)
}
else
{
htCodeOutFixEnd .= A_LoopField . Chr(10)
}

}

StringTrimRight, code, htCodeOutFixEnd, 1
}




;;; main loop ;;;
;;; main loop ;;;
;;; main loop ;;;
;;; main loop ;;;
fullLangAllOperators := GETfullLangAllOperators()
fullLangAllOperators_HELP := GETfullLangAllOperators_HELP()



if (isNotHTVMfile2 = 0)
{



Loop, Parse, code, `n, `r
{

if (StrLower(Trim(A_LoopField)) = StrLower(keyWordMainLabel))
{
didWeUseMainLabel := 1
if (langToConvertTo = langFileExtension_2) 
{
codeOutFixAndAddMainFunc .= keyWordMainLabel_2 . Chr(10)
}
if (langToConvertTo = "cpp")
{
codeOutFixAndAddMainFunc .= "int main(int argc, char* argv[])" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "js") and (useJavaScriptAmainFuncDef = "on")
{
codeOutFixAndAddMainFunc .= "async function main()" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "ts") and (useJavaScriptAmainFuncDef = "on")
{
codeOutFixAndAddMainFunc .= "async function main(): Promise<void>" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "go")
{
codeOutFixAndAddMainFunc .= "func main()" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "cs")
{
codeOutFixAndAddMainFunc .= "static void Main(string[] args)" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "java")
{
codeOutFixAndAddMainFunc .= "public static void main(String[] args)" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "kt")
{
codeOutFixAndAddMainFunc .= "fun main(args: Array<String>)" . Chr(10) . "{" . Chr(10)
}
if (langToConvertTo = "swift")
{
codeOutFixAndAddMainFunc .= "func main()`n{`n"
}
if (langToConvertTo = "dart")
{
codeOutFixAndAddMainFunc .= "void main(List<String> arguments)" . Chr(10) . "{" . Chr(10)
}

}
else
{
codeOutFixAndAddMainFunc .= A_LoopField . Chr(10)
}
}

if (didWeUseMainLabel != 1) and (langToConvertTo = "cpp")
{
codeOutFixAndAddMainFunc := "int main(int argc, char* argv[])" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "js") and (useJavaScriptAmainFuncDef = "on")
{
codeOutFixAndAddMainFunc := "async function main()" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}

if (didWeUseMainLabel != 1) and (langToConvertTo = "ts") and (useJavaScriptAmainFuncDef = "on")
{
    codeOutFixAndAddMainFunc := "async function main(): Promise<void>" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "go")
{
    codeOutFixAndAddMainFunc := "func main()" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "cs")
{
    codeOutFixAndAddMainFunc := "static void Main(string[] args)" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "java")
{
    codeOutFixAndAddMainFunc := "public static void main(String[] args)" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "kt")
{
    codeOutFixAndAddMainFunc := "fun main(args: Array<String>)" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "swift")
{
    codeOutFixAndAddMainFunc := "func main()" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}
if (didWeUseMainLabel != 1) and (langToConvertTo = "dart")
{
    codeOutFixAndAddMainFunc := "void main(List<String> arguments)" . Chr(10) . "{" . Chr(10) . codeOutFixAndAddMainFunc
}

StringTrimRight, code, codeOutFixAndAddMainFunc, 1
; main loop
; main loop
}

Loop, Parse, code, `n, `r
{
lookIntoTheNextLineForFuncWhitNoKeyWord.add(A_LoopField)
}
lookIntoTheNextLineForFuncWhitNoKeyWord.add(" ")


 
code := OSP(code)
code := StrReplace(code, "}_HTVM-OSP-HTVM-OSP-REMOVE-OSP-HTVMv2--OSP", "}")

htCode := ""
;print("=======UP==========")
;print(code)
;print("=======DOWN==========")
Loop, Parse, code, `n, `r
{
lineDone := 0

if (SubStr(A_LoopField, 1, StrLen(keyWordComment)) = keyWordComment)
{
lineDone := 1
str1 := StringTrimLeft(A_LoopField, StrLen(keyWordComment))
if (langToConvertTo = langFileExtension_2) 
{
htCode .= keyWordComment_2 . str1 . Chr(10)
}
if (langToConvertTo = "cpp") 
{
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "py") {
htCode .= "#" . str1 . Chr(10)
}
if (langToConvertTo = "js") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "go") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "--" . str1 . Chr(10)
}
if (langToConvertTo = "cs") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "java") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "kt") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "rb") {
htCode .= "#" . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "#" . str1 . Chr(10)
}
if (langToConvertTo = "ahk") {
htCode .= ";" . str1 . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "dart") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "ts") {
htCode .= "//" . str1 . Chr(10)
}
if (langToConvertTo = "groovy") {
htCode .= "//" . str1 . Chr(10)
}
}
else if (Trim(A_LoopField) = keyWordCommentOpenMultiLine)
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
htCode .= keyWordCommentOpenMultiLine_2 . Chr(10)
}
if (langToConvertTo = "cpp") 
{
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "py") {
htCode .= Chr(34) . Chr(34) . Chr(34) . Chr(10)
}
if (langToConvertTo = "js") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "go") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "--[[" . Chr(10)
}
if (langToConvertTo = "cs") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "java") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "kt") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "rb") {
htCode .= "=begin" . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "#[" . Chr(10)
}
if (langToConvertTo = "ahk") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "dart") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "ts") {
htCode .= "/*" . Chr(10)
}
if (langToConvertTo = "groovy") {
htCode .= "/*" . Chr(10)
}
}
else if (Trim(A_LoopField) = keyWordCommentCloseMultiLine)
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
htCode .= keyWordCommentCloseMultiLine_2 . Chr(10)
}
if (langToConvertTo = "cpp") 
{
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "py") {
htCode .= Chr(34) . Chr(34) . Chr(34) . Chr(10)
}
if (langToConvertTo = "js") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "go") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "]]" . Chr(10)
}
if (langToConvertTo = "cs") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "java") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "kt") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "rb") {
htCode .= "=end" . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "]#" . Chr(10)
}
if (langToConvertTo = "ahk") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "dart") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "ts") {
htCode .= "*/" . Chr(10)
}
if (langToConvertTo = "groovy") {
htCode .= "*/" . Chr(10)
}
}
else if (InStr(A_LoopField, "[][][][][] "))
{
lineDone := 1
str1 := StrSplit(A_LoopField, " ", 2)
ospDic1.add(str1)
strOspHold := StrReplace(str1, "_", ".")

if (langToConvertTo = langFileExtension_2) 
{
htCode .= keyWordDefObj_2 . StrReplace(str1, "_", ".") . Chr(10) . "{" . Chr(10)
}


}
else if (InStr(A_LoopField, "[end][end][end][end][end] "))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
htCode .= "}" . Chr(10)
}

}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordProp))) = StrLower(keyWordProp))
{
lineDone := 1
str0 := Trim(StringTrimLeft(A_LoopField, StrLen(keyWordProp)))

str1 := Trim(StrSplit(str0, "-----------------------HTVM-OSP-HTVM-OBJ--------------", 1))
str20 := Trim(StrSplit(str0, "-----------------------HTVM-OSP-HTVM-OBJ--------------", 2))

if (str20 = "")
{
continue
}

if (langToConvertTo = langFileExtension_2) 
{
htCode .= keyWordProp_2 . propHELP(str1, "no-no") . Chr(10)
}
else
{

htCode .= propHELP(str1, StrReplace(str20, ".", "_") . "_") . Chr(10)
}



}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordMethod))) = StrLower(keyWordMethod))
{
lineDone := 1
str0 := Trim(StringTrimLeft(A_LoopField, StrLen(keyWordMethod)))
str1 := Trim(StrSplit(str0, "-----------------------HTVM-OSP-HTVM-OBJ--------------", 1))
str20 := Trim(StrSplit(str0, "-----------------------HTVM-OSP-HTVM-OBJ--------------", 2))

str16 := Trim(StrSplit(str1, "(", 1))
str18 := Trim(StrSplit(str1, ")", 2))

int1 := 0
str17 := ""
Loop, Parse, str16, " "
{
str17 := Trim(A_LoopField)
}

; last word aka the method name
;str17

str15 := StrReplace(str20 . "_" . str17, "_", ".")
ospDic2.add(StringTrimLeft(str15, 11))
str15 := StrReplace(str15, ".", "_")

str1 := StrReplace(str1, "(" . keyWordThis . ")", "()")

if (usePrefixTypeForTypeDefinition = "on")
{

str2 := Trim(StrSplit(str1, "(", 1))

; func body 
str1 := Trim(StringTrimLeft(str1, StrLen(str2)))
StringTrimRight, str1, str1, 1

; type of the func
str3 := Trim(StringTrimRight(str2, StrLen(StrSplit(str2, " ", countChars(str2, " ") + 1))))

; name of func
str2 := Trim(StrSplit(str2, " ", countChars(str2, " ") + 1))
}
if (usePostfixTypeForTypeDefinition = "on")
{
; name of func
str2 := Trim(StrSplit(str1, "(", 1))

; func body 
str1 := Trim(StringTrimLeft(str1, StrLen(str2)))

; type of the func
str3 := Trim(StrSplit(str1, ")", countChars(str1, ")") + 1))
StringTrimLeft, str3, str3, 1

str1 := Trim(StringTrimRight(str1, StrLen(str3) + 2))

}
StringTrimLeft, str1, str1, 1

str3 := Trim(str3)


    if (langToConvertTo = langFileExtension_2) {
        if (int1 = 1) { ; int1 1 = is async 0 = not async
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "(" . keyWordThis_2 . ")" . Chr(10)
            } else {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . str2 . "(" . keyWordThis_2 . "): " . getFuncTypeConvert(str3) . Chr(10)
            }
        } else {
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "(" . keyWordThis_2 . ")" . Chr(10)
            } else {
                htCode .= keyWordFunc_2 . str2 . "(" . keyWordThis_2 . "): " . getFuncTypeConvert(str3) . Chr(10)
            }
        }
    }

if (langToConvertTo = "cpp") {
    htCode .= getFuncTypeConvert(str3) . " " . str15 . "(std::string OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
}

if (langToConvertTo = "py") {
    htCode .= "def " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . "):" . Chr(10)
}

if (langToConvertTo = "js") {
    if (int1 = 1) { ; int1 1 = is async, 0 = not async
        htCode .= "async function " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
    } else {
        htCode .= "function " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
    }
}


; Go
if (langToConvertTo = "go") 
{
skipLeftCuleyForFuncPLS := 1
if (str3 = keyWordVoid)
{
    htCode .= "func " . str15 . "(__HTVM_V2_TO_GO_optionalParams__ ...interface{})" . Chr(10) . "{" . Chr(10) . "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD := " . Chr(34) . Chr(34) . Chr(10) . "if len(__HTVM_V2_TO_GO_optionalParams__) " . Chr(62) . " 0 " . Chr(10) . "{" . Chr(10) . "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = __HTVM_V2_TO_GO_optionalParams__[0].(string)" . Chr(10) . "}" . Chr(10)
}
else
{
    htCode .= "func " . str15 . "(__HTVM_V2_TO_GO_optionalParams__ ...interface{}) " . getFuncTypeConvert(str3) . Chr(10) . "{" . Chr(10) . "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD := " . Chr(34) . Chr(34) . Chr(10) . "if len(__HTVM_V2_TO_GO_optionalParams__) " . Chr(62) . " 0 {" . Chr(10) . "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = __HTVM_V2_TO_GO_optionalParams__[0].(string)" . Chr(10) . "}" . Chr(10)
}

}
if (langToConvertTo = "lua")
{
skipLeftCuleyForFuncPLS := 1
    htCode .= "function " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD) {" . Chr(10) . "OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD or " . Chr(34) . Chr(34) . Chr(10)
}
if (langToConvertTo = "cs")
{
    htCode .= "static " . getFuncTypeConvert(str3) . " " . str15 . "(string OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
}
if (langToConvertTo = "java")
{
skipLeftCuleyForFuncPLS := 1
    htCode .= "public static " . getFuncTypeConvert(str3) . " " . str15 . "(Object... __HTVM_V2_TO_JAVA_optionalParams__)" . Chr(10) . "{" . Chr(10) . "String OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ";" . Chr(10)
}
if (langToConvertTo = "kt")
{

if (str3 = keyWordVoid)
{
    htCode .= "fun " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: String = " . Chr(34) . Chr(34) . ")" . Chr(10)
}
else
{
    htCode .= "fun " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: String = " . Chr(34) . Chr(34) . "): " . getFuncTypeConvert(str3) . Chr(10)
}

}
if (langToConvertTo = "rb")
{
    htCode .= "def " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
}
if (langToConvertTo = "nim")
{
if (str3 = keyWordVoid)
{
    htCode .= "proc " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: string = " . Chr(34) . Chr(34) . ") =" . Chr(10)
}
else
{
    htCode .= "proc " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: string = " . Chr(34) . Chr(34) . "): " . getFuncTypeConvert(str3) . " =" . Chr(10)
}
}
if (langToConvertTo = "ahk")
{
    htCode .= str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD := " . Chr(34) . Chr(34) . ")" . Chr(10)
}
if (langToConvertTo = "swift")
{
if (str3 = keyWordVoid)
{
    htCode .= "func " . str15 . "(_ OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: String = " . Chr(34) . Chr(34) . ")" . Chr(10)
}
else
{
    htCode .= "func " . str15 . "(_ OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: String = " . Chr(34) . Chr(34) . ") -> " . getFuncTypeConvert(str3) . Chr(10)
}
}
if (langToConvertTo = "dart")
{
    htCode .= getFuncTypeConvert(str3) . " " . str15 . "([String OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . "])" . Chr(10)
}
if (langToConvertTo = "ts")
{
    htCode .= "function " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD: string = " . Chr(34) . Chr(34) . "): " . getFuncTypeConvert(str3) . Chr(10)
}
if (langToConvertTo = "groovy")
{
    htCode .= "def " . str15 . "(OSP_OSP_THIS_KEYWORD_HTVM_OSP_THIS_HTVM_KEYWORD = " . Chr(34) . Chr(34) . ")" . Chr(10)
}

}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordIF))) = StrLower(keyWordIF)) and (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordElseIf))) != StrLower(keyWordElseIf))
{
lineDone := 1
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(keyWordIF)))

str1 := Trim(expressionParserTranspiler("(" . str1 . ")"))

StringTrimRight, str1, str1, 1
StringTrimLeft, str1, str1, 1

if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{


if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordIF_2 . str1 . ":" . Chr(10)
}
else
{
htCode .= keyWordIF_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . ":" . Chr(10)
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordIF_2 . "(" . str1 . "):" . Chr(10)
}
else
{
htCode .= keyWordIF_2 . str1 . ":" . Chr(10)
}
}





}
else
{



if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordIF_2 . str1 . Chr(10)
}
else
{
htCode .= keyWordIF_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . Chr(10)
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordIF_2 . "(" . str1 . ")" . Chr(10)
}
else
{
htCode .= keyWordIF_2 . str1 . Chr(10)
}
}




}
}
if (langToConvertTo = "cpp") 
{
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "py") {
htCode .= "if " . str1 . ":" . Chr(10)
}
if (langToConvertTo = "js") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "go") {
htCode .= "if " . str1 . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "if " . str1 . " then" . Chr(10)
}
if (langToConvertTo = "cs") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "java") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "kt") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "rb") {
htCode .= "if " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "if " . str1 . ":" . Chr(10)
}
if (langToConvertTo = "ahk") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "swift") {
htCode .= "if " . str1 . Chr(10)
}
if (langToConvertTo = "dart") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "ts") {
if (useParentheses = "on")
{
htCode .= "if " . str1 . Chr(10)
}
else
{
htCode .= "if (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "groovy") {
htCode .= "if (" . str1 . ")" . Chr(10)
}
} 
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordElseIf))) = StrLower(keyWordElseIf)) and (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordIF))) != StrLower(keyWordIF)) 
{
lineDone := 1
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(keyWordElseIf)))

str1 := Trim(expressionParserTranspiler("(" . str1 . ")"))

StringTrimRight, str1, str1, 1
StringTrimLeft, str1, str1, 1

if (langToConvertTo = langFileExtension_2)  
{
if (usePythonicColonSyntax_2 = "on")
{


if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordElseIf_2 . str1 . ":`n"
}
else
{
htCode .= keyWordElseIf_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . ":`n"
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordElseIf_2 . "(" . str1 . "):`n"
}
else
{
htCode .= keyWordElseIf_2 . str1 . ":`n"
}
}





}
else
{



if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordElseIf_2 . str1 . Chr(10)
}
else
{
htCode .= keyWordElseIf_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . Chr(10)
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordElseIf_2 . "(" . str1 . ")`n"
}
else
{
htCode .= keyWordElseIf_2 . str1 . Chr(10)
}
}




}
}
if (langToConvertTo = "cpp") 
{
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "py") {
htCode .= "elif " . str1 . ":`n"
}
if (langToConvertTo = "js") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "go") {
htCode .= "else if " . str1 . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "elseif " . str1 . " then`n"
}
if (langToConvertTo = "cs") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "java") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "kt") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "rb") {
htCode .= "elsif " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "elif " . str1 . ":`n"
}
if (langToConvertTo = "ahk") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "swift") {
htCode .= "else if " . str1 . Chr(10)
}
if (langToConvertTo = "dart") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "ts") {
if (useParentheses = "on")
{
htCode .= "else if " . str1 . Chr(10)
}
else
{
htCode .= "else if (" . str1 . ")`n"
}
}
if (langToConvertTo = "groovy") {
htCode .= "else if (" . str1 . ")" . Chr(10)
}
}
else if (StrLower(Trim(A_LoopField)) = StrLower(keyWordElse)) or (StrLower(Trim(A_LoopField)) = StrLower(keyWordElse . ":"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{
htCode .= keyWordElse_2 . ":`n"
}
else
{
htCode .= keyWordElse_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "else`n"
}
if (langToConvertTo = "py") {
htCode .= "else:`n"
}
if (langToConvertTo = "js") {
htCode .= "else`n"
}
if (langToConvertTo = "go") {
htCode .= "else`n"
}
if (langToConvertTo = "lua") {
htCode .= "else`n"
}
if (langToConvertTo = "cs") {
htCode .= "else`n"
}
if (langToConvertTo = "java") {
htCode .= "else`n"
}
if (langToConvertTo = "kt") {
htCode .= "else`n"
}
if (langToConvertTo = "rb") {
htCode .= "else`n"
}
if (langToConvertTo = "nim") {
htCode .= "else:`n"
}
if (langToConvertTo = "ahk") {
htCode .= "else`n"
}
if (langToConvertTo = "swift") {
htCode .= "else`n"
}
if (langToConvertTo = "dart") {
htCode .= "else`n"
}
if (langToConvertTo = "ts") {
htCode .= "else`n"
}
if (langToConvertTo = "groovy") {
htCode .= "else`n"
}
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordWhileLoop))) = StrLower(keyWordWhileLoop))
{
lineDone := 1
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(keyWordWhileLoop)))

str1 := Trim(expressionParserTranspiler("(" . str1 . ")"))

StringTrimRight, str1, str1, 1
StringTrimLeft, str1, str1, 1

if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{


if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordWhileLoop_2 . str1 . ":" . Chr(10)
}
else
{
htCode .= keyWordWhileLoop_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . ":" . Chr(10)
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordWhileLoop_2 . "(" . str1 . "):" . Chr(10)
}
else
{
htCode .= keyWordWhileLoop_2 . str1 . ":" . Chr(10)
}
}





}
else
{



if (useParentheses = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordWhileLoop_2 . str1 . Chr(10)
}
else
{
htCode .= keyWordWhileLoop_2 . StringTrimRight(StringTrimLeft(Trim(str1), 1), 1) . Chr(10)
}
}
else
{
if (useParentheses_2 = "on")
{
htCode .= keyWordWhileLoop_2 . "(" . str1 . ")" . Chr(10)
}
else
{
htCode .= keyWordWhileLoop_2 . str1 . Chr(10)
}
}




}
}
if (langToConvertTo = "cpp") 
{
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "py") {
htCode .= "while " . str1 . ":" . Chr(10)
}
if (langToConvertTo = "js") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "go") {
htCode .= "for " . str1 . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "while " . str1 . " do" . Chr(10)
}
if (langToConvertTo = "cs") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "java") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")" . Chr(10)
}
}
if (langToConvertTo = "kt") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")`n"
}
}
if (langToConvertTo = "rb") {
htCode .= "while " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "while " . str1 . ":`n"
}
if (langToConvertTo = "ahk") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")`n"
}
}
if (langToConvertTo = "swift") {
htCode .= "while " . str1 . Chr(10)
}
if (langToConvertTo = "dart") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")`n"
}
}
if (langToConvertTo = "ts") {
if (useParentheses = "on")
{
htCode .= "while " . str1 . Chr(10)
}
else
{
htCode .= "while (" . str1 . ")`n"
}
}
if (langToConvertTo = "groovy") {
htCode .= "while (" . str1 . ")" .  Chr(10)
}
}
else if (StrLower(Trim(A_LoopField)) = StrLower(keyWordTry)) or (StrLower(Trim(A_LoopField)) = StrLower(keyWordTry . ":"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{
htCode .= keyWordTry_2 . ":`n"
}
else
{
htCode .= keyWordTry_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "try`n"
}
if (langToConvertTo = "py") {
htCode .= "try:`n"
}
if (langToConvertTo = "js") {
htCode .= "try`n"
}
if (langToConvertTo = "go") {
htCode .= "GO DOSENT HAVE A TRY USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "lua") {
htCode .= "LUA DOSENT HAVE A TRY USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "cs") {
htCode .= "try`n"
}
if (langToConvertTo = "java") {
htCode .= "try`n"
}
if (langToConvertTo = "kt") {
htCode .= "try`n"
}
if (langToConvertTo = "rb") {
htCode .= "begin`n"
}
if (langToConvertTo = "nim") {
htCode .= "try:`n"
}
if (langToConvertTo = "ahk") {
htCode .= "try`n"
}
if (langToConvertTo = "swift") {
htCode .= "do`n"
}
if (langToConvertTo = "dart") {
htCode .= "try`n"
}
if (langToConvertTo = "ts") {
htCode .= "try`n"
}
if (langToConvertTo = "groovy") {
htCode .= "try`n"
}
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordCatch))) = StrLower(keyWordCatch))
{
lineDone := 1
str1 := Trim(StrReplace(StrReplace(StringTrimLeft(A_LoopField, StrLen(keyWordCatch)), "(", ""), ")", ""))
theTryCatchVarForErrors := str1
if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{
if (useParentheses_2 = "on")
{
htCode .= keyWordCatch_2 . "(" . str1 . "):" . Chr(10)
}
else
{
htCode .= keyWordCatch_2 . str1 . ":" . Chr(10)
}
}
else
{

if (useParentheses_2 = "off")
{
htCode .= keyWordCatch_2 . str1 . Chr(10)
}
else
{
htCode .= keyWordCatch_2 . "(" . str1 . ")" . Chr(10)
}


}
}
if (langToConvertTo = "cpp") 
{
htCode .= "catch (const std::exception& " . str1 . ")`n"
}
if (langToConvertTo = "py") {
htCode .= "except Exception as " . str1 . ":`n"
}
if (langToConvertTo = "js") {
htCode .= "catch (" . str1 . ")`n"
}
if (langToConvertTo = "go") {
htCode .= "GO DOSENT HAVE A CATCH USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "lua") {
htCode .= "LUA DOSENT HAVE A CATCH USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "cs") {
htCode .= "catch (Exception " . str1 . ")`n"
}
if (langToConvertTo = "java") {
htCode .= "catch (Exception " . str1 . ")`n"
}
if (langToConvertTo = "kt") {
htCode .= "catch (" . str1 . ": Exception)`n"
}
if (langToConvertTo = "rb") {
htCode .= "rescue => " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "except ValueError as " . str1 . ":`n"
}
if (langToConvertTo = "ahk") {
htCode .= "catch " . str1 . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "catch let " . str1 . " as NSError`n"
}
if (langToConvertTo = "dart") {
htCode .= "catch (" . str1 . ")`n"
}
if (langToConvertTo = "ts") {
htCode .= "catch (" . str1 . ")`n"
}
if (langToConvertTo = "groovy") {
htCode .= "catch (Exception " . str1 . ")`n"
}
}
else if (StrLower(Trim(A_LoopField)) = StrLower(keyWordFinally)) or (StrLower(Trim(A_LoopField)) = StrLower(keyWordFinally . ":"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{
htCode .= keyWordFinally_2 . ":`n"
}
else
{
htCode .= keyWordFinally_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "if (" . Chr(34) . "finally dosent exist in c++" . Chr(34) . " == " . Chr(34) . "finally dosent exist in c++" . Chr(34) . ")`n"
}
if (langToConvertTo = "py") {
htCode .= "finally:`n"
}
if (langToConvertTo = "js") {
htCode .= "finally`n"
}
if (langToConvertTo = "go") {
htCode .= "GO DOSENT HAVE A FINALLY USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "lua") {
htCode .= "LUA DOSENT HAVE A FINALLY USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "cs") {
htCode .= "finally`n"
}
if (langToConvertTo = "java") {
htCode .= "finally`n"
}
if (langToConvertTo = "kt") {
htCode .= "finally`n"
}
if (langToConvertTo = "rb") {
htCode .= "ensure`n"
}
if (langToConvertTo = "nim") {
htCode .= "finally:`n"
}
if (langToConvertTo = "ahk") {
htCode .= "finally`n"
}
if (langToConvertTo = "swift") {
htCode .= "if (" . Chr(34) . "finally dosent exist in swift" . Chr(34) . " == " . Chr(34) . "finally dosent exist in swift" . Chr(34) . ")`n"
}
if (langToConvertTo = "dart") {
htCode .= "finally`n"
}
if (langToConvertTo = "ts") {
htCode .= "finally`n"
}
if (langToConvertTo = "groovy") {
htCode .= "finally`n"
}
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordThrow))) = StrLower(keyWordThrow))   
{
lineDone := 1
str1 := Trim(A_LoopField)
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}
str1 := expressionParserTranspiler(fixArray1234(Trim(StringTrimLeft(str1, StrLen(keyWordThrow)))))

if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= keyWordThrow_2 . keyWordErrorMsg_2 . "(" . str1 . ");`n"
}
else
{
htCode .= keyWordThrow_2 . keyWordErrorMsg_2 . "(" . str1 . ")`n"
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "throw std::runtime_error(" . str1 . ");`n"
}
if (langToConvertTo = "py") {
htCode .= "raise Exception(" . str1 . ")`n"
}
if (langToConvertTo = "js") {
htCode .= "throw new Error(" . str1 . ");`n"
}
if (langToConvertTo = "go") {
htCode .= "GO DOSENT HAVE A THROW USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "lua") {
htCode .= "LUA DOSENT HAVE A THROW USE PROGRAMMING BLOCKS MAYBE IDK`n"
}
if (langToConvertTo = "cs") {
htCode .= "throw new Exception(" . str1 . ");`n"
}
if (langToConvertTo = "java") {
htCode .= "throw new Exception(" . str1 . ");`n"
}
if (langToConvertTo = "kt") {
htCode .= "throw Exception(" . str1 . ")" . Chr(10)
}
if (langToConvertTo = "rb") {
htCode .= "raise " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "raise newException(ValueError, " . str1 . ")`n"
}
if (langToConvertTo = "ahk") {
htCode .= "throw " . str1 . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "try ErrorMsg(" . str1 . ")`n"
}
if (langToConvertTo = "dart") {
htCode .= "throw Exception(" . str1 . ");`n"
}
if (langToConvertTo = "ts") {
htCode .= " throw new Error(" . str1 . ");`n"
}
if (langToConvertTo = "groovy") {
htCode .= "throw new Exception(" . str1 . ")`n"
}
}
else if (StrLower(A_LoopField) = StrLower(keyWordBreak)) or (StrLower(A_LoopField) = StrLower(keyWordBreak . ";"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= keyWordBreak_2 . ";`n"
}
else
{
htCode .= keyWordBreak_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "break;`n"
}
if (langToConvertTo = "py") {
htCode .= "break`n"
}
if (langToConvertTo = "js") {
htCode .= "break;`n"
}
if (langToConvertTo = "go") {
htCode .= "break`n"
}
if (langToConvertTo = "lua") {
htCode .= "break`n"
}
if (langToConvertTo = "cs") {
htCode .= "break;`n"
}
if (langToConvertTo = "java") {
htCode .= "break;`n"
}
if (langToConvertTo = "kt") {
htCode .= "break`n"
}
if (langToConvertTo = "rb") {
htCode .= "break`n"
}
if (langToConvertTo = "nim") {
htCode .= "break`n"
}
if (langToConvertTo = "ahk") {
htCode .= "break`n"
}
if (langToConvertTo = "swift") {
htCode .= "break`n"
}
if (langToConvertTo = "dart") {
htCode .= "break;`n"
}
if (langToConvertTo = "ts") {
htCode .= "break;`n"
}
if (langToConvertTo = "groovy") {
htCode .= "break;`n"
}
}
else if (StrLower(A_LoopField) = StrLower(Trim(keyWordReturnStatement))) or (StrLower(A_LoopField) = StrLower(Trim(keyWordReturnStatement) . ";"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= keyWordReturnStatement_2 . ";`n"
}
else
{
htCode .= keyWordReturnStatement_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "return;`n"
}
if (langToConvertTo = "py") {
htCode .= "return`n"
}
if (langToConvertTo = "js") {
htCode .= "return;`n"
}
if (langToConvertTo = "go") {
htCode .= "return`n"
}
if (langToConvertTo = "lua") {
htCode .= "return`n"
}
if (langToConvertTo = "cs") {
htCode .= "return;`n"
}
if (langToConvertTo = "java") {
htCode .= "return;`n"
}
if (langToConvertTo = "kt") {
htCode .= "return`n"
}
if (langToConvertTo = "rb") {
htCode .= "return`n"
}
if (langToConvertTo = "nim") {
htCode .= "return`n"
}
if (langToConvertTo = "ahk") {
htCode .= "return`n"
}
if (langToConvertTo = "swift") {
htCode .= "return`n"
}
if (langToConvertTo = "dart") {
htCode .= "return;`n"
}
if (langToConvertTo = "ts") {
htCode .= "return;`n"
}
if (langToConvertTo = "groovy") {
htCode .= "return;`n"
}
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordReturnStatement))) = StrLower(keyWordReturnStatement))
{
lineDone := 1
str1 := Trim(expressionParserTranspiler(Trim(StringTrimLeft(A_LoopField, StrLen(keyWordReturnStatement)))))

if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= keyWordReturnStatement_2 . str1 . ";" . Chr(10)
}
else
{
htCode .= keyWordReturnStatement_2 . str1 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "py") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "js") {
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "go") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "lua") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "cs") {
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "java") {
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "kt") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "rb") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "nim") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "ahk") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "swift") {
htCode .= "return " . str1 . Chr(10)
}
if (langToConvertTo = "dart") {
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "ts") {
htCode .= "return " . str1 . ";`n"
}
if (langToConvertTo = "groovy") {
htCode .= "return " . str1 . ";`n"
}
}
else if (StrLower(A_LoopField) = StrLower(keyWordContinue)) or (StrLower(A_LoopField) = StrLower(keyWordContinue . ";"))
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= keyWordContinue_2 . ";`n"
}
else
{
htCode .= keyWordContinue_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
htCode .= "continue;`n"
}
if (langToConvertTo = "py") {
htCode .= "continue`n"
}
if (langToConvertTo = "js") {
htCode .= "continue;`n"
}
if (langToConvertTo = "go") {
htCode .= "continue`n"
}
if (langToConvertTo = "lua") {
htCode .= "goto continue" . STR(luaContinueFix_Num) . Chr(10)
}
if (langToConvertTo = "cs") {
htCode .= "continue;`n"
}
if (langToConvertTo = "java") {
htCode .= "continue;`n"
}
if (langToConvertTo = "kt") {
htCode .= "continue`n"
}
if (langToConvertTo = "rb") {
htCode .= "next`n"
}
if (langToConvertTo = "nim") {
htCode .= "continue`n"
}
if (langToConvertTo = "ahk") {
htCode .= "continue`n"
}
if (langToConvertTo = "swift") {
htCode .= "continue`n"
}
if (langToConvertTo = "dart") {
htCode .= "continue;`n"
}
if (langToConvertTo = "ts") {
htCode .= "continue;`n"
}
if (langToConvertTo = "groovy") {
htCode .= "continue;`n"
}
}
else if (StrLower(A_LoopField) = "::" . keyWordContinue)
{
lineDone := 1
if (langToConvertTo = langFileExtension_2) 
{
htCode .= "::" . keyWordContinue_2 . Chr(10)
}

if (langToConvertTo = "lua") {
htCode .= "::continue" . STR(luaContinueFix_Num) . "::" . Chr(10)
luaContinueFix_Num++
}

}
else if (StrLower(A_LoopField) = StrLower(keyWordLoopInfinite)) or (StrLower(A_LoopField) = StrLower(keyWordLoopInfinite . ":"))
{
; infinity loops
haveWeEverUsedAloop := 1
lineDone := 1
howMany_fixAindexInGoUnused++
if (langToConvertTo = "py")
{
var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " , value in enumerate(iter(int, 1), start=" . AHKlikeLoopsIndexedAt . "):"
}
if (langToConvertTo = "js")
{
var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "cpp")
{
var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}

if (langToConvertTo = "go")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " := " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++"
}
if (langToConvertTo = "lua")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in infinite_HTVM_Lua_Loop_HTVM() do"
}
if (langToConvertTo = "cs")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "java")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "kt")
{
    var1 := "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in generateSequence(" . AHKlikeLoopsIndexedAt . ") { it + 1 })"
}
if (langToConvertTo = "rb")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..Float::INFINITY"
}
if (langToConvertTo = "nim")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in countup(" . AHKlikeLoopsIndexedAt . ", high(int)):"
}
if (langToConvertTo = "ahk")
{
    var1 := "Loop"
}
if (langToConvertTo = "swift")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..."
}
if (langToConvertTo = "dart")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "ts")
{
    var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "groovy")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; ; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = langFileExtension_2)
{
if (usePythonicColonSyntax_2 = "on")
{
var1 := keyWordLoopInfinite_2 . ":"
}
else
{
var1 := keyWordLoopInfinite_2
}
}


nothing := ""
AindexcharLengthStr := nothing . STR(AindexcharLength) . nothing

htCodeAcurlyBraceAddSomeVrasFixNL := 1
lineDone := 1
if (langToConvertTo != "ahk") and (langToConvertTo != langFileExtension_2)
{
htCodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength) . Chr(10)
htCodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength)
}
AindexcharLength++
htCode .= htCodeLoopfixa1 . Chr(10) . var1 . Chr(10)
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordLoop))) = StrLower(keyWordLoop)) and (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordLoop)) + 2) != StrLower(keyWordLoop) . "% ") and (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordLoopParse))) != StrLower(keyWordLoopParse))
{
out2 := StringTrimLeft(A_LoopField, StrLen(keyWordLoop))
out2 := StrReplace(out2, ":", "")
;MsgBox % out2
howMany_fixAindexInGoUnused++
;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := expressionParserTranspiler(myVar)
line := lineYGI
haveWeEverUsedAloop := 1
;MsgBox, % line



if (langToConvertTo = "py")
{
var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in range(" . AHKlikeLoopsIndexedAt . ", " . line . " + " . AHKlikeLoopsIndexedAt . "):"
}
if (langToConvertTo = "js")
{
var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "cpp")
{
var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "go")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " := " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++"
}
if (langToConvertTo = "lua")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . " + 1 " . ", " . line . " + " . AHKlikeLoopsIndexedAt . " do"
}
if (langToConvertTo = "cs")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "java")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "kt")
{
    var1 := "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . " until " . line . " + " . AHKlikeLoopsIndexedAt . ")"
}
if (langToConvertTo = "rb")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..." . line . " + " . AHKlikeLoopsIndexedAt . " do"
}
if (langToConvertTo = "nim")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..<" . line . " + " . AHKlikeLoopsIndexedAt . ":"
}
if (langToConvertTo = "ahk")
{
    var1 := "Loop, " . line
}
if (langToConvertTo = "swift")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . " ..< " . line . " + " . AHKlikeLoopsIndexedAt
}
if (langToConvertTo = "dart")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "ts")
{
    var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "groovy")
{
    var1 := "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..<" . line . " + " . AHKlikeLoopsIndexedAt . ")"
}
if (langToConvertTo = langFileExtension_2)
{
if (usePythonicColonSyntax_2 = "on")
{
var1 := Trim(keyWordLoop_2) . " " . line . ":"
}
else
{
var1 := Trim(keyWordLoop_2) . " " . line
}
}

nothing := ""
AindexcharLengthStr := nothing . STR(AindexcharLength) . nothing

htCodeAcurlyBraceAddSomeVrasFixNL := 1
if (langToConvertTo != "ahk") and (langToConvertTo != langFileExtension_2)
{
htCodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength) . Chr(10)
htCodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength)
}
AindexcharLength++
lineDone := 1
htCode .= htCodeLoopfixa1 . Chr(10) . var1 . Chr(10)
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, StrLen(StrLower(keyWordLoop)) + 2) = StrLower(keyWordLoop) . "% ")
{
howMany_fixAindexInGoUnused++
out2 := StringTrimLeft(A_LoopField, StrLen(keyWordLoop) + 2)
out2 := StrReplace(out2, ":", "")

;MsgBox % out2

;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := expressionParserTranspiler(myVar)
line := lineYGI
haveWeEverUsedAloop := 1
;MsgBox, % line



if (langToConvertTo = "py")
{
var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in range(" . AHKlikeLoopsIndexedAt . ", " . line . " + " . AHKlikeLoopsIndexedAt . "):"
}
if (langToConvertTo = "js")
{
var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "cpp")
{
var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}

if (langToConvertTo = "go")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " := " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++"
}
if (langToConvertTo = "lua")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . " + 1 " . ", " . line . " + " . AHKlikeLoopsIndexedAt . " do"
}
if (langToConvertTo = "cs")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "java")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "kt")
{
    var1 := "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . " until " . line . " + " . AHKlikeLoopsIndexedAt . ")"
}
if (langToConvertTo = "rb")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..." . line . " + " . AHKlikeLoopsIndexedAt . " do"
}
if (langToConvertTo = "nim")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..<" . line . " + " . AHKlikeLoopsIndexedAt . ":"
}
if (langToConvertTo = "ahk")
{
    var1 := "Loop, % " . line 
}
if (langToConvertTo = "swift")
{
    var1 := "for " . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . " ..< " . line . " + " . AHKlikeLoopsIndexedAt
}
if (langToConvertTo = "dart")
{
    var1 := "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "ts")
{
    var1 := "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < " . line . " + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "groovy")
{
    var1 := "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..<" . line . " + " . AHKlikeLoopsIndexedAt . ")"
}
if (langToConvertTo = langFileExtension_2)
{

if (usePythonicColonSyntax_2 = "on")
{
var1 := Trim(keyWordLoop_2) . " % " . line . ":"
}
else
{
var1 := Trim(keyWordLoop_2) . " % " . line
}
}


nothing := ""
AindexcharLengthStr := nothing . STR(AindexcharLength) . nothing

htCodeAcurlyBraceAddSomeVrasFixNL := 1
if (langToConvertTo != "ahk") and (langToConvertTo != langFileExtension_2)
{
htCodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength) . Chr(10)
htCodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength)
}
AindexcharLength++
lineDone := 1
htCode .= htCodeLoopfixa1 . Chr(10) . var1 . Chr(10)
}
else if (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordLoopParse))) = StrLower(keyWordLoopParse))
{
howMany_fixAindexInGoUnused++
var1 := StringTrimLeft(A_LoopField, StrLen(keyWordLoopParse))
out2 := StrReplace(out2, ":", "")
lineDone := 1

line1 := Trim(StrSplit(var1, ",", 1))

line1 := expressionParserTranspiler(line1)
line2 := ""
line3 := ""
itemsOut := ""
line2 := Trim(StrSplit(var1, ",", 2))
line3 := Trim(StrSplit(var1, ",", 3))



if (InStr(var1, keyWordEscpaeChar . ","))
{
line2 := Chr(34) . "," . Chr(34)


if (langToConvertTo = "py")
{
itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "js")
{
itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}
if (langToConvertTo = "cpp")
{
itemsOut := "std::vector<std::string> items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}

if (langToConvertTo = "go")
{
    itemsOut := "items" . STR(AindexcharLength) . " := LoopParseFunc(" . line1 . ", " . line2 . ", " . Chr(34) . Chr(34) . ")"
}
if (langToConvertTo = "lua")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "cs")
{
    itemsOut := "List<string> items" . STR(AindexcharLength) . " = new List<string>(LoopParseFunc(" . line1 . ", " . line2 . "));"
}
if (langToConvertTo = "java")
{
    itemsOut := "String[] items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . Chr(34) . Chr(34) . ");"
}
if (langToConvertTo = "kt")
{
    itemsOut := "val items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "rb")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "nim")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "ahk")
{
    itemsOut := Chr(10)
}
if (langToConvertTo = "swift")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "dart")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}
if (langToConvertTo = "ts")
{
    itemsOut := "let items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "groovy")
{
    itemsOut := "def items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}

}
else
{


if (line2 = "") and (line3 = "")
{
; nothing so only each char
if (langToConvertTo = "py") or (langToConvertTo = "js")
{
itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "cpp")
{
itemsOut := "std::vector<std::string> items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ");"
}

if (langToConvertTo = "go")
{
    itemsOut := "items" . STR(AindexcharLength) . " := LoopParseFunc(" . line1 . ", " . Chr(34) . Chr(34) . ", " . Chr(34) . Chr(34) . ")"
}
if (langToConvertTo = "lua")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "cs")
{
    itemsOut := "List<string> items" . STR(AindexcharLength) . " = new List<string>(LoopParseFunc(" . line1 . "));"
}
if (langToConvertTo = "java")
{
    itemsOut := "String[] items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . Chr(34) . Chr(34) . ", " . Chr(34) . Chr(34) . ");"
}
if (langToConvertTo = "kt")
{
    itemsOut := "val items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "rb")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "nim")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "ahk")
{
    itemsOut := Chr(10)
}
if (langToConvertTo = "swift")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}
if (langToConvertTo = "dart")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ");"
}
if (langToConvertTo = "ts")
{
    itemsOut := "let items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ");"
}
if (langToConvertTo = "groovy")
{
    itemsOut := "def items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ")"
}



}

if (line2 != "") and (line3 = "")
{
if (InStr(line2, keyWordEscpaeChar))
{
line2 := Chr(34) . line2 . Chr(34)
}
if (langToConvertTo = "py") or (langToConvertTo = "js")
{
itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "cpp")
{
itemsOut := "std::vector<std::string> items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}

if (langToConvertTo = "go")
{
    itemsOut := "items" . STR(AindexcharLength) . " := LoopParseFunc(" . line1 . ", " . line2 . ", " . Chr(34) . Chr(34) . ")"
}
if (langToConvertTo = "lua")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "cs")
{
    itemsOut := "List<string> items" . STR(AindexcharLength) . " = new List<string>(LoopParseFunc(" . line1 . ", " . line2 . "));"
}
if (langToConvertTo = "java")
{
    itemsOut := "String[] items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . Chr(34) . Chr(34) . ");"
}
if (langToConvertTo = "kt")
{
    itemsOut := "val items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "rb")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "nim")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "ahk")
{
    itemsOut := Chr(10)
}
if (langToConvertTo = "swift")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "dart")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}
if (langToConvertTo = "ts")
{
    itemsOut := "let items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
if (langToConvertTo = "groovy")
{
    itemsOut := "def items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ")"
}



}

if (line2 != "") and (line3 != "")
{
if (InStr(line2, keyWordEscpaeChar))
{
line2 := Chr(34) . line2 . Chr(34)
}
if (InStr(line3, keyWordEscpaeChar))
{
line3 := Chr(34) . line3 . Chr(34)
}

if (langToConvertTo = "py") or (langToConvertTo = "js")
{
itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "cpp")
{
itemsOut := "std::vector<std::string> items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ");"
}


if (langToConvertTo = "go")
{
    itemsOut := "items" . STR(AindexcharLength) . " := LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "lua")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "cs")
{
    itemsOut := "List<string> items" . STR(AindexcharLength) . " = new List<string>(LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . "));"
}
if (langToConvertTo = "java")
{
    itemsOut := "String[] items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ");"
}
if (langToConvertTo = "kt")
{
    itemsOut := "val items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "rb")
{
    itemsOut := "items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "nim")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "ahk")
{
    itemsOut := Chr(10)
    
}
if (langToConvertTo = "swift")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "dart")
{
    itemsOut := "var items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ");"
}
if (langToConvertTo = "ts")
{
    itemsOut := "let items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}
if (langToConvertTo = "groovy")
{
    itemsOut := "def items" . STR(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}

}



itemsOut := StrReplace(itemsOut, keyWordEscpaeChar, Chr(92))



}



if (langToConvertTo = "py")
{
var1out := itemsOut . Chr(10) . "for " . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . " in enumerate(items" . STR(AindexcharLength) . ", start=" . AHKlikeLoopsIndexedAt . "):"
}
if (langToConvertTo = "js")
{
var1out := itemsOut . Chr(10) . "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".length + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "cpp")
{
var1out := itemsOut . Chr(10) . "for (size_t " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".size() + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}

if (langToConvertTo = "go")
{
    var1out := itemsOut . Chr(10) . "for " . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . " := range items" . STR(AindexcharLength)
}
if (langToConvertTo = "lua")
{
    var1out := itemsOut . Chr(10) . "for " . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . " in ipairs(items" . STR(AindexcharLength) . ") do"
}
if (langToConvertTo = "cs")
{
    var1out := itemsOut . Chr(10) . "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".Count + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "java")
{
    var1out := itemsOut . Chr(10) . "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".length + " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "kt")
{
    var1out := itemsOut . Chr(10) . "for ((" . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . ") in items" . STR(AindexcharLength) . ".withIndex())"
}
if (langToConvertTo = "rb")
{
    var1out := itemsOut . Chr(10) . "for HTVM----HTVM_FOR_hsdufosyigdydtddy_FOR_HTVM_Ruby_HTVM---HTVM-For_Ruby---AA items" . STR(AindexcharLength) . ".each_with_index do |" . keyWordALoopField . "" . STR(AindexcharLength) . " , " . keyWordAIndex . "" . STR(AindexcharLength) . "|"
}
if (langToConvertTo = "nim")
{
    var1out := itemsOut . Chr(10) . "for " . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . " in items" . STR(AindexcharLength) . ":"
}
if (langToConvertTo = "ahk")
{

if (Trim(line2) = "") and (Trim(line3) = "")
{
var1out := "Loop, Parse, " . line1
}
if (Trim(line2) != "") and (Trim(line3) = "")
{
var1out := "Loop, Parse, " . line1 . ", " . StrReplace(StrReplace(line2, keyWordEscpaeChar, "\"), Chr(34) . "," . Chr(34), Chr(34) . "\," . Chr(34))
}
if (Trim(line2) != "") and (Trim(line3) != "")
{
var1out := "Loop, Parse, " . line1 . ", " . StrReplace(line2, keyWordEscpaeChar, "\") . ", " . StrReplace(line3, keyWordEscpaeChar, "\")
}

}
if (langToConvertTo = "swift")
{
    var1out := itemsOut . Chr(10) . "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " , " . keyWordALoopField . "" . STR(AindexcharLength) . ") in items" . STR(AindexcharLength) . ".enumerated()"
}
if (langToConvertTo = "dart")
{
    var1out := itemsOut . Chr(10) . "for (int " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".length; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "ts")
{
    var1out := itemsOut . Chr(10) . "for (let " . keyWordAIndex . "" . STR(AindexcharLength) . " = " . AHKlikeLoopsIndexedAt . "; " . keyWordAIndex . "" . STR(AindexcharLength) . " < items" . STR(AindexcharLength) . ".length; " . keyWordAIndex . "" . STR(AindexcharLength) . "++)"
}
if (langToConvertTo = "groovy")
{
    var1out := itemsOut . Chr(10) . "for (" . keyWordAIndex . "" . STR(AindexcharLength) . " in " . AHKlikeLoopsIndexedAt . "..<items" . STR(AindexcharLength) . ".size())"
}



nothing := ""
AindexcharLengthStr := nothing . STR(AindexcharLength) . nothing

;
;
theFixTextLoopLP := ""
if (langToConvertTo = "cpp")
{
theFixTextLoopLP := "std::string " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "js")
{
theFixTextLoopLP := "const " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "go")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "lua")
{
    theFixTextLoopLP := keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "]"
}
if (langToConvertTo = "cs")
{
    theFixTextLoopLP := "string " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "java")
{
    theFixTextLoopLP := "String " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "kt")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "rb")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "nim")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "ahk")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "swift")
{
    theFixTextLoopLP := Chr(10)
}
if (langToConvertTo = "dart")
{
    theFixTextLoopLP := "var " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "ts")
{
    theFixTextLoopLP := "let " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "];"
}
if (langToConvertTo = "groovy")
{
    theFixTextLoopLP := "def " . keyWordALoopField . "" . AindexcharLengthStr . " = items" . AindexcharLengthStr . "[" . keyWordAIndex . "" . AindexcharLengthStr . " - " . AHKlikeLoopsIndexedAt . "]"
}



htCodeAcurlyBraceAddSomeVrasFixLP := 1
haveWeEverUsedAloop := 1
if (langToConvertTo != "ahk") and (langToConvertTo != langFileExtension_2)
{
htCodeLoopfixa .= "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength) . Chr(10)
htCodeLoopfixa1 := "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . STR(AindexcharLength)
}
AindexcharLength++

if (langToConvertTo = langFileExtension_2)
{

if (usePythonicColonSyntax_2 = "on")
{
htCode .= Trim(keyWordLoopParse_2) . " " . StrReplace(var1, keyWordEscpaeChar, keyWordEscpaeChar_2) . ":`n"
}
else
{
htCode .= Trim(keyWordLoopParse_2) . " " . StrReplace(var1, keyWordEscpaeChar, keyWordEscpaeChar_2) . Chr(10)
}



}
else
{

htCode .= htCodeLoopfixa1 . Chr(10) . var1out . Chr(10)
}




}
else if (SubStrLastChars(Trim(A_LoopField), StrLen(keyWordInc)) = keyWordInc) or (SubStrLastChars(Trim(A_LoopField), StrLen(keyWordInc . ";")) = keyWordInc . ";") and (lineDone = 0)
{
if (useSemicolon = "on")
{
str1 := Trim(StringTrimRight(Trim(A_LoopField), StrLen(keyWordInc . ";")))
}
else
{
str1 := Trim(StringTrimRight(Trim(A_LoopField), StrLen(keyWordInc)))
}

if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= str1 . keyWordInc_2 . ";" . Chr(10)
}
else
{
htCode .= str1 . keyWordInc_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "py") {
    htCode .= str1 . " += 1" . Chr(10)
}
if (langToConvertTo = "js") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "go") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "lua") {
    htCode .= str1 . " = " . str1 . " + 1" . Chr(10)
}
if (langToConvertTo = "cs") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "java") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "kt") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "rb") {
    htCode .= str1 . " += 1" . Chr(10)
}
if (langToConvertTo = "nim") {
    htCode .= str1 . " += 1" . Chr(10)
}
if (langToConvertTo = "ahk") {
    htCode .= str1 . "++" . Chr(10)
}
if (langToConvertTo = "swift") {
    htCode .= str1 . " += 1" . Chr(10)
}
if (langToConvertTo = "dart") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "ts") {
    htCode .= str1 . "++;" . Chr(10)
}
if (langToConvertTo = "groovy") {
    htCode .= str1 . "++;" . Chr(10)
}




}
else if (SubStrLastChars(Trim(A_LoopField), StrLen(keyWordDec)) = keyWordDec) or (SubStrLastChars(Trim(A_LoopField), StrLen(keyWordDec . ";")) = keyWordDec . ";") and (lineDone = 0)
{
if (useSemicolon = "on")
{
str1 := Trim(StringTrimRight(Trim(A_LoopField), StrLen(keyWordDec . ";")))
}
else
{
str1 := Trim(StringTrimRight(Trim(A_LoopField), StrLen(keyWordDec)))
}

if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
htCode .= str1 . keyWordDec_2 . ";" . Chr(10)
}
else
{
htCode .= str1 . keyWordDec_2 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "py") {
    htCode .= str1 . " -= 1" . Chr(10)
}
if (langToConvertTo = "js") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "go") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "lua") {
    htCode .= str1 . " = " . str1 . " - 1`n"
}
if (langToConvertTo = "cs") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "java") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "kt") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "rb") {
    htCode .= str1 . " -= 1" . Chr(10)
}
if (langToConvertTo = "nim") {
    htCode .= str1 . " -= 1" . Chr(10)
}
if (langToConvertTo = "ahk") {
    htCode .= str1 . "--" . Chr(10)
}
if (langToConvertTo = "swift") {
    htCode .= str1 . " -= 1" . Chr(10)
}
if (langToConvertTo = "dart") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "ts") {
    htCode .= str1 . "--;" . Chr(10)
}
if (langToConvertTo = "groovy") {
    htCode .= str1 . "--;" . Chr(10)
}
}
else if (SubStr(StrLower(Trim(A_LoopField)), 1, StrLen(StrLower(keyWordInclude . " "))) = StrLower(keyWordInclude . " ")) and (langToConvertTo = langFileExtension_2)
{
htCode .= keyWordInclude_2 . " " . Trim(StringTrimLeft(Trim(A_LoopField), StrLen(StrLower(keyWordInclude) . " "))) . Chr(10)
}
else if (StrLower(A_LoopField) = StrLower(keyWordGlobal)) or (StrLower(A_LoopField) = StrLower(keyWordGlobal . ";"))
{
if (langToConvertTo = "ahk")
{
htCode .= "global`n"
}
}
else if (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordAwait))) = StrLower(keyWordAwait))
{
str1 := StringTrimLeft(A_LoopField, StrLen(keyWordAwait))
;MsgBox, % A_LoopField
lineDone := 1



fixExpertionLineFuncOnly := 1
if (langToConvertTo = langFileExtension_2)
{
if (useSemicolon_2 = "on")
{
str2 := expressionParserTranspiler(Trim(str1)) . ";"
}
else
{
str2 := expressionParserTranspiler(Trim(str1))
}


}
else
{
if (langToConvertTo = "py") or (langToConvertTo = "nim") or (langToConvertTo = "ahk") or (langToConvertTo = "go") or (langToConvertTo = "lua") or (langToConvertTo = "kt") or (langToConvertTo = "rb") or (langToConvertTo = "swift") or (langToConvertTo = "groovy") 
{
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}

}



str2 := expressionParserTranspiler(Trim(str1)) . ";"
if (langToConvertTo = "py") or (langToConvertTo = "nim") or (langToConvertTo = "ahk") or (langToConvertTo = "go") or (langToConvertTo = "lua") or (langToConvertTo = "kt") or (langToConvertTo = "rb") or (langToConvertTo = "swift") or (langToConvertTo = "groovy") 
{
if (SubStrLastChars(str2, 1) = ";")
{
StringTrimRight, str2, str2, 1
}
}


}
fixExpertionLineFuncOnly := 0

if (langToConvertTo = "js") or (langToConvertTo = "ts") or (langToConvertTo = langFileExtension_2)
{

if (langToConvertTo = langFileExtension_2)
{
htCode .= keyWordAwait_2 . str2 . Chr(10)
}
else
{
htCode .= "await " . str2 . Chr(10)
}

}
else
{
htCode .= str2 . Chr(10)
}
}
else if (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordGlobal))) = StrLower(keyWordGlobal))
{
str1 := StringTrimLeft(A_LoopField, StrLen(keyWordGlobal))
;MsgBox, % A_LoopField
str1 := StrReplace(str1, ";", "")
lineDone := 1
if (langToConvertTo = "py") or (langToConvertTo = "ahk") or (langToConvertTo = langFileExtension_2)
{
if (langToConvertTo = langFileExtension_2)
{
str2 := Trim(keyWordGlobal_2) . " " . str1
}
else
{
str2 := "global " . StrReplace(str1, ".", "_")
}
}
else
{
str2 := ""
}

htCode .= str2 . Chr(10)
}
else if (SubStr(StrLower(A_LoopField), 1, StrLen(keyWordFunc)) = StrLower(keyWordFunc)) or (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordAsync) . StrLower(keyWordFunc))) = StrLower(keyWordAsync) . StrLower(keyWordFunc)) and (InStr(StrLower(A_LoopField), " main(") = false) and (lineDone = 0)
{
lineDone := 1

if (SubStr(StrLower(A_LoopField), 1, StrLen(StrLower(keyWordAsync) . StrLower(keyWordFunc))) = StrLower(keyWordAsync) . StrLower(keyWordFunc))
{
; is async
int1 := 1
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(StrLower(keyWordAsync . keyWordFunc))))
}
else
{
; is async
int1 := 0
str1 := Trim(StringTrimLeft(A_LoopField, StrLen(StrLower(keyWordFunc))))
}


if (usePrefixTypeForTypeDefinition = "on")
{

str2 := Trim(StrSplit(str1, "(", 1))

; func body 
str1 := Trim(StringTrimLeft(str1, StrLen(str2)))
StringTrimRight, str1, str1, 1

; type of the func
str3 := Trim(StringTrimRight(str2, StrLen(StrSplit(str2, " ", countChars(str2, " ") + 1))))

; name of func
str2 := Trim(StrSplit(str2, " ", countChars(str2, " ") + 1))
}
if (usePostfixTypeForTypeDefinition = "on")
{
; name of func
str2 := Trim(StrSplit(str1, "(", 1))

; func body 
str1 := Trim(StringTrimLeft(str1, StrLen(str2)))

; type of the func
str3 := Trim(StrSplit(str1, ")", countChars(str1, ")") + 1))
StringTrimLeft, str3, str3, 1

str1 := Trim(StringTrimRight(str1, StrLen(str3) + 2))

}
StringTrimLeft, str1, str1, 1

str3 := Trim(str3)

if (Trim(str1) = "") {
    if (langToConvertTo = langFileExtension_2) {
        if (int1 = 1) { ; int1 1 = is async 0 = not async
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
            } else {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . str2 . "(): " . getFuncTypeConvert(str3) . Chr(10)
            }
        } else {
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
            } else {
                htCode .= keyWordFunc_2 . str2 . "(): " . getFuncTypeConvert(str3) . Chr(10)
            }
        }
    }

if (langToConvertTo = "cpp") {
    htCode .= getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
}

if (langToConvertTo = "py") {
    htCode .= "def " . str2 . "():" . Chr(10)
}

if (langToConvertTo = "js") {
    if (int1 = 1) { ; int1 1 = is async, 0 = not async
        htCode .= "async function " . str2 . "()" . Chr(10)
    } else {
        htCode .= "function " . str2 . "()" . Chr(10)
    }
}


; Go
if (langToConvertTo = "go") 
{

if (str3 = keyWordVoid)
{
    htCode .= "func " . str2 . "()" . Chr(10)
}
else
{
    htCode .= "func " . str2 . "() " . getFuncTypeConvert(str3) . Chr(10)
}

}
if (langToConvertTo = "lua")
{
    htCode .= "function " . str2 . "()" . Chr(10)
}
if (langToConvertTo = "cs")
{
    htCode .= "static " . getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
}
if (langToConvertTo = "java")
{
    htCode .= "public static " . getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
}
if (langToConvertTo = "kt")
{

if (str3 = keyWordVoid)
{
    htCode .= "fun " . str2 . "()" . Chr(10)
}
else
{
    htCode .= "fun " . str2 . "(): " . getFuncTypeConvert(str3) . Chr(10)
}

}
if (langToConvertTo = "rb")
{
    htCode .= "def " . str2 . "()" . Chr(10)
}
if (langToConvertTo = "nim")
{
if (str3 = keyWordVoid)
{
    htCode .= "proc " . str2 . "() =" . Chr(10)
}
else
{
    htCode .= "proc " . str2 . "(): " . getFuncTypeConvert(str3) . " =" . Chr(10)
}
}
if (langToConvertTo = "ahk")
{
    htCode .= str2 . "()" . Chr(10)
}
if (langToConvertTo = "swift")
{
if (str3 = keyWordVoid)
{
    htCode .= "func " . str2 . "()" . Chr(10)
}
else
{
    htCode .= "func " . str2 . "() -> " . getFuncTypeConvert(str3) . Chr(10)
}
}
if (langToConvertTo = "dart")
{
    htCode .= getFuncTypeConvert(str3) . " " . str2 . "()" . Chr(10)
}
if (langToConvertTo = "ts")
{
    if (int1 = 1) { ; int1 1 = is async, 0 = not async
        htCode .= "async function " . str2 . "(): " . getFuncTypeConvert(str3) . Chr(10)
    } else {
        htCode .= "function " . str2 . "(): " . getFuncTypeConvert(str3) . Chr(10)
    }
}





if (langToConvertTo = "groovy")
{
    htCode .= "def " . str2 . "()" . Chr(10)
}




} else {




str5 := ""
str6 := ""
str7 := ""
str8 := ""
str9 := ""
str10 := ""
str11 := ""
str12 := ""
str13 := ""
str14 := ""
str15 := ""
str16 := ""
str17 := ""
str18 := ""
str19 := ""
str20 := ""
Loop, Parse, str1, `,
{
;print("|" . Trim(A_LoopField) . "|")
if (InStr(Trim(A_LoopField), " "))
{
; there is space aka there is a type
if (InStr(A_LoopField, " " . Trim(keyWordAssign) . " ") = false)
{

if (usePrefixTypeForTypeDefinition = "on") 
{
; normal
str6 := Trim(A_LoopField)
str7 := getTheLastWord(str6)
str8 := getFuncTypeConvert(Trim(StringTrimRight(str6, StrLen(Trim(str7)) + 1)))
; str5 .= str8 . " " . str7 . Chr(10)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; save to str5
; str8 = the type
; str7 = variable name

if (langToConvertTo = langFileExtension_2) 
{
if (usePrefixTypeForTypeDefinition_2 = "on")
{
str5 .= str8 . " " . str7 . Chr(10)
}
else
{
str5 .= str7 . ": " . str8 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "py") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "js") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "go") {
str5 .= str7 . " " . str8 . Chr(10)
}
if (langToConvertTo = "lua") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "cs") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "java") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "kt") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "rb") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "nim") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "ahk") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "swift") {
str5 .= "_ " . str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "dart") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "ts") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "groovy") {
str5 .= str7 . Chr(10)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

}
else
{
; not normal
str6 := Trim(A_LoopField)
str7 := Trim(StrSplit(str6, ":", 1))
str8 := getFuncTypeConvert(Trim(StrSplit(str6, ":", 2)))
; str5 .= str7 . " :" . str8 . Chr(10)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; save to str5
; str8 = the type
; str7 = variable name


if (langToConvertTo = langFileExtension_2) 
{
if (usePrefixTypeForTypeDefinition_2 = "on")
{
str5 .= str8 . " " . str7 . Chr(10)
}
else
{
str5 .= str7 . ": " . str8 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "py") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "js") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "go") {
str5 .= str7 . " " . str8 . Chr(10)
}
if (langToConvertTo = "lua") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "cs") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "java") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "kt") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "rb") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "nim") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "ahk") {
str5 .= str7 . Chr(10)
}
if (langToConvertTo = "swift") {
str5 .= "_ " . str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "dart") {
str5 .= str8 . " " . str7 . Chr(10)
}
if (langToConvertTo = "ts") {
str5 .= str7 . ": " . str8 . Chr(10)
}
if (langToConvertTo = "groovy") {
str5 .= str7 . Chr(10)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

}


}
else
{
; optanal param
if (InStr(Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 1)), " "))
{
; there is a type


if (usePrefixTypeForTypeDefinition = "on") 
{
; normal
str6 := Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 1))
str9 := Trim(expressionParserTranspiler(Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 2))))

str7 := getTheLastWord(str6)

str8 := getFuncTypeConvert(Trim(StringTrimRight(str6, StrLen(Trim(str7)) + 1)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; optanal param ;;;;;;;;;;;;;;;;;
; save to str10
; str8 = the type
; str7 = variable name
; str9 = after the keyWordAssign


if (langToConvertTo = langFileExtension_2) 
{
if (usePrefixTypeForTypeDefinition_2 = "on")
{
str10 .= str8 . " " . str7 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
else
{
str10 .= str7 . ": " . str8 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "py") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "js") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "go") {
skipLeftCuleyForFuncPLS := 1
str10 .= str7 . " " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "lua") {
str10 .= str7 . " = " . str9 . Chr(10)
skipLeftCuleyForFuncPLS := 1
}
if (langToConvertTo = "cs") {
if (RegExMatch(str9, "^\d+(\.\d+)?$"))
{
str10 .= str8 . " " . str7 . " = " . str9 . "f" . Chr(10)
}
else
{
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}

}
if (langToConvertTo = "java") {
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
skipLeftCuleyForFuncPLS := 1
}
if (langToConvertTo = "kt") {
if (RegExMatch(str9, "^\d+(\.\d+)?$"))
{
str10 .= str7 . ": " . str8 . " = " . str9 . "f" . Chr(10)
}
else
{
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}

}
if (langToConvertTo = "rb") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "nim") {
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "ahk") {
str10 .= str7 . " := " . str9 . Chr(10)
}
if (langToConvertTo = "swift") {
str10 .= "_ " . str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "dart") {
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "ts") {
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "groovy") {
str10 .= str7 . " = " . str9 . Chr(10)
}



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; str10

; skipLeftCuleyForFuncPLS := 1
}
else
{
; not normal

str6 := Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 1))
str9 := Trim(expressionParserTranspiler(Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 2))))

str7 := Trim(StrSplit(str6, ":", 1))
str8 := getFuncTypeConvert(Trim(StrSplit(str6, ":", 2)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; optanal param ;;;;;;;;;;;;;;;;;
; save to str10
; str8 = the type
; str7 = variable name
; str9 = after the keyWordAssign


if (langToConvertTo = langFileExtension_2) 
{
if (usePrefixTypeForTypeDefinition_2 = "on")
{
str10 .= str8 . " " . str7 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
else
{
str10 .= str7 . ": " . str8 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
}
if (langToConvertTo = "cpp") 
{
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "py") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "js") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "go") {
skipLeftCuleyForFuncPLS := 1
str10 .= str7 . " " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "lua") {
str10 .= str7 . " = " . str9 . Chr(10)
skipLeftCuleyForFuncPLS := 1
}
if (langToConvertTo = "cs") {
if (RegExMatch(str9, "^\d+(\.\d+)?$"))
{
str10 .= str8 . " " . str7 . " = " . str9 . "f" . Chr(10)
}
else
{
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}

}
if (langToConvertTo = "java") {
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
skipLeftCuleyForFuncPLS := 1
}
if (langToConvertTo = "kt") {
if (RegExMatch(str9, "^\d+(\.\d+)?$"))
{
str10 .= str7 . ": " . str8 . " = " . str9 . "f" . Chr(10)
}
else
{
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}

}
if (langToConvertTo = "rb") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "nim") {
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "ahk") {
str10 .= str7 . " := " . str9 . Chr(10)
}
if (langToConvertTo = "swift") {
str10 .= "_ " . str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "dart") {
str10 .= str8 . " " . str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "ts") {
str10 .= str7 . ": " . str8 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "groovy") {
str10 .= str7 . " = " . str9 . Chr(10)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; str10

; skipLeftCuleyForFuncPLS := 1
}



}
else
{
; there is no type
str8 := Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 1))
str9 := Trim(expressionParserTranspiler(Trim(StrSplit(Trim(A_LoopField), " " . Trim(keyWordAssign) . " ", 2))))

; str10
; skipLeftCuleyForFuncPLS := 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; optanal param ;;;;;;;;;;;;;;;;;
; save to str10
; str8 = variable name
; str9 = after the keyWordAssign



if (langToConvertTo = langFileExtension_2) 
{
if (usePrefixTypeForTypeDefinition_2 = "on")
{
str10 .= str7 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
else
{
str10 .= str7 . " " . Trim(keyWordAssign_2) . " " . str9 . Chr(10)
}
}
if (langToConvertTo = "py") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "js") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "lua") {
str10 .= str7 . " = " . str9 . Chr(10)
skipLeftCuleyForFuncPLS := 1
}
if (langToConvertTo = "rb") {
str10 .= str7 . " = " . str9 . Chr(10)
}
if (langToConvertTo = "ahk") {
str10 .= str7 . " := " . str9 . Chr(10)
}
if (langToConvertTo = "groovy") {
str10 .= str7 . " = " . str9 . Chr(10)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



}
}
}
else
{
str5 .= Trim(A_LoopField) . Chr(10)
}
}

;print(str5)
;print(str10)

if (Trim(str5) != "")
{
StringTrimRight, str5, str5, 1
}
if (Trim(str10) != "")
{
StringTrimRight, str10, str10, 1
}

str5 := Trim(str5)
str10 := Trim(str10)

if (Trim(str5) != "") and (Trim(str10) != "")
{
Loop, Parse, str5, `n, `r
{
str11 .= A_LoopField . ", "
}


Loop, Parse, str10, `n, `r
{
str12 .= A_LoopField . ", "
}
StringTrimRight, str12, str12, 2

if (langToConvertTo = "dart")
{
str12 := "[" . str12 . "]"
}

if (langToConvertTo = "lua")
{

Loop, Parse, str12, `,
{
str14 .= Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . ", "
}
StringTrimRight, str14, str14, 2

str13 .= "{" . Chr(10)
Loop, Parse, str12, `,
{
str13 .= Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . " = " . Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . " or " . Trim(StrSplit(Trim(A_LoopField), " = ", 2)) . Chr(10)
}



str12 := str13

}



if (langToConvertTo = "go")
{

str14 := "__HTVM_V2_TO_GO_optionalParams__ ...interface{}"

str13 .= "{" . Chr(10) . " "

Loop, Parse, str12, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))
str17 := Trim(StrSplit(Trim(A_LoopField), " = ", 2))

str13 .= str16 . " := " . str17 . Chr(10)
}


Loop, Parse, str12, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))
str18 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 2))

; str16 = var name
; str18 = var type

str13 .= "if len(__HTVM_V2_TO_GO_optionalParams__) " . Chr(62) . " " . STR(A_Index) . Chr(10) . "{" . Chr(10) . str16 . " = __HTVM_V2_TO_GO_optionalParams__[" . STR(A_Index) . "].(" . str18 . ")" . Chr(10) . "}" . Chr(10)
}

str12 := str14

}





if (langToConvertTo = "java")
{
str14 := "Object... __HTVM_V2_TO_JAVA_optionalParams__"

str13 .= "{" . Chr(10)

Loop, Parse, str12, `,
{
str19 := Trim(A_LoopField)
str20 := "" 

Loop, Parse, str19, " "
{
if (A_Index = 3)
{
if (RegExMatch(A_LoopField, "^\d+(\.\d+)?$"))
{
str20 .= A_LoopField . "f "
}
else
{
str20 .= A_LoopField . " "
}
}
else
{
str20 .= A_LoopField . " "
}
}
StringTrimRight, str20, str20, 1
str13 .= Trim(str20) . ";" . Chr(10)
}


Loop, Parse, str12, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 2))
str17 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))

; str16 = var name
; str17 = type name

str13 .= "if (__HTVM_V2_TO_JAVA_optionalParams__.length " . Chr(62) . " " . STR(A_Index) . ") " . str16 . " = (" . str17 . ") __HTVM_V2_TO_JAVA_optionalParams__[" . STR(A_Index) . "];" . Chr(10)
}

str12 := str14
}






str11 .= str12


}

if (Trim(str5) != "") and (Trim(str10) = "")
{
Loop, Parse, str5, `n, `r
{
str11 .= A_LoopField . ", "
}
StringTrimRight, str11, str11, 2



}

if (Trim(str5) = "") and (Trim(str10) != "")
{
Loop, Parse, str10, `n, `r
{
str11 .= A_LoopField . ", "
}
StringTrimRight, str11, str11, 2

if (langToConvertTo = "dart")
{
str11 := "[" . str11 . "]"
}


if (langToConvertTo = "lua")
{

Loop, Parse, str11, `,
{
str14 .= Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . ", "
}
StringTrimRight, str14, str14, 2

str13 .= "{" . Chr(10)
Loop, Parse, str11, `,
{
str13 .= Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . " = " . Trim(StrSplit(Trim(A_LoopField), " = ", 1)) . " or " . Trim(StrSplit(Trim(A_LoopField), " = ", 2)) . Chr(10)
}



str11 := str13

}


if (langToConvertTo = "go")
{

str14 := "__HTVM_V2_TO_GO_optionalParams__ ...interface{}"

str13 .= "{" . Chr(10) . " "

Loop, Parse, str11, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))
str17 := Trim(StrSplit(Trim(A_LoopField), " = ", 2))

str13 .= str16 . " := " . str17 . Chr(10)
}


Loop, Parse, str11, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))
str18 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 2))

; str16 = var name
; str18 = var type

str13 .= "if len(__HTVM_V2_TO_GO_optionalParams__) " . Chr(62) . " " . STR(A_Index) . Chr(10) . "{" . Chr(10) . str16 . " = __HTVM_V2_TO_GO_optionalParams__[" . STR(A_Index) . "].(" . str18 . ")" . Chr(10) . "}" . Chr(10)
}

str11 := str14
}


if (langToConvertTo = "java")
{

str14 := "Object... __HTVM_V2_TO_JAVA_optionalParams__"

str13 .= "{" . Chr(10)

Loop, Parse, str11, `,
{
str19 := Trim(A_LoopField)
str20 := "" 

Loop, Parse, str19, " "
{
if (A_Index = 3)
{
if (RegExMatch(A_LoopField, "^\d+(\.\d+)?$"))
{
str20 .= A_LoopField . "f "
}
else
{
str20 .= A_LoopField . " "
}
}
else
{
str20 .= A_LoopField . " "
}
}
StringTrimRight, str20, str20, 1
str13 .= Trim(str20) . ";" . Chr(10)
}


Loop, Parse, str11, `,
{
str16 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 2))
str17 := Trim(StrSplit(Trim(StrSplit(Trim(A_LoopField), " = ", 1)), " ", 1))

; str16 = var name
; str17 = type name

str13 .= "if (__HTVM_V2_TO_JAVA_optionalParams__.length " . Chr(62) . " " . STR(A_Index) . ") " . str16 . " = (" . str17 . ") __HTVM_V2_TO_JAVA_optionalParams__[" . STR(A_Index) . "];" . Chr(10)
}

str11 := str14

}

}

;print(str11)


;;;;;;;; last put all
;;;;;;;; last put all
;;;;;;;; last put all


    if (langToConvertTo = langFileExtension_2) {
        if (int1 = 1) { ; int1 1 = is async 0 = not async
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10)
            } else {
                htCode .= keyWordAsync_2 . keyWordFunc_2 . str2 . "(" . str11 . "): " . getFuncTypeConvert(str3) . Chr(10)
            }
        } else {
            if (usePrefixTypeForTypeDefinition_2 = "on") {
                htCode .= keyWordFunc_2 . getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10)
            } else {
                htCode .= keyWordFunc_2 . str2 . "(" . str11 . "): " . getFuncTypeConvert(str3) . Chr(10)
            }
        }
    }

if (langToConvertTo = "cpp") {
    htCode .= getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10)
}

if (langToConvertTo = "py") {
    htCode .= "def " . str2 . "(" . str11 . "):" . Chr(10)
}

if (langToConvertTo = "js") {
    if (int1 = 1) { ; int1 1 = is async, 0 = not async
        htCode .= "async function " . str2 . "(" . str11 . ")" . Chr(10)
    } else {
        htCode .= "function " . str2 . "(" . str11 . ")" . Chr(10)
    }
}


; Go
if (langToConvertTo = "go") 
{

if (str3 = keyWordVoid)
{
    htCode .= "func " . str2 . "(" . str11 . ")" . Chr(10) . str13
}
else
{
    htCode .= "func " . str2 . "(" . str11 . ") " . getFuncTypeConvert(str3) . Chr(10) . str13
}

}
if (langToConvertTo = "lua")
{
    htCode .= "function " . str2 . "(" . str11 . ")" . Chr(10) . str13
}
if (langToConvertTo = "cs")
{
    htCode .= "static " . getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10)
}
if (langToConvertTo = "java")
{
    htCode .= "public static " . getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10) . str13
}
if (langToConvertTo = "kt")
{

if (str3 = keyWordVoid)
{
    htCode .= "fun " . str2 . "(" . str11 . ")" . Chr(10)
}
else
{
    htCode .= "fun " . str2 . "(" . str11 . "): " . getFuncTypeConvert(str3) . Chr(10)
}

}
if (langToConvertTo = "rb")
{
    htCode .= "def " . str2 . "(" . str11 . ")" . Chr(10)
}
if (langToConvertTo = "nim")
{
if (str3 = keyWordVoid)
{
    htCode .= "proc " . str2 . "(" . str11 . ") =" . Chr(10)
}
else
{
    htCode .= "proc " . str2 . "(" . str11 . "): " . getFuncTypeConvert(str3) . " =" . Chr(10)
}
}
if (langToConvertTo = "ahk")
{
    htCode .= str2 . "(" . str11 . ")" . Chr(10)
}
if (langToConvertTo = "swift")
{
if (str3 = keyWordVoid)
{
    htCode .= "func " . str2 . "(" . str11 . ")" . Chr(10)
}
else
{
    htCode .= "func " . str2 . "(" . str11 . ") -> " . getFuncTypeConvert(str3) . Chr(10)
}
}
if (langToConvertTo = "dart")
{
    htCode .= getFuncTypeConvert(str3) . " " . str2 . "(" . str11 . ")" . Chr(10)
}
if (langToConvertTo = "ts")
{
    htCode .= "function " . str2 . "(" . str11 . "): " . getFuncTypeConvert(str3) . Chr(10)
}
if (langToConvertTo = "groovy")
{
    htCode .= "def " . str2 . "(" . str11 . ")" . Chr(10)
}



;;;;;;;; last put all
;;;;;;;; last put all
;;;;;;;; last put all


}


if (langToConvertTo = langFileExtension_2) 
{
if (usePythonicColonSyntax_2 = "on")
{
StringTrimRight, htCode, htCode, 1
htCode .= ":" . Chr(10)
}
}

}
else if (InStr(StrLower(A_LoopField), " main(")) and (lineDone = 0)
{
lineDone := 1
javaMainFuncSeen := 1
csMainFuncSeen := 1
htCode .= A_LoopField . Chr(10)
}
else if (InStr(A_LoopField, " " . keyWordAssign . " ")) or (InStr(A_LoopField, " " . keyWordAssignAdd . " ")) or (InStr(A_LoopField, " " . keyWordAssignConcat . " ")) or (InStr(A_LoopField, " " . keyWordAssignSub . " ")) or (InStr(A_LoopField, " " . keyWordAssignMul . " ")) or (InStr(A_LoopField, " " . keyWordAssignDiv . " ")) or (InStr(A_LoopField, " " . keyWordAssignMod . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftLeft . " ")) or (InStr(A_LoopField, " " . keyWordAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitAnd . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitOr . " ")) or (InStr(A_LoopField, " " . keyWordAssignBitXor . " ")) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
;keyWordAssign
;keyWordAssignAdd
;keyWordAssignConcat
;keyWordAssignSub
;keyWordAssignMul
;keyWordAssignDiv
;keyWordAssignMod
;keyWordAssignShiftLeft
;keyWordAssignShiftRight
;keyWordLogicalAssignShiftRight
;keyWordAssignBitAnd
;keyWordAssignBitOr
;keyWordAssignBitXor

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars

;allVarsSoWeDontReDecVars
;allVarsSoWeDontReDecVars_FIX_uint8
;allVarsSoWeDontReDecVars_FIX_uint16
;allVarsSoWeDontReDecVars_FIX_uint32
;allVarsSoWeDontReDecVars_FIX_uint64
;allVarsSoWeDontReDecVars_FIX_int64
;allVarsSoWeDontReDecVars_FIX_float


if (InStr(A_LoopField, " " . keyWordAssign . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssign . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssign . " ", 2)
str10 := keyWordAssign
str11 := keyWordAssign_2
if (langToConvertTo = "ahk")
{
str12 := ":="
}
else
{
str12 := "="
}
}
else if (InStr(A_LoopField, " " . keyWordAssignAdd . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignAdd . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignAdd . " ", 2)
str10 := keyWordAssignAdd
str11 := keyWordAssignAdd_2
str12 := "+="
}
else if (InStr(A_LoopField, " " . keyWordAssignConcat . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignConcat . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignConcat . " ", 2)
str10 := keyWordAssignConcat
str11 := keyWordAssignConcat_2
if (langToConvertTo = "ahk")
{
str12 := ".="
}
else
{
str12 := "+="
}

}
else if (InStr(A_LoopField, " " . keyWordAssignSub . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignSub . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignSub . " ", 2)
str10 := keyWordAssignSub
str11 := keyWordAssignSub_2
str12 := "-="
}
else if (InStr(A_LoopField, " " . keyWordAssignMul . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignMul . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignMul . " ", 2)
str10 := keyWordAssignMul
str11 := keyWordAssignMul_2
str12 := "*="
}
else if (InStr(A_LoopField, " " . keyWordAssignDiv . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignDiv . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignDiv . " ", 2)
str10 := keyWordAssignDiv
str11 := keyWordAssignDiv_2
str12 := "/="
}
else if (InStr(A_LoopField, " " . keyWordAssignMod . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignMod . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignMod . " ", 2)
str10 := keyWordAssignMod
str11 := keyWordAssignMod_2
str12 := "%="
}
else if (InStr(A_LoopField, " " . keyWordAssignShiftLeft . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignShiftLeft . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignShiftLeft . " ", 2)
str10 := keyWordAssignShiftLeft
str11 := keyWordAssignShiftLeft_2
str12 := "<<="
}
else if (InStr(A_LoopField, " " . keyWordAssignShiftRight . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignShiftRight . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignShiftRight . " ", 2)
str10 := keyWordAssignShiftRight
str11 := keyWordAssignShiftRight_2
str12 := ">>="
}
else if (InStr(A_LoopField, " " . keyWordLogicalAssignShiftRight . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordLogicalAssignShiftRight . " ", 2)
str10 := keyWordLogicalAssignShiftRight
str11 := keyWordLogicalAssignShiftRight_2
str12 := ">>>="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitAnd . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitAnd . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitAnd . " ", 2)
str10 := keyWordAssignBitAnd
str11 := keyWordAssignBitAnd_2
str12 := "&="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitOr . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitOr . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitOr . " ", 2)
str10 := keyWordAssignBitOr
str11 := keyWordAssignBitOr_2
str12 := "|="
}
else if (InStr(A_LoopField, " " . keyWordAssignBitXor . " "))
{
str1 := StrSplit(A_LoopField, " " . keyWordAssignBitXor . " ", 1)
str6 := StrSplit(A_LoopField, " " . keyWordAssignBitXor . " ", 2)
str10 := keyWordAssignBitXor
str11 := keyWordAssignBitXor_2
str12 := "^="
}



str6 := Trim(expressionParserTranspiler(Trim(str6)))



if (SubStrLastChars(str6, 1) = ";")
{
StringTrimRight, str6, str6, 1
}
str1 := Trim(str1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
ALoopField := str1


if (InStr(ALoopField, " ") = false)
{
lineDone := 1
str1 := StrReplace(Trim(str1), ".", "_")
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str1)

if (langToConvertTo = langFileExtension_2) 
{
if (useSemicolon_2 = "on")
{
str4 := str1 . " " . str11 . " " . str6 . ";"
}
else
{
str4 := str1 . " " . str11 . " " . str6
}
}
if (langToConvertTo = "cpp") 
{
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "py") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "js") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "go") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "java") {

if (InStr(str1, "["))
{
; Convert arr[something] to arr.set(something, value);
str1 := RegExReplace(str1, "(\b[A-Za-z_]\w*)\s*\[(.*?)\]", "$1.set($2, ")
str4 := str1 . str6 . ");"
}
else
{
str4 := str1 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift") {
str4 := str1 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts") {
str4 := str1 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy") {
str4 := str1 . " " . str12 . " " . str6
}
htCode .= str4 . Chr(10)

}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordConst)) = keyWordConst) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordConst)))




Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordConst)))



str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)

if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}


if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " .  str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "let " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordConst_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordConst_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := "const " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
        str4 := "const " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "const " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{

str4 := "const " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := "final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "const " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := "final " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "const " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := "final " . str2 . " " . str12 . " " . str6
}

;;;;
}



htCode .= str4 . Chr(10)







}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordVar)) = keyWordVar) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{


str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordVar)))



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordVar)))



str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}

if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCode .= str4 . Chr(10)







}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordLet)) = keyWordLet) and (lineDone = 0)
{
lineDone := 1
if (usePostfixTypeForTypeDefinition = "off")
{


str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordLet)))



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(str1), StrLen(keyWordLet)))


str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}




if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {

        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := "local " . str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{



str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCode .= str4 . Chr(10)






}
else if (SubStr(Trim(ALoopField), 1, StrLen(keyWordDouble . " ")) = keyWordDouble . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordChar . " ")) = keyWordChar . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint8 . " ")) = keyWordUint8 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint16 . " ")) = keyWordUint16 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint32 . " ")) = keyWordUint32 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordUint64 . " ")) = keyWordUint64 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT . " ")) = keyWordINT . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordSTR . " ")) = keyWordSTR . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordBOOL . " ")) = keyWordBOOL . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordFLOAT . " ")) = keyWordFLOAT . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT8 . " ")) = keyWordINT8 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT16 . " ")) = keyWordINT16 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT32 . " ")) = keyWordINT32 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordINT64 . " ")) = keyWordINT64 . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayDefinition . " ")) = keyWordArrayDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfIntegersDefinition . " ")) = keyWordArrayOfIntegersDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfStringsDefinition . " ")) = keyWordArrayOfStringsDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfFloatingPointNumbersDefinition . " ")) = keyWordArrayOfFloatingPointNumbersDefinition . " ") or (SubStr(Trim(ALoopField), 1, StrLen(keyWordArrayOfBooleansDefinition . " ")) = keyWordArrayOfBooleansDefinition . " ") and (usePrefixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1



Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)

if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
if (langToConvertTo = langFileExtension_2) {

if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{
if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2  . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6
}

;;;;
}



htCode .= str4 . Chr(10)
}
else if (RegExMatch(Trim(str1), "^[a-zA-Z_][a-zA-Z_0-9]*:\s?.*$")) and (usePostfixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1




str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)



if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (useCurlyBracesSyntaxForArrayDef = "on")
{
if (SubStr(str6, 1, 1) = "{")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
else
{
if (SubStr(str6, 1, 1) = "[")
{
StringTrimRight, str6, str6, 1
StringTrimLeft, str6, str6, 1
}
}
if (langToConvertTo = langFileExtension_2) {


if (useCurlyBracesSyntaxForArrayDef_2 = "on")
{
str6 := "{" . str6 . "}"
}
else
{
str6 := "[" . str6 . "]"
}

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . " " . str12 . " {" . str6 . "};"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " [" . str6 . "]"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " " . str12 . " [" . str6 . "];"
}

if (langToConvertTo = "go") 
{

str4 := str2 . " := " . str3 . "{" . str6 . "}"
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " {" . str6 . "}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . " {" . str6 . "};"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>(List.of(" . str6 . "));"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = arrayListOf(" . str6 . ")"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = [" . str6 . "]"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[" . str6 . "]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := [" . str6 . "]"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = [" . str6 . "]"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [" . str6 . "];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [" . str6 . "];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = [" . str6 . "]"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
str6 := allVarsSoWeDontReDecVarsFixFunc(str6, str2)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6 . ";"
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . " " . str11 . " " . str6
        } else {
            str4 := str2 . ": " . str3 . " " . str11 . " " . str6
        }
    }
}

if (langToConvertTo = "cpp") {
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " " . str12 . " " . str6 . ";"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . " " . str12 . " " . str6 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "lua")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "cs")
{
if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "nim")
{

str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " " . str12 . " " . str6
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " " . str12 . " " . str6 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . " " . str12 . " " . str6 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " " . str12 . " " . str6 . ";"
}

;;;;
}



htCode .= str4 . Chr(10)
}




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; vars
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordVar)) = keyWordVar) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordVar)))


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)

}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordVar)))
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

}






if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2 . ";"
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordVar_2 . " " . str3 . " " . str2
        } else {
            str4 := keyWordVar_2 . " " . str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") 
{
if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
        str4 := "var " . str2 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " .  str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}



}
if (langToConvertTo = "java")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
        str4 := "var " . str2 . ": " . str3 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCode .= str4 . Chr(10)






allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordLet)) = keyWordLet) and (lineDone = 0)
{
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
if (usePostfixTypeForTypeDefinition = "off")
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordLet)))


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}
else
{
lineDone := 1

str1 := Trim(StringTrimLeft(Trim(A_LoopField), StrLen(keyWordLet)))
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type
allVarsSoWeDontReDecVars.add(str2)
}




if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2 . ";"
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := keyWordLet_2 . " " . str3 . " " . str2
        } else {
            str4 := keyWordLet_2 . " " . str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{

if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"

}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {

        str4 := "let " . str2 . ";"
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := "local " . str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}




if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}
}
if (langToConvertTo = "java")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    str4 := "let " . str2 . ": " . str3 . ";"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCode .= str4 . Chr(10)






allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (SubStr(Trim(A_LoopField), 1, StrLen(keyWordDouble . " ")) = keyWordDouble . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordChar . " ")) = keyWordChar . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint8 . " ")) = keyWordUint8 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint16 . " ")) = keyWordUint16 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint32 . " ")) = keyWordUint32 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordUint64 . " ")) = keyWordUint64 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT . " ")) = keyWordINT . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordSTR . " ")) = keyWordSTR . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordBOOL . " ")) = keyWordBOOL . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordFLOAT . " ")) = keyWordFLOAT . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT8 . " ")) = keyWordINT8 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT16 . " ")) = keyWordINT16 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT32 . " ")) = keyWordINT32 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordINT64 . " ")) = keyWordINT64 . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayDefinition . " ")) = keyWordArrayDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfIntegersDefinition . " ")) = keyWordArrayOfIntegersDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfStringsDefinition . " ")) = keyWordArrayOfStringsDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfFloatingPointNumbersDefinition . " ")) = keyWordArrayOfFloatingPointNumbersDefinition . " ") or (SubStr(Trim(A_LoopField), 1, StrLen(keyWordArrayOfBooleansDefinition . " ")) = keyWordArrayOfBooleansDefinition . " ") and (usePrefixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
str1 := Trim(A_LoopField)


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


Loop, Parse, str1, " "
{
str2 := A_LoopField
}
str3 := Trim(StringTrimRight(str1, StrLen(str2)))
str2 := Trim(str2)
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)

if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
        str4 := "let " . str2 . " = [];"
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{



if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}


}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
        str4 := "let " . str2 . ": " . str3 . " = [];"
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ";"
    } else {
        str4 := "let " . str2 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}



if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "java")
{


if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCode .= str4 . Chr(10)
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (RegExMatch(Trim(A_LoopField), "^[a-zA-Z_][a-zA-Z0-9_]*: [^:]*;?$")) and (usePostfixTypeForTypeDefinition = "on") and (lineDone = 0)
{
lineDone := 1
allVarsSoWeDontReDecVars_FIX_TOGGLE := 1
str1 := Trim(A_LoopField)
if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}


str2 := Trim(StrSplit(str1, ":", 1))
str3 := Trim(StrSplit(str1, ":", 2))
; str2 = var name
; str3 = type

allVarsSoWeDontReDecVars.add(str2)



if (str3 = keyWordArrayDefinition) or (str3 = keyWordArrayOfIntegersDefinition) or (str3 = keyWordArrayOfStringsDefinition) or (str3 = keyWordArrayOfFloatingPointNumbersDefinition) or (str3 = keyWordArrayOfBooleansDefinition)
{

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {

   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {

str4 := str3 . " " . str2 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = []"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . " = [];"
    } else {
        str4 := "let " . str2 . " = [];"
    }
}

if (langToConvertTo = "go") 
{

str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = {}"
}
if (langToConvertTo = "cs")
{


if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new " . str3 . "();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new " . str3 . "();"
}

}
if (langToConvertTo = "java")
{

if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = new ArrayList<>();"
}
else
{
str4 := "static " . str3 . " " . str2 . " = new ArrayList<>();"
}

}
if (langToConvertTo = "kt")
{
str4 := "val " . str2 . " = " . str3 . "()"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = []"
}
if (langToConvertTo = "nim")
{
str4 := "var " . str2 . ": " . str3 . " = @[]"
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := []"
}
if (langToConvertTo = "swift")
{
str4 := "var " . str2 . ": " . Trim(StrSplit(str3, " ", 2)) . " = []"
}
if (langToConvertTo = "dart")
{
str4 := str3 . " " . str2 . " = [];"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . " = [];"
    } else {
        str4 := "let " . str2 . ": " . str3 . " = [];"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = []"
}

}
else
{
;;;;
;;;;
;;;;
;;;;
;;;;

str3 := getFuncTypeConvert(str3)
if (langToConvertTo = langFileExtension_2) {
   if (useSemicolon_2 = "on") {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2 . ";"
        } else {
            str4 := str2 . ": " . str3 . ";"
        }
    } else {
        if (usePrefixTypeForTypeDefinition_2 = "on") {
            str4 := str3 . " " . str2
        } else {
            str4 := str2 . ": " . str3
        }
    }
}

if (langToConvertTo = "cpp") {
if (str3 = "double")
{
    str5 := "0.00"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8_t")
{
    str5 := "0"
}
if (str3 = "uint16_t")
{
    str5 := "0"
}
if (str3 = "uint32_t")
{
    str5 := "0"
}
if (str3 = "uint64_t")
{
    str5 := "0ULL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "std::string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.00f"
}
if (str3 = "int8_t")
{
    str5 := "0"
}
if (str3 = "int16_t")
{
    str5 := "0"
}
if (str3 = "int32_t")
{
    str5 := "0"
}
if (str3 = "int64_t")
{
    str5 := "0LL"
}


str4 := str3 . " " . str2 . " = " . str5 . ";"
}

if (langToConvertTo = "py") {
str4 := str2 . " = None"
}

if (langToConvertTo = "js") {
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ";"
    } else {
        str4 := "let " . str2 . ";"
    }
}

if (langToConvertTo = "go") 
{
str4 := "var " . str2 . " " . str3
}
if (langToConvertTo = "lua")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "cs")
{

if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "0"
}
if (str3 = "ushort")
{
    str5 := "0"
}
if (str3 = "uint")
{
    str5 := "0"
}
if (str3 = "ulong")
{
    str5 := "0UL"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "sbyte")
{
    str5 := "0"
}
if (str3 = "short")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}




if (csMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "java")
{


if (str3 = "double")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "byte")
{
    str5 := "(byte) 0"
}
if (str3 = "short")
{
    str5 := "(short) 0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "long")
{
    str5 := "0L"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "boolean")
{
    str5 := "false"
}
if (str3 = "float")
{
    str5 := "0.0f"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0L"
}


if (javaMainFuncSeen = 1)
{
str4 := str3 . " " . str2 . " = " . str5 . ";"
}
else
{
str4 := "static " . str3 . " " . str2 . " = " . str5 . ";"
}

}
if (langToConvertTo = "kt")
{
str4 := "var " . str2 . ": " . str3 . "? = null"
}
if (langToConvertTo = "rb")
{
str4 := str2 . " = nil"
}
if (langToConvertTo = "nim")
{

if (str3 = "float")
{
    str5 := "0.0"
}
if (str3 = "char")
{
    str5 := "'a'"
}
if (str3 = "uint8")
{
    str5 := "0"
}
if (str3 = "uint16")
{
    str5 := "0"
}
if (str3 = "uint32")
{
    str5 := "0"
}
if (str3 = "uint64")
{
    str5 := "0"
}
if (str3 = "int")
{
    str5 := "0"
}
if (str3 = "string")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "bool")
{
    str5 := "false"
}
if (str3 = "int8")
{
    str5 := "0"
}
if (str3 = "int16")
{
    str5 := "0"
}
if (str3 = "int32")
{
    str5 := "0"
}
if (str3 = "int64")
{
    str5 := "0"
}


str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "ahk")
{
str4 := str2 . " := " . Chr(34) . Chr(34)
}
if (langToConvertTo = "swift")
{
if (str3 = "Double")
{
    str5 := "0.00"
}
if (str3 = "Character")
{
    str5 := Chr(34) . "a" . Chr(34)
}
if (str3 = "UInt8")
{
    str5 := "0"
}
if (str3 = "UInt16")
{
    str5 := "0"
}
if (str3 = "UInt32")
{
    str5 := "0"
}
if (str3 = "UInt64")
{
    str5 := "0"
}
if (str3 = "Int")
{
    str5 := "0"
}
if (str3 = "String")
{
    str5 := Chr(34) . Chr(34)
}
if (str3 = "Bool")
{
    str5 := "false"
}
if (str3 = "Float")
{
    str5 := "0.00"
}
if (str3 = "Int8")
{
    str5 := "0"
}
if (str3 = "Int16")
{
    str5 := "0"
}
if (str3 = "Int32")
{
    str5 := "0"
}
if (str3 = "Int64")
{
    str5 := "0"
}



str4 := "var " . str2 . ": " . str3 . " = " . str5
}
if (langToConvertTo = "dart")
{
str4 := str3 . "? " . str2 . ";"
}
if (langToConvertTo = "ts")
{
    if (useInJavaScriptAlwaysUseVar = "on") {
        str4 := "var " . str2 . ": " . str3 . ";"
    } else {
        str4 := "let " . str2 . ": " . str3 . ";"
    }
}
if (langToConvertTo = "groovy")
{
str4 := str2 . " = null"
}

;;;;
}



htCode .= str4 . Chr(10)
allVarsSoWeDontReDecVars_FIX_TOGGLE := 0
}
else if (RegExMatch(Trim(A_LoopField), "^[a-zA-Z0-9_\.]+\(")) and (!(InStr(StrLower(A_LoopField), " main("))) and (lineDone = 0)
{
lineDone := 1
str1 := Trim(A_LoopField)


if (SubStrLastChars(str1, 1) = ";")
{
StringTrimRight, str1, str1, 1
}

fixExpertionLineFuncOnly := 0
if (langToConvertTo = langFileExtension_2)
{
if (useSemicolon_2 = "on")
{
str2 := expressionParserTranspiler(Trim(str1)) . ";"
}
else
{
str2 := expressionParserTranspiler(Trim(str1))
}


}
else
{
if (langToConvertTo = "py") or (langToConvertTo = "nim") or (langToConvertTo = "ahk") or (langToConvertTo = "go") or (langToConvertTo = "lua") or (langToConvertTo = "kt") or (langToConvertTo = "rb") or (langToConvertTo = "swift") or (langToConvertTo = "groovy") 
{
str2 := expressionParserTranspiler(Trim(str1))
}
else
{
str2 := expressionParserTranspiler(Trim(str1)) . ";"
}





}
fixExpertionLineFuncOnly := 0
htCode .= str2 . Chr(10)
}
else if (KeyWordsCommands(A_LoopField, "check", commands, langToConvertTo) = "true") and (lineDone = 0)
{
lineDone := 1
if (langToConvertTo = langFileExtension_2)
{
htCode .= A_LoopField . Chr(10)
}
else
{
out_KeyWordsCommands := KeyWordsCommands(A_LoopField, "transpile", commands, langToConvertTo)
htCode .= out_KeyWordsCommands . Chr(10)
}
}
else
{
;print("else else else " . A_LoopField)
; this is THE else
;;;;;;;;;;;;;;;;;;;

if (lineDone != 1)
{
if (skipLeftCuleyForFuncPLS != 1)
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(125))
{
htCode .= Chr(125) . Chr(10)
}
else
{
if (htCodeAcurlyBraceAddSomeVrasFixLP = 1) and (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
htCodeAcurlyBraceAddSomeVrasFixLP := 0


htCode .= A_LoopField . Chr(10) . theFixTextLoopLP . Chr(10)
}
else
{
if (htCodeAcurlyBraceAddSomeVrasFixNL = 1) and (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
htCodeAcurlyBraceAddSomeVrasFixNL := 0
htCode .= A_LoopField . Chr(10) . theFixTextLoopNL . Chr(10)
}
else
{
htCode .= A_LoopField . Chr(10)
}
}
}
}
else
{
skipLeftCuleyForFuncPLS := 0
}
}
}

}
StringTrimRight, htCode, htCode, 1



















;s
;s
;s
if (langToConvertTo != "ahk") and (langToConvertTo != langFileExtension_2)
{

;s

if (haveWeEverUsedAloop = 1)
{

StringTrimRight, htCodeLoopfixa, htCodeLoopfixa, 1

;OutputDebug, |%htCodeLoopfixa%|
AIndexLoopCurlyFix := 1
Loop, Parse, htCodeLoopfixa, `n, `r
{



sstr123 := A_LoopField
fixLoopLokingFor := A_LoopField
fixLoopLokingForfound := 1
out1 := StrSplit(sstr123 ,"|" , 1)
out2 := StrSplit(sstr123 ,"|" , 3)
;OutputDebug, |%out1%|
;OutputDebug, |%out2%|



wasAtanyIfsElseAddAIndexLoopCurlyFix := 0


if (out1 = "nl")
{

inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a := ""

Loop, Parse, htCode, `n, `r
{
;MsgBox, dsfgsdefgesrdg1
;MsgBox, |%A_LoopField%|`n|%fixLoopLokingFor%|


if (InStr(A_LoopField, fixLoopLokingFor)) and (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1

;MsgBox, do we came here 1
}

if (SubStr(Trim(A_LoopField), 1, 4) = "for ") and (weAreDoneHereCurly != 1) and (insdeAnestedLoopBAD != 1) and (fixLoopLokingForNum = 1)
{



s := StrSplit(A_LoopField ,"" . keyWordAIndex . "", 2)


out1z := s


s := StrSplit(out1z, " ", 1)
out1z := Trim(s)


;MsgBox, % out1z

;MsgBox, do we came here 2
fixLoopLokingForNum := 0
foundTheTopLoop++
inTarget := 1
;MsgBox, % A_LoopField
dontSaveStr := 1

ALoopField := A_LoopField


DeleayOneCuzOfLoopParse := 1


out4758686d86d86d86578991a .= ALoopField . Chr(10)
}

if (inTarget = 1) and (InStr(A_LoopField, Chr(123))) and (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) and (InStr(A_LoopField, Chr(123))) and (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) and (InStr(A_LoopField, Chr(125))) and (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (SubStr(Trim(A_LoopField), 1, 4) = "for ") and (insdeAnestedLoopBAD != 1) and (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) and (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) and (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) and (readyToEnd1 = 1) and (netsedCurly1 = 0) and (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1

}

out4758686d86d86d86578991a .= A_LoopField . Chr(10)
}


if (inTarget = 1) and (dontSaveStr != 1) and (fixLoopLokingForNum != 1) and (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField




; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "" . keyWordAIndex . "\d*", "" . keyWordAIndex . "" . out1z)




out4758686d86d86d86578991a .= ALoopField . Chr(10)

}


if (inTarget = 1) and (InStr(A_LoopField, Chr(125))) and (readyToEnd = 1) and (netsedCurly = 0) and (weAreDoneHereCurly = 0) and (dontSaveStr != 1) and (insdeAnestedLoopBAD != 1)
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1

}
dontSaveStr := 0

if (inTarget != 1) and (endBracketDOntPutThere != 1) and (insdeAnestedLoopBAD != 1)
{

out4758686d86d86d86578991a .= A_LoopField . Chr(10)

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
insdeAnestedLoopBAD := 0
}


}

strstysrstsytTRIMHELP := out4758686d86d86d86578991a
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1



htCode := strstysrstsytTRIMHELP

;MsgBox, % htCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}
else
{


inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a := ""

Loop, Parse, htCode, `n, `r
{

if (InStr(A_LoopField , fixLoopLokingFor)) and (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1
;MsgBox, do we came here 3
}

if (SubStr(Trim(A_LoopField), 1, 4) = "for ") and (weAreDoneHereCurly != 1) and (insdeAnestedLoopBAD != 1) and (fixLoopLokingForNum = 1)
{


s := StrSplit(A_LoopField ,"" . keyWordAIndex . "", 2)
out1z := s

s := StrSplit(out1z, " ", 1)
out1z := Trim(StrReplace(s, "|", ""))

;MsgBox, % out1z

fixLoopLokingForNum := 0
;MsgBox, do we came here 4
foundTheTopLoop++
inTarget := 1
;MsgBox, % A_LoopField
dontSaveStr := 1

ALoopField := A_LoopField

DeleayOneCuzOfLoopParse := 1

out4758686d86d86d86578991a .= ALoopField . Chr(10)
}

if (inTarget = 1) and (InStr(A_LoopField, Chr(123))) and (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) and (InStr(A_LoopField, Chr(123))) and (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) and (InStr(A_LoopField, Chr(125))) and (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (SubStr(Trim(A_LoopField), 1, 4) = "for ") and (insdeAnestedLoopBAD != 1) and (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) and (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) and (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) and (readyToEnd1 = 1) and (netsedCurly1 = 0) and (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1

}


out4758686d86d86d86578991a .= A_LoopField . Chr(10)

}


if (inTarget = 1) and (dontSaveStr != 1) and (fixLoopLokingForNum != 1) and (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField

; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "" . keyWordAIndex . "\d*", "" . keyWordAIndex . "" . out1z)
; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "" . keyWordALoopField . "\d*", "" . keyWordALoopField . "" . out1z)





out4758686d86d86d86578991a .= ALoopField . Chr(10)

}


if ((inTarget = 1) and (InStr(A_LoopField, Chr(125))) and (readyToEnd = 1) and (netsedCurly = 0) and (weAreDoneHereCurly = 0) and (dontSaveStr != 1) and (insdeAnestedLoopBAD != 1))
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1

}
dontSaveStr := 0

if (inTarget != 1) and (endBracketDOntPutThere != 1) and (insdeAnestedLoopBAD != 1)
{

out4758686d86d86d86578991a .= A_LoopField . Chr(10)

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
insdeAnestedLoopBAD := 0
}


}

strstysrstsytTRIMHELP := out4758686d86d86d86578991a
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1



htCode := strstysrstsytTRIMHELP

;MsgBox, % htCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}

if (wasAtanyIfsElseAddAIndexLoopCurlyFix = 1)
{
AIndexLoopCurlyFix++
wasAtanyIfsElseAddAIndexLoopCurlyFix := 0
}
}


out4758686d86dgt8r754444444 := ""
hold := 0
Loop, Parse, htCode, `n, `r
{
ignore := 0
if (SubStr(Trim(A_LoopField), 1, 4) = "for ")
{
if (hold = 1) and (holdText = A_LoopField)
{
ignore := 1
}
else
{
holdText := A_LoopField
hold := 1
}
}

if (!ignore)
{
out4758686d86dgt8r754444444 .= A_LoopField . Chr(10)
}
}

StringTrimRight, out4758686d86dgt8r754444444, out4758686d86dgt8r754444444, 1
htCode := out4758686d86dgt8r754444444


}


htCodeOut1234565432 := ""
Loop, Parse, htCode, `n, `r
{
out := A_LoopField
if (!InStr(out, "|itsaersdtgtgfergsdgfsegdfsedAA|"))
{
htCodeOut1234565432 .= out . Chr(10)
}
}


StringTrimRight, htCode, htCodeOut1234565432, 1
if (langToConvertTo = "rb")
{
htCode := StrReplace(htCode, "for HTVM----HTVM_FOR_hsdufosyigdydtddy_FOR_HTVM_Ruby_HTVM---HTVM-For_Ruby---AA ", "")
}


}




if (langToConvertTo = "go")
{
htCode := fixGoAindexUnseen(htCode)
}















}
else
{
htCode := code
}





;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

str ADD_ALL_programmingBlock_HTVMsyntax := ""

if (COUNT_programmingBlock_HTVMsyntax != 0)
{
isNotHTVMfileEXTRA_INT := 1
Loop, % COUNT_programmingBlock_HTVMsyntax
{
ADD_ALL_programmingBlock_HTVMsyntax .= programmingBlock_HTVMsyntax[A_Index] . Chr(10)
}
StringTrimRight, ADD_ALL_programmingBlock_HTVMsyntax, ADD_ALL_programmingBlock_HTVMsyntax, 1

ADD_ALL_programmingBlock_HTVMsyntax := compiler(ADD_ALL_programmingBlock_HTVMsyntax, allInstructionFile, "full", langToConvertToParam)
isNotHTVMfileEXTRA_INT := 0

isNotHTVMfile2 := 1
    Loop, % COUNT_programmingBlock_HTVMsyntax
    {
        htCode := StrReplace(htCode, "programmingBlock_HTVMsyntax-programmingBlock_HTVMsyntax-AA" . STR(A_Index + 1) . "AA", compiler(programmingBlock_HTVMsyntax[A_Index], allInstructionFile, "full", langToConvertToParam))
    }
isNotHTVMfile2 := 0
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;





if (isNotHTVMfile = 1)
{
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print(Chr(10) . isNotHTVMfileEXTRA_LIB_INFO . Chr(10))

print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed")
print(Chr(10) . isNotHTVMfileEXTRA_FUNCS_INFO . Chr(10))

print(Chr(10))
print("`nYou must include all the libs from under the section and MAKE SURE your code doesn't already use them!!!")
print("LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS LIBS")
print("`nYou must copy-paste all the funcs from under the section and MAKE SURE your code doesn't already use them!!!")
print("Funcs needed Funcs needed Funcs needed Funcs needed Funcs needed`n")
print("SCROLL UP!!!!!")
print("SCROLL UP!!!!!")
print("SCROLL UP!!!!!")
print("Note: If you dont see any libs or built-in functions that you need to add, then that means you dont have to!")

return htCode
}










str fixLuaAndRuby := ""
str fixLuaAndRubyHELP := ""
if (langToConvertTo = langFileExtension_2)
{



if (useCurlyBraces_2 = "off") and (useEnd_2 = "off")
{
htCode := indent_nested_curly_braces(htCode, 0)
}
else
{
htCode := indent_nested_curly_braces(htCode, 1)
}




if (useEnd_2 = "on") 
{

    Loop, Parse, htCode, `n, `r
    {
        if (Trim(A_LoopField) = keyWordCurlyBraceClose_2)
        {
            fixLuaAndRuby .= StrReplace(A_LoopField, keyWordCurlyBraceClose_2, Trim(keyWordEnd_2)) . Chr(10)
        }
        else if (SubStrLastChars(A_LoopField, 2) = " " . keyWordCurlyBraceOpen_2)
        {
            fixLuaAndRuby .= StringTrimRight(A_LoopField, 2) . Chr(10)
        }
        else
        {
            fixLuaAndRuby .= A_LoopField . Chr(10)
        }
    }
    StringTrimRight, htCode, fixLuaAndRuby, 1
}




;;;;;;;;;;;
;;;;;;;;;;;
}
else
{
;;;;;;;;;;;
;;;;;;;;;;;


if (langToConvertTo = "py") or (langToConvertTo = "nim")
{
htCode := indent_nested_curly_braces(htCode, 0)
}
else
{
htCode := indent_nested_curly_braces(htCode, 1)
}



if (langToConvertTo = "lua") or (langToConvertTo = "rb") or (langToConvertTo = langFileExtension_2)
{

if (langToConvertTo = langFileExtension_2) and (useEnd_2 = "on")
{
fixLuaAndRubyHELP := Trim(keyWordEnd_2)

    Loop, Parse, htCode, `n, `r
    {
        if (Trim(A_LoopField) = "}")
        {
            fixLuaAndRuby .= StrReplace(A_LoopField, "}", fixLuaAndRubyHELP) . Chr(10)
        }
        else if (SubStrLastChars(A_LoopField, 2) = " {")
        {
            fixLuaAndRuby .= StringTrimRight(A_LoopField, 2) . Chr(10)
        }
        else
        {
            fixLuaAndRuby .= A_LoopField . Chr(10)
        }
    }
    StringTrimRight, htCode, fixLuaAndRuby, 1

}
else
{
fixLuaAndRubyHELP := "end"

    Loop, Parse, htCode, `n, `r
    {
        if (Trim(A_LoopField) = "}")
        {
            fixLuaAndRuby .= StrReplace(A_LoopField, "}", fixLuaAndRubyHELP) . Chr(10)
        }
        else if (SubStrLastChars(A_LoopField, 2) = " {")
        {
            fixLuaAndRuby .= StringTrimRight(A_LoopField, 2) . Chr(10)
        }
        else
        {
            fixLuaAndRuby .= A_LoopField . Chr(10)
        }
    }
    StringTrimRight, htCode, fixLuaAndRuby, 1


}



}



}







arr str nextWordEndFix
str nextWordEndFixOut := ""



if (langToConvertTo = langFileExtension_2) and (useEnd_2 = "on")
{
Loop, Parse, htCode, `n, `r
{
nextWordEndFix.add(A_LoopField)
}
nextWordEndFix.add(" ")



Loop, Parse, htCode, `n, `r
{

if (Trim(A_LoopField) = Trim(keyWordEnd_2)) and (SubStr(Trim(nextWordEndFix[A_Index + 1]), 1, StrLen(Trim(keyWordElseIf_2) . " ")) = Trim(keyWordElseIf_2) . " ") or (Trim(A_LoopField) = Trim(keyWordEnd_2)) and ((Trim(nextWordEndFix[A_Index + 1]) = Trim(keyWordElse_2)) or (Trim(nextWordEndFix[A_Index + 1]) = Trim(keyWordElse_2 . ":")))
{
nextWordEndFixOut .= ""
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCode, nextWordEndFixOut, 1
}





if (langToConvertTo = "lua")
{
Loop, Parse, htCode, `n, `r
{
nextWordEndFix.add(A_LoopField)
}
nextWordEndFix.add(" ")



Loop, Parse, htCode, `n, `r
{

if (Trim(A_LoopField) = "end") and (SubStr(Trim(nextWordEndFix[A_Index + 1]), 1, StrLen("elseif ")) = "elseif ") or (Trim(A_LoopField) = "end") and (Trim(nextWordEndFix[A_Index + 1]) = "else")
{
nextWordEndFixOut .= ""
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCode, nextWordEndFixOut, 1
}



if (langToConvertTo = "rb")
{
Loop, Parse, htCode, `n, `r
{
nextWordEndFix.add(A_LoopField)
}
nextWordEndFix.add(" ")



Loop, Parse, htCode, `n, `r
{

if (Trim(A_LoopField) = "end") and (SubStr(Trim(nextWordEndFix[A_Index + 1]), 1, StrLen("elsif ")) = "elsif ") or (Trim(A_LoopField) = "end") and (Trim(nextWordEndFix[A_Index + 1]) = "else")
{
nextWordEndFixOut .= ""
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCode, nextWordEndFixOut, 1
}








arr str nextWordEndFixRB
nextWordEndFixOut := ""
if (langToConvertTo = "rb")
{
Loop, Parse, htCode, `n, `r
{
nextWordEndFixRB.add(A_LoopField)
}
nextWordEndFixRB.add(" ")



Loop, Parse, htCode, `n, `r
{

if (Trim(A_LoopField) = "end") and (SubStr(Trim(nextWordEndFixRB[A_Index + 1]), 1, StrLen("rescue ")) = "rescue ") or (Trim(A_LoopField) = "end") and (Trim(nextWordEndFixRB[A_Index + 1]) = "ensure")
{
nextWordEndFixOut .= ""
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCode, nextWordEndFixOut, 1
}



if (langToConvertTo = langFileExtension_2) and (useEnd_2 = "on")
{
Loop, Parse, htCode, `n, `r
{
nextWordEndFixRB.add(A_LoopField)
}
nextWordEndFixRB.add(" ")



Loop, Parse, htCode, `n, `r
{

if (Trim(A_LoopField) = Trim(keyWordEnd_2)) and (SubStr(Trim(nextWordEndFixRB[A_Index + 1]), 1, StrLen(Trim(keyWordCatch_2) . " ")) = Trim(keyWordCatch_2) . " ") or (Trim(A_LoopField) = Trim(keyWordEnd_2)) and (Trim(nextWordEndFixRB[A_Index + 1]) = Trim(keyWordFinally_2) or Trim(nextWordEndFixRB[A_Index + 1]) = Trim(keyWordFinally_2 . ":"))
{
nextWordEndFixOut .= ""
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}

}
StringTrimRight, htCode, nextWordEndFixOut, 1
}



nextWordEndFixOut := ""
if (langToConvertTo = "ahk")
{
Loop, Parse, htCode, `n, `r
{
if (SubStr(Trim(A_LoopField), 1, StrLen("Loop, Parse, ")) = "Loop, Parse, ")
{
nextWordEndFixOut .= StrReplace(A_LoopField, "{", Chr(10) . "{" . Chr(10)) . Chr(10)
}
else
{
nextWordEndFixOut .= A_LoopField . Chr(10)
}
}
StringTrimRight, htCode, nextWordEndFixOut, 1
}










if (langToConvertTo = "go")
{

arr str fixGoManGoIsSoAnnoyingBroooFurure
Loop, Parse, htCode, `n, `r
{
fixGoManGoIsSoAnnoyingBroooFurure.add(A_LoopField)
}
fixGoManGoIsSoAnnoyingBroooFurure.add(" ")

int fixGoManGoIsSoAnnoyingBroooSkip := 0
int fixGoManGoIsSoAnnoyingBroooCount := 0
str fixGoManGoIsSoAnnoyingBroooCountSpaceses := ""
str fixGoManGoIsSoAnnoyingBrooo := ""
Loop, Parse, htCode, `n, `r
{
if (Trim(A_LoopField) = "}") and (SubStr(Trim(fixGoManGoIsSoAnnoyingBroooFurure[A_Index + 1]), 1, StrLen("else if ")) = "else if ")
{
fixGoManGoIsSoAnnoyingBroooSkip := 1
fixGoManGoIsSoAnnoyingBroooCount := 0
Loop, Parse, fixGoManGoIsSoAnnoyingBroooFurure[A_Index + 1]
{
if (A_LoopField = " ")
{
fixGoManGoIsSoAnnoyingBroooCount++
}
else
{
break
}
}
fixGoManGoIsSoAnnoyingBroooCountSpaceses := ""
Loop, % fixGoManGoIsSoAnnoyingBroooCount
{
fixGoManGoIsSoAnnoyingBroooCountSpaceses .= " "
}

fixGoManGoIsSoAnnoyingBrooo .= fixGoManGoIsSoAnnoyingBroooCountSpaceses . "} " . Trim(fixGoManGoIsSoAnnoyingBroooFurure[A_Index + 1]) . Chr(10)
}
else
{

if (fixGoManGoIsSoAnnoyingBroooSkip = 0)
{
fixGoManGoIsSoAnnoyingBrooo .= A_LoopField . Chr(10)
}

fixGoManGoIsSoAnnoyingBroooSkip := 0


}
}
StringTrimRight, htCode, fixGoManGoIsSoAnnoyingBrooo, 1
}

if (langToConvertTo = "cs") or (langToConvertTo = "java")
{
htCode := fixCSandJAVAstaticBugForFunc(htCode)
}

if (COUNT_programmingBlock_InTheTranspiledLang != 0)
{
    Loop, % COUNT_programmingBlock_InTheTranspiledLang
    {
        htCode := StrReplace(htCode, "programmingBlock_InTheTranspiledLang-programmingBlock_InTheTranspiledLang-AA" . STR(A_Index + 1) . "AA", programmingBlock_InTheTranspiledLang[A_Index])
    }
}


if (langToConvertTo = "cpp")
{
    if (COUNT_programmingBlock_CPP != 0)
    {
        Loop, % COUNT_programmingBlock_CPP
        {
            htCode := StrReplace(htCode, "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA", programmingBlock_CPP[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_CPP != 0)
    {
        Loop, % COUNT_programmingBlock_CPP
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartCPP_2 . Chr(10) . programmingBlock_CPP[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndCPP_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "py")
{
    if (COUNT_programmingBlock_PY != 0)
    {
        Loop, % COUNT_programmingBlock_PY
        {
            htCode := StrReplace(htCode, "programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA", programmingBlock_PY[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_PY != 0)
    {
        Loop, % COUNT_programmingBlock_PY
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartPY_2 . Chr(10) . programmingBlock_PY[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndPY_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "js")
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", programmingBlock_JS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartJS_2 . Chr(10) . programmingBlock_JS[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndJS_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "go")
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", programmingBlock_GO[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartGO_2 . Chr(10) . programmingBlock_GO[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndGO_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "lua")
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", programmingBlock_LUA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartLUA_2 . Chr(10) . programmingBlock_LUA[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndLUA_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "cs")
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", programmingBlock_CS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartCS_2 . Chr(10) . programmingBlock_CS[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndCS_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "java")
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", programmingBlock_JAVA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartJAVA_2 . Chr(10) . programmingBlock_JAVA[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndJAVA_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "kt")
{
    if (COUNT_programmingBlock_KT != 0)
    {
        Loop, % COUNT_programmingBlock_KT
        {
            htCode := StrReplace(htCode, "programmingBlock_KT-programmingBlock_KT-AA" . STR(A_Index + 1) . "AA", programmingBlock_KT[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_KT != 0)
    {
        Loop, % COUNT_programmingBlock_KT
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_KT-programmingBlock_KT-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartKT_2 . Chr(10) . programmingBlock_KT[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndKT_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_KT-programmingBlock_KT-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "rb")
{
    if (COUNT_programmingBlock_RB != 0)
    {
        Loop, % COUNT_programmingBlock_RB
        {
            htCode := StrReplace(htCode, "programmingBlock_RB-programmingBlock_RB-AA" . STR(A_Index + 1) . "AA", programmingBlock_RB[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_RB != 0)
    {
        Loop, % COUNT_programmingBlock_RB
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_RB-programmingBlock_RB-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartRB_2 . Chr(10) . programmingBlock_RB[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndRB_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_RB-programmingBlock_RB-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "nim")
{
    if (COUNT_programmingBlock_NIM != 0)
    {
        Loop, % COUNT_programmingBlock_NIM
        {
            htCode := StrReplace(htCode, "programmingBlock_NIM-programmingBlock_NIM-AA" . STR(A_Index + 1) . "AA", programmingBlock_NIM[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_NIM != 0)
    {
        Loop, % COUNT_programmingBlock_NIM
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_NIM-programmingBlock_NIM-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartNIM_2 . Chr(10) . programmingBlock_NIM[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndNIM_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_NIM-programmingBlock_NIM-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "ahk")
{
    if (COUNT_programmingBlock_AHK != 0)
    {
        Loop, % COUNT_programmingBlock_AHK
        {
            htCode := StrReplace(htCode, "programmingBlock_AHK-programmingBlock_AHK-AA" . STR(A_Index + 1) . "AA", programmingBlock_AHK[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_AHK != 0)
    {
        Loop, % COUNT_programmingBlock_AHK
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_AHK-programmingBlock_AHK-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartAHK_2 . Chr(10) . programmingBlock_AHK[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndAHK_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_AHK-programmingBlock_AHK-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "swift")
{
    if (COUNT_programmingBlock_SWIFT != 0)
    {
        Loop, % COUNT_programmingBlock_SWIFT
        {
            htCode := StrReplace(htCode, "programmingBlock_SWIFT-programmingBlock_SWIFT-AA" . STR(A_Index + 1) . "AA", programmingBlock_SWIFT[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_SWIFT != 0)
    {
        Loop, % COUNT_programmingBlock_SWIFT
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_SWIFT-programmingBlock_SWIFT-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartSWIFT_2 . Chr(10) . programmingBlock_SWIFT[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndSWIFT_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_SWIFT-programmingBlock_SWIFT-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "dart")
{
    if (COUNT_programmingBlock_DART != 0)
    {
        Loop, % COUNT_programmingBlock_DART
        {
            htCode := StrReplace(htCode, "programmingBlock_DART-programmingBlock_DART-AA" . STR(A_Index + 1) . "AA", programmingBlock_DART[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_DART != 0)
    {
        Loop, % COUNT_programmingBlock_DART
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_DART-programmingBlock_DART-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartDART_2 . Chr(10) . programmingBlock_DART[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndDART_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_DART-programmingBlock_DART-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "ts")
{
    if (COUNT_programmingBlock_TS != 0)
    {
        Loop, % COUNT_programmingBlock_TS
        {
            htCode := StrReplace(htCode, "programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA", programmingBlock_TS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_TS != 0)
    {
        Loop, % COUNT_programmingBlock_TS
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartTS_2 . Chr(10) . programmingBlock_TS[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndTS_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}

if (langToConvertTo = "groovy")
{
    if (COUNT_programmingBlock_GROOVY != 0)
    {
        Loop, % COUNT_programmingBlock_GROOVY
        {
            htCode := StrReplace(htCode, "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA", programmingBlock_GROOVY[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_GROOVY != 0)
    {
        Loop, % COUNT_programmingBlock_GROOVY
        {
            if (langToConvertTo = langFileExtension_2)
            {
                htCode := StrReplace(htCode, "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA", keyWordCodeInTheTranspiledLangStartGROOVY_2 . Chr(10) . programmingBlock_GROOVY[A_Index] . Chr(10) . keyWordCodeInTheTranspiledLangEndGROOVY_2)
            }
            else
            {
                htCode := StrReplace(htCode, "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA", Chr(10))
            }
        }
    }
}


;;;;;;;;;;;
if (langToConvertTo = langFileExtension_2)
{
if (COUNT_programmingBlock_HTVM != 0)
{
    Loop, % COUNT_programmingBlock_HTVM
    {
        htCode := StrReplace(htCode, "programmingBlock_HTVM-programmingBlock_HTVM-AA" . STR(A_Index + 1) . "AA", programmingBlock_HTVM[A_Index])
    }
}

}
else
{
if (COUNT_programmingBlock_HTVM != 0)
{
    Loop, % COUNT_programmingBlock_HTVM
    {
        htCode := StrReplace(htCode, "programmingBlock_HTVM-programmingBlock_HTVM-AA" . STR(A_Index + 1) . "AA", Chr(10))
    }
}
}







areWeInAFuncFromInstructions := 0
areWeInAFuncFromInstructionsLineNum := 0

str funcLangHolder := ""
str funcNameHolder := ""
str funcLibsHolder := ""
str funcFuncHolder := ""
str funcDescriptionHolder := ""

arr str allFuncLang
arr str allFuncNames
arr str allFuncLibs
arr str allFuncs
arr str allfuncDescription


int correctLang := 0
Loop, Parse, instructions, `n, `r
{
if (Trim(A_LoopField) = "funcEND======================funcEND==============")
{
areWeInAFuncFromInstructions := 0
areWeInAFuncFromInstructionsLineNum := 0
if (correctLang = 1) and (InStr(htCode, Trim(funcNameHolder)))
{
;MsgBox, % funcFuncHolder
allFuncs.add(funcFuncHolder)
}
correctLang := 0
funcFuncHolder := ""
}

if (areWeInAFuncFromInstructions = 1)
{

if (areWeInAFuncFromInstructionsLineNum = 1)
{
; name of the func
StringTrimLeft, funcLangHolder, A_LoopField, 5
if (Trim(funcLangHolder) = langToConvertTo)
{
allFuncLang.add(Trim(funcLangHolder))
correctLang := 1
}
}
if (areWeInAFuncFromInstructionsLineNum = 2)
{
; name of the func
StringTrimLeft, funcNameHolder, A_LoopField, 5
if (correctLang = 1) and (InStr(htCode, Trim(funcNameHolder)))
{
allFuncNames.add(Trim(funcNameHolder))
}
}
if (areWeInAFuncFromInstructionsLineNum = 3)
{
; all libs
StringTrimLeft, funcLibsHolder, A_LoopField, 5
if (correctLang = 1) and (InStr(htCode, Trim(funcNameHolder)))
{
allFuncLibs.add(Trim(funcLibsHolder))
}
}
if (areWeInAFuncFromInstructionsLineNum = 4)
{
; func description
StringTrimLeft, funcDescriptionHolder, A_LoopField, 12
if (correctLang = 1) and (InStr(htCode, Trim(funcNameHolder)))
{
allfuncDescription.add(Trim(funcDescriptionHolder))
}
}
if (areWeInAFuncFromInstructionsLineNum >= 5)
{
; the full func
if (correctLang = 1) and (InStr(htCode, Trim(funcNameHolder)))
{
funcFuncHolder .= A_LoopField . Chr(10)
}
}

;MsgBox, % A_LoopField

areWeInAFuncFromInstructionsLineNum++
}


if (Trim(A_LoopField) = "func======================func==============")
{
areWeInAFuncFromInstructions := 1
areWeInAFuncFromInstructionsLineNum := 1
correctLang := 0
}



}

;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncNames
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncLibs
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncLang
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncs
;~ MsgBox, ===========================================================================



if (isNotHTVMfile2 = 0)
{

if (langToConvertTo = "cpp")
{
htCode := htCode . Chr(10) . "    return 0;" . Chr(10) . "}"
htCode := StrReplace(htCode, "int main(int argc, char* argv[]);", "int main(int argc, char* argv[])")
}
if (langToConvertTo = "js") and (useJavaScriptAmainFuncDef = "on")
{
htCode := htCode . "`n}`nmain();"
htCode := StrReplace(htCode, "async function main();", "async function main()")
htCode := StrReplace(htCode, "function async function main()", "async function main()")
}


if (langToConvertTo = "ts") and (useJavaScriptAmainFuncDef = "on")
{
    htCode := htCode . "`n}`nmain();"
    htCode := StrReplace(htCode, "async function main(): Promise<void>;", "async function main(): Promise<void>")
    htCode := StrReplace(htCode, "function async function main(): Promise<void>", "async function main(): Promise<void>")
}

if (langToConvertTo = "go")
{
    htCode := htCode . "`n}"
    htCode := StrReplace(htCode, "func main();", "func main()")
}

if (langToConvertTo = "cs")
{
    htCode := htCode . Chr(10) . "}" . Chr(10) . "}"
    htCode := StrReplace(htCode, "static void Main(string[] args);", "static void Main(string[] args)")
}

if (langToConvertTo = "java")
{
    htCode := htCode . Chr(10) . "}" . Chr(10) . "}"
    htCode := StrReplace(htCode, "public static void main(String[] args);", "public static void main(String[] args)")
}

if (langToConvertTo = "kt")
{
    htCode := htCode . "`n}"
    htCode := StrReplace(htCode, "fun main(args: Array<String>);", "fun main(args: Array<String>)")
}

if (langToConvertTo = "swift")
{
    htCode := htCode . "`n}`nmain()"
    htCode := StrReplace(htCode, "func main();", "func main()")
    htCode := StrReplace(htCode, "func main() ->", "func main()")
}

if (langToConvertTo = "dart")
{
    htCode := htCode . "`n}"
    htCode := StrReplace(htCode, "void main(List<String> arguments);", "void main(List<String> arguments)")
}




}

str jsHTMLdownCode := "</script>" . Chr(10) . "</body>" . Chr(10) . "</html>"

int includeLibsInCppIf := 0

str allFuncsToPutAtTop := Chr(10)
str allLibsToPutAtTop := ""

if (!(allFuncNames.size() <= 0))
{
Loop, % allFuncNames.size()
{
if (InStr(htCode, allFuncNames[A_Index]) . "(")
{
;MsgBox, % allFuncNames[A_Index]

allFuncsToPutAtTop .= allFuncs[A_Index] . Chr(10)

if (Trim(allFuncLibs[A_Index]) != "null")
{
allLibsToPutAtTop .= allFuncLibs[A_Index] . "|"
}

}
}
StringTrimRight, allLibsToPutAtTop, allLibsToPutAtTop, 1

str allLibsToPutAtTopTEMP := ""
Loop, Parse, allLibsToPutAtTop, "|"
{
allLibsToPutAtTopTEMP .= A_LoopField . Chr(10)
}
StringTrimRight, allLibsToPutAtTop, allLibsToPutAtTopTEMP, 1

includeLibsInCppIf := 1

if (langToConvertTo = "cpp")
{
allLibsToPutAtTop := "#include <iostream>" . Chr(10) . "#include <sstream>" . Chr(10) . "#include <string>" . Chr(10) . "#include <cstdint>" . Chr(10) . "#include <algorithm>" . Chr(10) . "#include <vector>" . Chr(10) . "#include <any>" . Chr(10) . "#include <optional>" . Chr(10) . allLibsToPutAtTop
}

if (langToConvertTo = "cs")
{
allLibsToPutAtTop := "using System;" . Chr(10) . "using System.Collections.Generic;" . Chr(10) . allLibsToPutAtTop
}

Sort, allLibsToPutAtTop, U

allLibsToPutAtTop := StrReplace(allLibsToPutAtTop, "~~~", Chr(10))


if (isNotHTVMfileEXTRA_INT = 1)
{
isNotHTVMfileEXTRA_LIB_INFO := allLibsToPutAtTop
isNotHTVMfileEXTRA_FUNCS_INFO := allFuncsToPutAtTop
}

if (isNotHTVMfile2 = 0)
{


if (langToConvertTo = "cs") or (langToConvertTo = "java")
{
    htCode := Chr(10) . allFuncsToPutAtTop . Chr(10) . htCode
}
else
{

    
    if (langToConvertTo != "js")
    {
    htCode := allLibsToPutAtTop . Chr(10) . allFuncsToPutAtTop . Chr(10) . htCode
    }
    else
    {
    if (useJavaScriptInAfullHTMLfile = "on")
    {
    htCode := allLibsToPutAtTop . Chr(10) . allFuncsToPutAtTop . Chr(10) . htCode
    }
    else
    {
    htCode := Chr(10) . allFuncsToPutAtTop . Chr(10) . htCode
    }
    }
    
}

}





if (langToConvertTo = "cs")
{
    htCode := allLibsToPutAtTop . Chr(10) . "class Program" . Chr(10) . "{" . Chr(10) . htCode
}
if (langToConvertTo = "java")
{
    htCode := allLibsToPutAtTop . Chr(10) . "import java.util.ArrayList;" . Chr(10) . "import java.util.List;" . Chr(10) . "import java.util.regex.Pattern;" . Chr(10) . "import java.util.*;" . Chr(10) . "public class Main" . Chr(10) . "{" . Chr(10) . htCode
}


if (langToConvertTo = "go")
{
    htCode := "package main" . Chr(10) . "import (" . Chr(10) . htCode
}




}










;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ospDic.add("end")
int size_ospDic := ospDic.size()
if (size_ospDic != 0) {
    Loop, % size_ospDic {
        ospDic.pop()
    }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ospDic1.add("end")
int size_ospDic1 := ospDic1.size()
if (size_ospDic1 != 0) {
    Loop, % size_ospDic1 {
        ospDic1.pop()
    }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ospDic2.add("end")
int size_ospDic2 := ospDic2.size()
if (size_ospDic2 != 0) {
    Loop, % size_ospDic2 {
        ospDic2.pop()
    }
}






Loop, % theIdNumOfThe34 {
    if (theIdNumOfThe34 = A_Index + 1) {
        if (langToConvertTo = langFileExtension_2) {
            if (keyWordEscpaeChar_2 = "\") and (keyWordEscpaeChar != "\") {
                htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(StrReplace(theIdNumOfThe34theVar[A_Index + 1], "\", "\\"), keyWordEscpaeChar, keyWordEscpaeChar_2) . Chr(34))
            } else {
                htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, keyWordEscpaeChar_2) . Chr(34))
            }
        } else {
            htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, "\") . Chr(34))
        }
    } else {
        if (langToConvertTo = langFileExtension_2) {
            if (keyWordEscpaeChar_2 = "\") and (keyWordEscpaeChar != "\") {
                htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(StrReplace(theIdNumOfThe34theVar[A_Index + 1], "\", "\\"), keyWordEscpaeChar, keyWordEscpaeChar_2))
            } else {
                htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, keyWordEscpaeChar_2))
            }
        } else {
            htCode := StrReplace(htCode, "ihuiuuhuuhtheidFor--asds" . str21 . "as--" . str21 . "theuhturtyphoutr--" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, "\"))
        }
    }
}

if (langToConvertTo = langFileExtension_2)
{
htCode := StrReplace(htCode, ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes, keyWordEscpaeChar_2 . Chr(34))
}
else
{
htCode := StrReplace(htCode, ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes, Chr(92) . Chr(34))
}

htCode := StrReplace(htCode, "std::string(" . Chr(34) . Chr(34) . ";),", "std::string(" . Chr(34) . Chr(34) . "),")







str jsHTMLupCode := "<!doctype html>" . Chr(10) . "<html lang=" . Chr(34) . "en" . Chr(34) . ">" . Chr(10) . "    <head>`n        <meta charset=" . Chr(34) . "UTF-8" . Chr(34) . " />" . Chr(10) . "        <meta name=" . Chr(34) . "viewport" . Chr(34) . " content=" . Chr(34) . "width=device-width, initial-scale=1.0" . Chr(34) . " />" . Chr(10) . "        <title>HTVM</title>" . Chr(10) . "        <style>" . Chr(10) . "            body {" . Chr(10) . "                background-color: #202020;" . Chr(10) . "                font-family:" . Chr(10) . "                    " . Chr(34) . "Open Sans" . Chr(34) . "," . Chr(10) . "                    -apple-system," . Chr(10) . "                    BlinkMacSystemFont," . Chr(10) . "                    " . Chr(34) . "Segoe UI" . Chr(34) . "," . Chr(10) . "                    Roboto," . Chr(10) . "                    Oxygen-Sans," . Chr(10) . "                    Ubuntu," . Chr(10) . "                    Cantarell," . Chr(10) . "                    " . Chr(34) . "Helvetica Neue" . Chr(34) . "," . Chr(10) . "                    Helvetica," . Chr(10) . "                    Arial," . Chr(10) . "                    sans-serif;" . Chr(10) . "            }" . Chr(10) . "        </style>" . Chr(10) . allLibsToPutAtTop . Chr(10) . "</head>" . Chr(10) . "    <body>" . Chr(10) . "<script>"


if (isNotHTVMfile2 = 0)
{

if (useJavaScriptInAfullHTMLfile = "on") and (langToConvertTo = "js")
{
htCode := jsHTMLupCode . Chr(10) . htCode . Chr(10) . jsHTMLdownCode
}

if (langToConvertTo = "cpp") and (includeLibsInCppIf = 0)
{
htCode := "#include <iostream>" . Chr(10) . "#include <sstream>" . Chr(10) . "#include <any>" . Chr(10) . "#include <string>" . Chr(10) . "#include <cstdint>" . Chr(10) . "#include <algorithm>" . Chr(10) . "#include <vector>" . Chr(10) .  Chr(10) . htCode
}
if (langToConvertTo = "cs")
{
htCode := Chr(10) . htCode
}
if (langToConvertTo = "ahk")
{
htCode := "#EscapeChar \" . Chr(10) . htCode
}
if (langToConvertTo = "swift")
{
htCode := "import Foundation" . Chr(10) . htCode
}





if (langToConvertTo = langFileExtension_2)
{
if (SubStr(htCode, 1, 1) = Chr(10))
{
StringTrimLeft, htCode, htCode, 1
}
}

}


;print(htCode)
return htCode
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

func void HTVMv2()
{
global allArgs
str argCODE := ""
str argCODEfile := ""
str argHTVMinstr := ""
str argLangTo := ""
str OUTCODE := "null"
int numOfParams := 0
HTVM_v2_HTVM()

if (noParams = true)
{
return
}

Loop, Parse, str0
{
str00 := Trim(A_LoopField)
StringTrimRight, str00, str00, 1
}


;print("HTVM v2")
if (HTVM_getLang_HTVM() = "cpp") or (HTVM_getLang_HTVM() = "py")
{

if (HTVM_getLang_HTVM() = "cpp")
{
;print("CPP")
}
if (HTVM_getLang_HTVM() = "py")
{
;print("PY")
}


Loop, Parse, allArgs, `n, `r
{
if (A_Index = 0)
{
numOfParams++
argCODE := FileRead(Trim(A_LoopField))
argCODEfile := Trim(A_LoopField)
}
else if (A_Index = 1)
{
numOfParams++
argHTVMinstr := Trim(A_LoopField)
}
else if (A_Index = 2)
{
numOfParams++
argLangTo := Trim(A_LoopField)
}
else
{
numOfParams++
argHTVMinstrMORE.add(Trim(A_LoopField))
}
}


;print("===============123431234===========start=====")
Loop, % argHTVMinstrMORE.size()
{
;print(argHTVMinstrMORE[A_Index])
}
;print("===============123431234==========end======")

;print(StringTrimRight(argCODEfile, StrLen(langFileExtension)) . langToConvertTo)

if (SubStrLastChars(argCODEfile, 4) = ".cpp") or (SubStrLastChars(argCODEfile, 3) = ".py") or (SubStrLastChars(argCODEfile, 3) = ".js") or (SubStrLastChars(argCODEfile, 3) = ".go") or (SubStrLastChars(argCODEfile, 4) = ".lua") or (SubStrLastChars(argCODEfile, 3) = ".cs") or (SubStrLastChars(argCODEfile, 5) = ".java") or (SubStrLastChars(argCODEfile, 3) = ".kt") or (SubStrLastChars(argCODEfile, 3) = ".rb") or (SubStrLastChars(argCODEfile, 4) = ".nim") or (SubStrLastChars(argCODEfile, 4) = ".ahk") or (SubStrLastChars(argCODEfile, 6) = ".swift") or (SubStrLastChars(argCODEfile, 5) = ".dart") or (SubStrLastChars(argCODEfile, 3) = ".ts") or (SubStrLastChars(argCODEfile, 7) = ".groovy") or (SubStrLastChars(argCODEfile, StrLen("." . Trim(StrSplit(StrReplace(FileRead(argHTVMinstr), Chr(13), ""), Chr(10), 2)))) = "." . Trim(StrSplit(StrReplace(FileRead(argHTVMinstr), Chr(13), ""), Chr(10), 2))) and (numOfParams = 2)
{



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

if (SubStrLastChars(argCODEfile, 4) = ".cpp") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "cpp")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".py") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "py")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".js") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "js")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".go") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "go")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 4) = ".lua")
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "lua")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".cs") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "cs")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 5) = ".java") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "java")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".kt") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "kt")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".rb")
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "rb")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 4) = ".nim") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "nim")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 4) = ".ahk") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "ahk")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 6) = ".swift") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "swift")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 5) = ".dart") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "dart")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 3) = ".ts") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "ts")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
} 
else if (SubStrLastChars(argCODEfile, 7) = ".groovy") 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", "groovy")
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
}
else if (SubStrLastChars(argCODEfile, StrLen("." . Trim(StrSplit(StrReplace(FileRead(argHTVMinstr), Chr(13), ""), Chr(10), 2)))) = "." . Trim(StrSplit(StrReplace(FileRead(argHTVMinstr), Chr(13), ""), Chr(10), 2))) 
{
    OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "notHTVM", Trim(StrSplit(StrReplace(FileRead(argHTVMinstr), Chr(13), ""), Chr(10), 2)))
    FileDelete(Trim(argCODEfile))
    FileAppend(OUTCODE, Trim(argCODEfile))
    return
}
else
{
;print("INVALID LANG!!!")
return
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





}
else
{


if (argLangTo != "")
{
OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "full", argLangTo)
}
else
{
OUTCODE := compiler(argCODE, Trim(FileRead(argHTVMinstr)), "full")
}
}   


print(StringTrimRight(argCODEfile, StrLen(langFileExtension)) . langToConvertTo)


if (langToConvertTo = "js") and (useJavaScriptInAfullHTMLfile = "on")
{
FileDelete(StringTrimRight(argCODEfile, StrLen(langFileExtension)) . "html")
FileAppend(OUTCODE, StringTrimRight(argCODEfile, StrLen(langFileExtension)) . "html")
}
else
{
FileDelete(StringTrimRight(argCODEfile, StrLen(langFileExtension)) . langToConvertTo)
FileAppend(OUTCODE, StringTrimRight(argCODEfile, StrLen(langFileExtension)) . langToConvertTo)
}


}

if (HTVM_getLang_HTVM() = "js")
{
;print("JS")
}
}

main
HTVMv2()
