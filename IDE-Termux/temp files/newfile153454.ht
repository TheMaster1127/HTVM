


func str callFunc(str funcParams)
{
; just test
return STR(Random(12345, 1234567))
}


func str parseFunc(str expresion)
{

print("=========================")
print(expresion)
print("=========================")


expresion := Trim(StrReplace(expresion, " ", ""))
expresion := Trim(StrReplace(expresion, "(", " ( "))
expresion := Trim(StrReplace(expresion, ")", " ) "))
expresion := Trim(StrReplace(expresion, "+", " + "))
expresion := Trim(StrReplace(expresion, "-", " - "))
expresion := Trim(StrReplace(expresion, "/", " / "))
expresion := Trim(StrReplace(expresion, "*", " * "))
expresion := Trim(StrReplace(expresion, ",", " , "))

arr str expresionForFuncLookInF

Loop, Parse, expresion, " "
{
expresionForFuncLookInF.add(A_LoopField)
}
expresionForFuncLookInF.add("")


int foundFunc := 0
int foundFunc2 := 0
int didWeSeeAfunc := 0
int countParentheses := 0
int countParenthesesOnceHelper := 0
int funcEndEnd := 0

int funcPosIndex1 := 0
int funcPosIndex2 := 0

str expresionReplaceHelper := ""
str expresionReplaceHelper1 := ""

Loop, 20
{

foundFunc := 0
foundFunc2 := 0
didWeSeeAfunc := 0
countParentheses := 0
countParenthesesOnceHelper := 0
funcEndEnd := 0
funcPosIndex1 := 0
funcPosIndex2 := 0


Loop, Parse, expresion, " "
{






if (foundFunc = 1)
{

if (RegExMatch(A_LoopField, "^[A-Za-z_][A-Za-z0-9_]*$")) and (expresionForFuncLookInF[A_Index + 1] = "(") and (foundFunc = 1)
{
foundFunc2 := 1
funcPosIndex1 := A_Index
countParentheses := 0
countParenthesesOnceHelper := 0
print("debug in: " + A_LoopField)
}


if (A_LoopField = "(")
{
countParentheses++
countParenthesesOnceHelper++
}
if (A_LoopField = ")")
{
countParentheses--
}
if (countParenthesesOnceHelper != 0)
{
if (countParentheses = 0)
{
funcEndEnd := 1
funcPosIndex2 := A_Index
break
}
}


}


; Check if the variable matches the regex pattern
if (RegExMatch(A_LoopField, "^[A-Za-z_][A-Za-z0-9_]*$")) and (expresionForFuncLookInF[A_Index + 1] = "(") and (foundFunc = 0)
{
foundFunc := 1
funcPosIndex1 := A_Index
;print(A_LoopField)
}





}

if (foundFunc != 1)
{
print("no more funcs")

expresion := Trim(expresion)

; eval
; eval
; eval
; eval
; eval
; eval

break
}

expresionReplaceHelper1 := ""
expresionReplaceHelper := ""

Loop, Parse, expresion, " "
{

if (A_Index >= funcPosIndex1) and (A_Index < funcPosIndex2)
{
expresionReplaceHelper1 .= A_LoopField . " "
print("found: " . A_LoopField)
}
else if (A_Index = funcPosIndex2)
{
expresionReplaceHelper1 .= A_LoopField . " "
print("found: " . A_LoopField)

expresionReplaceHelper .= await callFunc(Trim(expresionReplaceHelper1)) . " "
}
else
{
expresionReplaceHelper .= A_LoopField . " "
}


}
expresion := Trim(expresionReplaceHelper)

print("=========================")
print(expresion)
print("=========================")


if (InStr(Trim(expresion), " "))
{
continue
}
else
{
break
}


}


; eval too
; eval too
; eval too
; eval too
expresion := Trim(expresion)
; eval too



return expresion
}
main

print(await parseFunc("-5+func1(bar1, 5+5+(58+5/2--2), func2(VAR1234R, func3(func4(5))))"))

