cpp
ht
cmd,OUTVAR,INVAR,'param1,param2,param3|gg,INOUTVAR,param1|MsgBox,INVAR|Sort,INOUTVAR,'param1|hi,lineTranspile,w49g8seg8^(T*^R*^&(&#(dgweaws|StringTrimLeft,OUTVAR,INVAR,INVAR|StringTrimRight,OUTVAR,INVAR,INVAR
int
str
bool
float
int8
int16
int32
int64
if
else if
else
while
for
loop
loop,
loop, parse,
continue
break
func
await
:=
.=
+=
-=
*=
/=
+
.
=
!
>
<
>=
<=
or
and
!=
true
false
switch
case
defalut
throw
ErrorMsg
try
catch
finally
.add
.pop
.size
.insert
.remove
.index
arr
arr int
arr str
arr float
arr bool
var
let
const
return
end
global
;
/*
*/
`
1
A_Index
A_LoopField
main:
off
off
on
off
off
on
py
on
off
off

func======================func==============
lang: cpp
name: MsgBox
libs: #include <iostream>|#include <string>|#include <type_traits>
description: hello that is func mhm

// Print function that converts all types to string if needed
template <typename T>
void MsgBox(const T& value) {
    if constexpr (std::is_same_v<T, std::string>) {
        std::cout << value << std::endl;
    } else if constexpr (std::is_same_v<T, int>) {
        std::cout << std::to_string(value) << std::endl;
    } else if constexpr (std::is_same_v<T, float>) {
        std::cout << std::to_string(value) << std::endl;
    } else if constexpr (std::is_same_v<T, double>) {
        std::cout << std::to_string(value) << std::endl;
    } else if constexpr (std::is_same_v<T, size_t>) {
        std::cout << std::to_string(value) << std::endl;
    } else if constexpr (std::is_same_v<T, bool>) {
        std::cout << (value ? "1" : "0") << std::endl;
    } 
    #ifdef OneIndexedArray_DEFINED
    else if constexpr (std::is_base_of_v<OneIndexedArray<std::string>, T>) {
        for (size_t i = 1; i <= value.size(); ++i) {
            std::cout << value[i] << std::endl;
        }
    } else if constexpr (std::is_base_of_v<OneIndexedArray<int>, T>) {
        for (size_t i = 1; i <= value.size(); ++i) {
            std::cout << std::to_string(value[i]) << std::endl;
        }
    } else if constexpr (std::is_base_of_v<OneIndexedArray<float>, T>) {
        for (size_t i = 1; i <= value.size(); ++i) {
            std::cout << std::to_string(value[i]) << std::endl;
        }
    } else if constexpr (std::is_base_of_v<OneIndexedArray<double>, T>) {
        for (size_t i = 1; i <= value.size(); ++i) {
            std::cout << std::to_string(value[i]) << std::endl;
        }
    }
    #endif
    else {
        std::cout << "Unsupported type" << std::endl;
    }
}



funcEND======================funcEND==============



func======================func==============
lang: cpp
name: someFunchere
libs: null
description: you can coppy this section as much as you want for build in funcs

someFunchere()
{

}

funcEND======================funcEND==============

