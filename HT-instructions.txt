cpp
ht
cmd,OUTVAR,INVAR,'param1,param2,param3|gg,INOUTVAR,param1|MsgBox,INVAR|Sort,INOUTVAR|hi,lineTranspile,w49g8seg8^(T*^R*^&(&#(dgweaws
int 
str
bool
int8
int16
int32
int64
if
else if
else
while
for
loop
loop,
loop, parse,
continue
break
func
await
:=
.=
+=
-=
*=
/=
+
.
=
!
>
<
>=
<=
or
and
!=
yeah
nah
switch
case
defalut
throw
ErrorMsg
try
catch
finally
.add
.pop
.size
.insert
.remove
.index
arr
arr int
arr str
arr float
arr bool
var
let
const
return
end
global
;
/*
*/
`
0
A_Index
A_LoopField
main:
off
on
off
off
off
off
off
py
on
off
off

func======================func==============
name: HalloMan
libs: #include <string>|#include <regex>|#include <iostream>
params: str, int, (float)
description: hello that is func mhm

void HalloMan(const std::string& name, int age, float height = 0.0f) {
    // Use regex to check if the name contains only letters
    std::regex name_regex("^[A-Za-z]+$");
    
    if (std::regex_match(name, name_regex)) {
        std::cout << "Hallo, " << name << "!" << std::endl;
        std::cout << "Age: " << age << std::endl;
        std::cout << "Height: " << height << " meters" << std::endl;
    } else {
        std::cout << "Invalid name. Please use only letters." << std::endl;
    }
}

funcEND======================funcEND==============

func======================func==============
name: processInput
libs: #include <iostream>|#include <vector>|#include <algorithm>
params: undefined
description: hello that is func mhm

void processInput(const std::vector<int>& numbers) {
    if (numbers.empty()) {
        std::cout << "The list is empty." << std::endl;
        return;
    }

    // Copy the input vector to avoid modifying the original
    std::vector<int> sorted_numbers = numbers;

    // Sort the numbers
    std::sort(sorted_numbers.begin(), sorted_numbers.end());

    // Print the sorted numbers
    std::cout << "Sorted numbers: ";
    for (int num : sorted_numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    // Find and print the largest number
    int largest = sorted_numbers.back();
    std::cout << "The largest number is: " << largest << std::endl;
}

funcEND======================funcEND==============