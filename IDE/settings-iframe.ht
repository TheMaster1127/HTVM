let initData := ""
window.onmessage = event => initData = event.data;
main
await 
Sleep, 150
;await MsgBox(initData)
print(initData)
AScreenWidth := BuildInVars("A_ScreenWidth") - 10   
AScreenHeight := BuildInVars("A_ScreenHeight") - 10

Gui_Show("gui1", 5, 5, AScreenWidth, AScreenHeight, true, null, 0, null)


; AScreenWidth
; AScreenHeight

EditBoxDISPLAY_x := 5
EditBoxDISPLAY_y := 5
EditBoxDISPLAY_w := AScreenWidth - 20
EditBoxDISPLAY_h := AScreenHeight - 20 - 160

EditBoxUserInput_x := 5
EditBoxUserInput_y := AScreenHeight - 20 - 160 + 20
EditBoxUserInput_w := AScreenWidth - 20 - 160 
EditBoxUserInput_h := 150

SendButton_x := AScreenWidth - 20 - 160 + 20
SendButton_y := AScreenHeight - 20 - 160 + 20
SendButton_w := 150
SendButton_h := 150

Gui_Text("gui1", "topText", "HTVM IDE SETTINGS", 4, 4, "#FFFFFF", null, null)
Gui_Size_Id("gui1", "topText", 30)

;Gui_Edit("gui1", "EditBoxDISPLAY", "", EditBoxDISPLAY_x, EditBoxDISPLAY_y, EditBoxDISPLAY_w, EditBoxDISPLAY_h, "#121212", "#FFFFFF", null, null, null, null)
;Gui_Edit("gui1", "EditBoxUserInput", "", EditBoxUserInput_x, EditBoxUserInput_y, EditBoxUserInput_w, EditBoxUserInput_h, "#121212", "#FFFFFF", null, null, null, EditBoxUserInputCallBack)
Gui_Button("gui1", "SendButton", "Save/Close", SendButton_x, SendButton_y, SendButton_w, SendButton_h, "#4CAF50", "#FFFFFF", true, 5, null, send)
Gui_Size_Id("gui1", "SendButton", 24)

;Gui_Size_Id("gui1", "EditBoxDISPLAY", 16)
;Gui_Size_Id("gui1", "EditBoxUserInput", 20)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

let EditBoxHTVMpathSTR := ""

Gui_Button("gui1", "buttonCPP", "cpp", 5, 50, 100, 40, null, null, true, 5, null, buttonCPP)
Gui_Button("gui1", "buttonPY", "py", 110, 50, 100, 40, null, null, true, 5, null, buttonPY)
Gui_Button("gui1", "buttonJS", "js", 215, 50, 100, 40, null, null, true, 5, null, buttonJS)
Gui_Size_Id("gui1", "buttonCPP", 20)
Gui_Size_Id("gui1", "buttonPY", 20)
Gui_Size_Id("gui1", "buttonJS", 20)
Gui_Text("gui1", "explainButtonCPPPYJS", "explain here", 325, 55, "#FFFFFF", null, null)
Gui_Size_Id("gui1", "explainButtonCPPPYJS", 20)

Gui_Edit("gui1", "EditBoxHTVMpath", "Enter HTVM compiler path (e.g., %HTVM%/HTVM)", 5, 100, 650, 20, "#121212", "#FFFFFF", null, null, null, EditBoxHTVMpathCallBack)
Gui_Size_Id("gui1", "EditBoxHTVMpath", 15)
Gui_Edit("gui1", "EditBoxHTinstPath", "Enter HT-instructions.txt path (e.g., %HTVM%/HT-instructions.txt)", 5, 130, 650, 20, "#121212", "#FFFFFF", null, null, null, EditBoxHTVMpathCallBack)
Gui_Size_Id("gui1", "EditBoxHTinstPath", 15)

Gui_Text("gui1", "explainText2", "Do you want to run the code after HTVM converts it", 5, 160, "#FFFFFF", null, null)
Gui_Size_Id("gui1", "explainText2", 25)

Gui_Text("gui1", "explainText3", "F5 mode", 5, 190, "#FFFFFF", null, null)
Gui_Text("gui1", "explainText4", "Ctrl+F7 mode", 150, 190, "#FFFFFF", null, null)
Gui_Size_Id("gui1", "explainText3", 25)
Gui_Size_Id("gui1", "explainText4", 25)


Gui_Button("gui1", "buttonCPP1", "cpp", 5, 225, 100, 40, null, null, true, 5, null, buttonCPP1)
Gui_Button("gui1", "buttonPY1", "py", 110, 225, 100, 40, null, null, true, 5, null, buttonPY1)
Gui_Button("gui1", "buttonJS1", "js", 215, 225, 100, 40, null, null, true, 5, null, buttonJS1)
Gui_Size_Id("gui1", "buttonCPP1", 20)
Gui_Size_Id("gui1", "buttonPY1", 20)
Gui_Size_Id("gui1", "buttonJS1", 20)



MakeHotKey("Esc", handleEscapeKey)

func handleEscapeKey()
{
window.parent.postMessage("clo" . "se", "*")
}

func EditBoxHTVMpathCallBack(data)
{
EditBoxHTVMpathSTR := data
}

func buttonCPP(data)
{
GuiControl("disable", "gui1", "buttonCPP")
GuiControl("enable", "gui1", "buttonPY")
GuiControl("enable", "gui1", "buttonJS")
}
func buttonPY(data)
{
GuiControl("enable", "gui1", "buttonCPP")
GuiControl("disable", "gui1", "buttonPY")
GuiControl("enable", "gui1", "buttonJS")
}
func buttonJS(data)
{
GuiControl("enable", "gui1", "buttonCPP")
GuiControl("enable", "gui1", "buttonPY")
GuiControl("disable", "gui1", "buttonJS")
}

func buttonCPP1(data)
{
GuiControl("disable", "gui1", "buttonCPP1")
GuiControl("enable", "gui1", "buttonPY1")
GuiControl("enable", "gui1", "buttonJS1")
}
func buttonPY1(data)
{
GuiControl("enable", "gui1", "buttonCPP1")
GuiControl("disable", "gui1", "buttonPY1")
GuiControl("enable", "gui1", "buttonJS1")
}
func buttonJS1(data)
{
GuiControl("enable", "gui1", "buttonCPP1")
GuiControl("enable", "gui1", "buttonPY1")
GuiControl("disable", "gui1", "buttonJS1")
}


func send(data)
{
window.parent.postMessage("clo" . "se", "*")
}



