;Shunting Yard Algorithm


str str1 := ""
str str2 := ""
str str3 := ""
str str4 := ""
str str5 := ""
str str6 := ""
str str7 := ""
str str8 := ""
str str9 := ""
str str10 := ""

int int1 := 0
int int2 := 0
int int3 := 0
int int4 := 0
int int5 := 0
int int6 := 0
int int7 := 0




func arr str swapLast2StrArrayElement(arr str theStrArray)
{
    ; Check if the array has at least two elements
    if (theStrArray.size() < 2)
    {
        return theStrArray ; If not, return the array as is
    }

    ; Get the indices of the last two elements
    int lastIndex := theStrArray.size() - 1
    int secondLastIndex := lastIndex - 1

    ; Swap the last two elements
    str temp := theStrArray[lastIndex]
    theStrArray[lastIndex] := theStrArray[secondLastIndex]
    theStrArray[secondLastIndex] := temp

    ; Return the modified array
    return theStrArray
}

func arr str popFirstStrArrayElement(arr str theStrArray)
{
arr str out123
Loop, % theStrArray.size()
{
if (A_Index > 0)
{
out123.add(theStrArray[A_Index])
}
}

return out123
}

func str expresionEval(str expresion)
{
str expresionOut := ""


arr str holdingStack
arr str outputTemp
arr str solvingStack

str input := "0"

str arithmeticOperations := "-+*/"
int arithmeticOperationStrength := 0

str tempPopHoldingStack := ""
int indexOfexpresionLoop := 0

expresion := StrReplace(expresion, " ", "")

expresion := StrReplace(expresion, "-", " - ")
expresion := StrReplace(expresion, "+", " + ")
expresion := StrReplace(expresion, "*", " * ")
expresion := StrReplace(expresion, "/", " / ")

Loop, Parse, expresion, " "
{
indexOfexpresionLoop := A_Index + 1
input := A_LoopField
if (InStr(arithmeticOperations, input) = 0)
{
; numbers
;print(input)
outputTemp.add(input)
}
else
{
; arithmeticOperation
;print(input)


if (holdingStack.size() = 0)
{
holdingStack.add(input)
}
else
{

if (InStr(arithmeticOperations, input) = InStr(arithmeticOperations, holdingStack[holdingStack.size() - 1]))
{
outputTemp.add(input)
}
else if (InStr(arithmeticOperations, holdingStack[holdingStack.size() - 1]) < InStr(arithmeticOperations, input))
{
holdingStack.add(input)
}
else
{
; what do we do

; add the last 
Loop
{

if (holdingStack.size() > 0) and (InStr(arithmeticOperations, holdingStack[holdingStack.size() - 1]) > InStr(arithmeticOperations, input))
{
tempPopHoldingStack := holdingStack[holdingStack.size() - 1]
holdingStack.pop()
outputTemp.add(tempPopHoldingStack)
}
else
{
break
}
}

holdingStack.add(input)


}


; 2 else and 1 loop end
}
}
}



if (holdingStack.size() != 0) or (STR(holdingStack.size()) != "")
{
Loop, % holdingStack.size()
{
outputTemp.add(holdingStack[A_Index])
}
}

print(outputTemp)
 

Loop
{
if (outputTemp.size() = 0) or (STR(outputTemp.size()) = "")
{
break
}

tempPopHoldingStack := outputTemp[0]

outputTemp := await popFirstStrArrayElement(outputTemp)


solvingStack.add(tempPopHoldingStack)


if (InStr(arithmeticOperations, solvingStack[solvingStack.size() - 1]) != 0) 
{
solvingStack := await swapLast2StrArrayElement(solvingStack)

int1 := FLOAT(solvingStack[solvingStack.size() - 3])
str2 := solvingStack[solvingStack.size() - 2]
int3 := FLOAT(solvingStack[solvingStack.size() - 1])

solvingStack.pop()
solvingStack.pop()
solvingStack.pop()
if (str2 = "-")
{
int4 := int1 - int3
solvingStack.add(STR(int4))
}
if (str2 = "+")
{
int4 := int1 + int3
solvingStack.add(STR(int4))
}
if (str2 = "*")
{
int4 := int1 * int3
solvingStack.add(STR(int4))
}
if (str2 = "/")
{
int4 := int1 / int3
solvingStack.add(STR(int4))
}




}

}

expresionOut := solvingStack[solvingStack.size() - 1]

if (Trim(expresionOut) = "")
{
expresionOut := "null"
}

return expresionOut
}

main
print("Shunting Yard Algorithm")

str expresion := "1+2*4-3"
print(await expresionEval(expresion))

str testExpresions := "3+5|12-4|7*3|18/6|4+92|10-23|15+3-2|87-9|6+8/4|32+5|18-4/2|6/3+8|14-62|5+9/3|75-3|8+43|9/3+42|12+6*2-3|16-4/2+3|1+2*4-3"
str answersOfTheTestExpresions := "8|8|21|3|96|-13|16|78|8|37|16|10|-48|8|72|51|45|21|17|6"
int testIndexTestExpresions := 0
str TEMPanswersOfTheTestExpresions := ""

int DidWePassTheTestExpresions := 1
int DidWePassTheTestExpresionsCOUNT := 0
int DidWePassTheTestExpresionsCOUNTMAX := 0
Loop, Parse, testExpresions, "|"
{
DidWePassTheTestExpresionsCOUNT++
DidWePassTheTestExpresionsCOUNTMAX++
testIndexTestExpresions := A_Index
Loop, Parse, answersOfTheTestExpresions, "|"
{
if (A_Index = testIndexTestExpresions)
{
TEMPanswersOfTheTestExpresions := A_LoopField
}
}
print(STR(A_Index + 1) . " ===============================")
print(A_LoopField)
print(await expresionEval(A_LoopField))
if (FLOAT(await expresionEval(A_LoopField)) = FLOAT(TEMPanswersOfTheTestExpresions))
{
print("true")
}
else
{
print("false")
DidWePassTheTestExpresionsCOUNT--
DidWePassTheTestExpresions := 0
}

}


print("==================================")
print("==================================")
if (DidWePassTheTestExpresions = 0)
{
print("TestExpresions NOT PASSED!!! " . STR(DidWePassTheTestExpresionsCOUNT) . "/" . STR(DidWePassTheTestExpresionsCOUNTMAX))
}
else
{
print("TestExpresions PASSED!!!" . STR(DidWePassTheTestExpresionsCOUNT) . "/" . STR(DidWePassTheTestExpresionsCOUNTMAX))
}


