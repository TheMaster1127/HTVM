else if ((SubStr(Trim(A_LoopField), -2) = ");") or (SubStr(Trim(A_LoopField), -1) = ")")) and (!(InStr(A_LoopField, "int main(int argc, char* argv[])"))) and (!(InStr(A_LoopField, "async function main()"))) and (lineDone = 0) {
    lineDone := 1
    str1 := A_LoopField
    if (langToConvertTo = langFileExtension_2) {
        if (useSemicolon_2 = "on") {
            str2 := str1 . ";"
        }
        else
        str2 := StrReplace(str2, ";;", ";")
    } else {
        if (langToConvertTo = "py") or (langToConvertTo = "nim") or (langToConvertTo = "ahk") or (langToConvertTo = "go") or (langToConvertTo = "lua") or (langToConvertTo = "kt") or (langToConvertTo = "rb") or (langToConvertTo = "swift") or (langToConvertTo = "scala") or (langToConvertTo = "groovy") {
            str1 := StrReplace(str1, ";", "")
        }
        str2 := expressionParserTranspiler(Trim(str1)) . ";"
        if (langToConvertTo = "py") or (langToConvertTo = "nim") or (langToConvertTo = "ahk") or (langToConvertTo = "go") or (langToConvertTo = "lua") or (langToConvertTo = "kt") or (langToConvertTo = "rb") or (langToConvertTo = "swift") or (langToConvertTo = "scala") or (langToConvertTo = "groovy") {
            str2 := StrReplace(str2, ";", "")
        } else {
            str2 := StrReplace(str2, ";;", ";")
        }
    }
    htCode .= str2 . "`n"
}
