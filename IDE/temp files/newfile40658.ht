"programmingBlock_InTheTranspiledLang-programmingBlock_InTheTranspiledLang-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_KT-programmingBlock_KT-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_RB-programmingBlock_RB-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_NIM-programmingBlock_NIM-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_AHK-programmingBlock_AHK-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_SWIFT-programmingBlock_SWIFT-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_DART-programmingBlock_DART-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_SCALA-programmingBlock_SCALA-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_HTVM-programmingBlock_HTVM-AA" . STR(A_Index + 1) . "AA"
"programmingBlock_HTVMsyntax-programmingBlock_HTVMsyntax-AA" . STR(A_Index + 1) . "AA"


int COUNT_programmingBlock_InTheTranspiledLang := 0
int COUNT_programmingBlock_CPP := 0
int COUNT_programmingBlock_PY := 0
int COUNT_programmingBlock_JS := 0
int COUNT_programmingBlock_GO := 0
int COUNT_programmingBlock_LUA := 0
int COUNT_programmingBlock_CS := 0
int COUNT_programmingBlock_JAVA := 0
int COUNT_programmingBlock_KT := 0
int COUNT_programmingBlock_RB := 0
int COUNT_programmingBlock_NIM := 0
int COUNT_programmingBlock_AHK := 0
int COUNT_programmingBlock_SWIFT := 0
int COUNT_programmingBlock_DART := 0
int COUNT_programmingBlock_TS := 0
int COUNT_programmingBlock_SCALA := 0
int COUNT_programmingBlock_GROOVY := 0
int COUNT_programmingBlock_HTVM := 0
int COUNT_programmingBlock_HTVMsyntax := 0

;programmingBlock_InTheTranspiledLang
;programmingBlock_CPP
;programmingBlock_PY
;programmingBlock_JS
;programmingBlock_GO
;programmingBlock_LUA
;programmingBlock_CS
;programmingBlock_JAVA
;programmingBlock_KT
;programmingBlock_RB
;programmingBlock_NIM
;programmingBlock_AHK
;programmingBlock_SWIFT
;programmingBlock_DART
;programmingBlock_TS
;programmingBlock_SCALA
;programmingBlock_GROOVY
;programmingBlock_HTVM
;programmingBlock_HTVMsyntax

if (COUNT_programmingBlock_InTheTranspiledLang != 0)
{
    Loop, % COUNT_programmingBlock_InTheTranspiledLang
    {
        htCode := StrReplace(htCode, "programmingBlock_InTheTranspiledLang-programmingBlock_InTheTranspiledLang-AA" . STR(A_Index + 1) . "AA", programmingBlock_InTheTranspiledLang[A_Index])
    }
}

if (langToConvertTo = "cpp")
{
    if (COUNT_programmingBlock_CPP != 0)
    {
        Loop, % COUNT_programmingBlock_CPP
        {
            htCode := StrReplace(htCode, "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA", programmingBlock_CPP[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_CPP != 0)
    {
        Loop, % COUNT_programmingBlock_CPP
        {
            htCode := StrReplace(htCode, "programmingBlock_CPP-programmingBlock_CPP-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}


if (langToConvertTo = "py")
{
    if (COUNT_programmingBlock_PY != 0)
    {
        Loop, % COUNT_programmingBlock_PY
        {
            htCode := StrReplace(htCode, "programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA", programmingBlock_PY[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_PY != 0)
    {
        Loop, % COUNT_programmingBlock_PY
        {
            htCode := StrReplace(htCode, "programmingBlock_PY-programmingBlock_PY-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}


if (langToConvertTo = "js")
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", programmingBlock_JS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "go")
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", programmingBlock_GO[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "lua")
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", programmingBlock_LUA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "cs")
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", programmingBlock_CS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "java")
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", programmingBlock_JAVA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}


if (langToConvertTo = "js")
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", programmingBlock_JS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JS != 0)
    {
        Loop, % COUNT_programmingBlock_JS
        {
            htCode := StrReplace(htCode, "programmingBlock_JS-programmingBlock_JS-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "go")
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", programmingBlock_GO[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_GO != 0)
    {
        Loop, % COUNT_programmingBlock_GO
        {
            htCode := StrReplace(htCode, "programmingBlock_GO-programmingBlock_GO-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "lua")
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", programmingBlock_LUA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_LUA != 0)
    {
        Loop, % COUNT_programmingBlock_LUA
        {
            htCode := StrReplace(htCode, "programmingBlock_LUA-programmingBlock_LUA-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "cs")
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", programmingBlock_CS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_CS != 0)
    {
        Loop, % COUNT_programmingBlock_CS
        {
            htCode := StrReplace(htCode, "programmingBlock_CS-programmingBlock_CS-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "java")
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", programmingBlock_JAVA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_JAVA != 0)
    {
        Loop, % COUNT_programmingBlock_JAVA
        {
            htCode := StrReplace(htCode, "programmingBlock_JAVA-programmingBlock_JAVA-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "ts")
{
    if (COUNT_programmingBlock_TS != 0)
    {
        Loop, % COUNT_programmingBlock_TS
        {
            htCode := StrReplace(htCode, "programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA", programmingBlock_TS[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_TS != 0)
    {
        Loop, % COUNT_programmingBlock_TS
        {
            htCode := StrReplace(htCode, "programmingBlock_TS-programmingBlock_TS-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "scala")
{
    if (COUNT_programmingBlock_SCALA != 0)
    {
        Loop, % COUNT_programmingBlock_SCALA
        {
            htCode := StrReplace(htCode, "programmingBlock_SCALA-programmingBlock_SCALA-AA" . STR(A_Index + 1) . "AA", programmingBlock_SCALA[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_SCALA != 0)
    {
        Loop, % COUNT_programmingBlock_SCALA
        {
            htCode := StrReplace(htCode, "programmingBlock_SCALA-programmingBlock_SCALA-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

if (langToConvertTo = "groovy")
{
    if (COUNT_programmingBlock_GROOVY != 0)
    {
        Loop, % COUNT_programmingBlock_GROOVY
        {
            htCode := StrReplace(htCode, "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA", programmingBlock_GROOVY[A_Index])
        }
    }
}
else
{
    if (COUNT_programmingBlock_GROOVY != 0)
    {
        Loop, % COUNT_programmingBlock_GROOVY
        {
            htCode := StrReplace(htCode, "programmingBlock_GROOVY-programmingBlock_GROOVY-AA" . STR(A_Index + 1) . "AA", "`n")
        }
    }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if (COUNT_programmingBlock_HTVM != 0)
{
    Loop, % COUNT_programmingBlock_HTVM
    {
        htCode := StrReplace(htCode, "programmingBlock_HTVM-programmingBlock_HTVM-AA" . STR(A_Index + 1) . "AA", programmingBlock_HTVM[A_Index])
    }
}

if (COUNT_programmingBlock_HTVMsyntax != 0)
{
    Loop, % COUNT_programmingBlock_HTVMsyntax
    {
        htCode := StrReplace(htCode, "programmingBlock_HTVMsyntax-programmingBlock_HTVMsyntax-AA" . STR(A_Index + 1) . "AA", programmingBlock_HTVMsyntax[A_Index])
    }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;


