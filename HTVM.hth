MsgBox, Website is still in development!!!
Gui 5: Show, w240 h100
Gui 5: Font, s50
Gui 5: Add, Text, x5 y5 w230 h35, Loading...
Gui 5: Font, s15
Gui 5: Hide
Gui 5: Show
Sleep, 50
AScreenWidth := A_ScreenWidth - 20
AScreenHeight := A_ScreenHeight - 20
Gui 2: Show, w%AScreenWidth% h%AScreenHeight%
Gui 2: Add, Button, x5 y10 w140 h40 gButtonProjects vNewProject, Make a new project

currentProjectNum := 1

HTVM_HowManyProjects := ParseInt(StoreLocally("r", "HTVM-HowManyProjects"))
if (HTVM_HowManyProjects = null)
{

HTVM_HowManyProjects := 0
}
HTVM_HowManyProjectsButtonY := 60
Loop, % HTVM_HowManyProjects
{
projectName := StoreLocally("r", "HTVM-ProjectName" . A_Index)
AIndex := "a" . A_Index
if (Mod(A_Index, 2))
{
Gui 2: Add, Button, x5 y%HTVM_HowManyProjectsButtonY% v%AIndex% w140 h40 gButtonProjects, %projectName%
}
else
{
Gui 2: Add, Button, x160 y%HTVM_HowManyProjectsButtonY% v%AIndex% w140 h40 gButtonProjects, %projectName%
HTVM_HowManyProjectsButtonY := HTVM_HowManyProjectsButtonY + 50
}


}


Gui 5: Hide
return

ButtonProjects:
if (A_GuiControl = "NewProject")
{
HTVM_HowManyProjects := ParseInt(StoreLocally("r", "HTVM-HowManyProjects"))
if (HTVM_HowManyProjects = null)
{
HTVM_HowManyProjects := 0
}
InputBox, nameYouChose, Choose a name for your lang
if (nameYouChose = null)
{
MsgBox, You canceled
return
}
StoreLocally("s", "HTVM-ProjectName" . (HTVM_HowManyProjects + 1), nameYouChose)
StoreLocally("s", "HTVM-HowManyProjects", (HTVM_HowManyProjects + 1))
currentProjectNum := (HTVM_HowManyProjects + 1)
Gui 2: Hide
gosub, main
}
else
{
StringTrimLeft, AGuiControl, A_GuiControl, 1
currentProjectNum := AGuiControl
Gui 2: Hide
gosub, main
}
Return


main:
Gui, Show, w%A_ScreenWidth% h3840 +websitemode
Gui 5: Show
Sleep, 50

allData := ""


Loop, 86
{
EditText%A_Index% := ""
}

EditText76 := "on"
EditText77 := "on"
EditText78 := "off"
EditText79 := "off"
EditText80 := "on"
EditText81 := "off"
EditText83 := "on"
EditText84 := "on"
EditText85 := "off"

AScreenWidth := AScreenWidth - 30
AScreenWidth2 := AScreenWidth - 20
AScreenHeight := AScreenHeight - 30
AScreenHeight2 := AScreenHeight - 50
AScreenHeight3 := AScreenHeight2
AScreenHeight2 := AScreenHeight2 - 20

if (isMobileDevice())
{
Gui 3: Show, w%AScreenWidth% h%AScreenHeight%
Gui 3: Font, s12
Gui 3: Add, Edit, x10 y10 w%AScreenWidth2% h%AScreenHeight2% bg050505 cffffff vDisplayInfoData
GuiControl 3: Disable, DisplayInfoData
Gui 3: Font, s15
Gui 3: Add, Button, x10 y%AScreenHeight3% w%AScreenWidth2% h40 vButtonInfoOK gButtonInfoOK, OK
Gui 3: Hide
}
else
{
Gui 3: Show, w%AScreenWidth% h%AScreenHeight%
Gui 3: Font, s16
Gui 3: Add, Edit, x10 y10 w%AScreenWidth2% h%AScreenHeight2% bg050505 cffffff vDisplayInfoData
GuiControl 3: Disable, DisplayInfoData
Gui 3: Font, s15
Gui 3: Add, Button, x10 y%AScreenHeight3% w%AScreenWidth2% h40 vButtonInfoOK gButtonInfoOK, OK
Gui 3: Hide
}
ButtonINFOvHolder := ""

ToggleMoreBuildInFuncsTEXT := ""

if (isMobileDevice())
{
AScreenWidth := AScreenWidth + 25
Gui 4: Show, w%AScreenWidth% h%AScreenHeight%
Gui 4: Font, s15
Gui 4: Add, Text, x10 y10 w%AScreenWidth2% h50, Download the language you just created!
Gui 4: Font, s15
closeGui4X := AScreenWidth - 72
Gui 4: Add, Button, x%closeGui4X% y3 w69 h34 cffffff bgff0000 gGui4Close, close
Gui 4: Add, Toggle, x10 y65 vToggleMoreBuildInFuncsV gToggleMoreBuildInFuncs, Toggle all HTVM pre-made Build-in functions
Gui 4: Add, Button, x10 y115 w%AScreenWidth2% h40 bg121212 cffffff gButtonDownloadInstruction, Download HT-instructions.txt
Gui 4: Add, Button, x10 y165 w%AScreenWidth2% h40 bg121212 cffffff gButtonDownloadIDE, Download IDE.html
Gui 4: Hide
}
else
{
Gui 4: Show, w%AScreenWidth% h%AScreenHeight%
Gui 4: Font, s20
Gui 4: Add, Text, x10 y10 w%AScreenWidth2% h50, Download the language you just created!
Gui 4: Font, s15
closeGui4X := AScreenWidth - 72
Gui 4: Add, Button, x%closeGui4X% y3 w69 h34 cffffff bgff0000 gGui4Close, close
Gui 4: Add, Toggle, x10 y65 vToggleMoreBuildInFuncsV gToggleMoreBuildInFuncs, Toggle all HTVM pre-made Build-in functions
Gui 4: Add, Button, x10 y115 w%AScreenWidth2% h40 bg121212 cffffff gButtonDownloadInstruction, Download HT-instructions.txt
Gui 4: Add, Button, x10 y165 w%AScreenWidth2% h40 bg121212 cffffff gButtonDownloadIDE, Download IDE.html
Gui 4: Hide
}
document.getElementById('Gui4ToggleMoreBuildInFuncsV').click()


if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-76") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-76", "on")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-77") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-77", "on")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-78") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-78", "off")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-79") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-79", "off")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-80") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-80", "on")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-81") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-81", "off")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-83") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-83", "on")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-84") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-84", "on")
}
if (StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-85") = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-85", "off")
}



funcWeAreModifying := 1





if (isMobileDevice())
{
guiW := A_ScreenWidth - 90
}
else
{
guiW := A_ScreenWidth - 110
}

instructionDocumation := "lang to transpile to: Target programming language for transpilation.`nfile extention of the file: File extension for transpiled output files.`ncommands: List of supported operations or built-in functions.`nkeyWordINT: Defines an integer data type.`nkeyWordSTR: Defines a string data type.`nkeyWordBOOL: Defines a boolean data type.`nkeyWordFLOAT: Defines a floating data type.`nkeyWordINT8: Defines an 8-bit integer data type.`nkeyWordINT16: Defines a 16-bit integer data type.`nkeyWordINT32: Defines a 32-bit integer data type.`nkeyWordINT64: Defines a 64-bit integer data type.`nkeyWordIF: Used for conditional statements.`nkeyWordElseIf: Alternative condition in conditional statements.`nkeyWordElse: Defines a block of code for when no conditions are met.`nkeyWordWhileLoop: Defines a while loop.`nkeyWordForLoop: Defines a for loop.`nkeyWordLoopInfinite: Defines an infinite loop.`nkeyWordLoop: Defines a loop that iterates a specified number of times.`nkeyWordLoopParse: Defines a loop that parses through data or text.`nkeyWordContinue: Skips to the next iteration of the loop.`nkeyWordBreak: Exits a loop prematurely.`nkeyWordFunc: Defines a function or subroutine.`nkeyWordAwait: Await a func only in js.`nkeyWordVariablesAssignmentOperator: Operator for variable assignment.`nkeyWordConcatenationAssignmentOperator: Concatenates and assigns to a string variable.`nkeyWordAdditionAssignmentOperator: Adds to a numeric variable and assigns.`nkeyWordSubtractionAssignmentOperator: Subtracts from a numeric variable and assigns.`nkeyWordMultiplicationAssignmentOperator: Multiplies a numeric variable and assigns.`nkeyWordDivisionAssignmentOperator: Divides a numeric variable and assigns.`nkeyWordAdditionOperator: Adds two values or variables.`nkeyWordConcatenationOperator: Concatenates two strings or variables.`nkeyWordEqualOperator: Checks if two values or variables are equal.`nkeyWordNotOperator: Negates a boolean value or condition.`nkeyWordGreaterThanOperator: Checks if one value is greater than another.`nkeyWordLessThanOperator: Checks if one value is less than another.`nkeyWordGreaterThanOrEqualToOperator: Checks if one value is greater than or equal to another.`nkeyWordLessThanOrEqualToOperator: Checks if one value is less than or equal to another.`nkeyWordOrOperator: Combines two boolean conditions (true if either is true).`nkeyWordAndOperator: Combines two boolean conditions (true if both are true).`nkeyWordNotEqualToOperator: Checks if two values or variables are not equal.`nkeyWordTrue: Its the true boolean value.`nkeyWordFalse: Its the false boolean value.`nkeyWordSwitch: The switch statement is a type of selection control mechanism.`nkeyWordSwitchCase: The switch case is a type of selection control mechanism used within the switch statement.`nkeyWordSwitchDefault: The default case in a switch statement provides a fallback option when no case matches.`nkeyWordThrow: Used to raise an exception, signaling an error or special condition.`nkeyWordErrorMsg: Placeholder for a variable or method that stores or retrieves error messages.`nkeyWordTry: Block where code that might throw exceptions is placed; used for handling potential errors.`nkeyWordCatch: Block that handles exceptions thrown by the try block, allowing for error recovery.`nkeyWordFinally: Block that executes after try and catch, regardless of whether an exception was thrown or not. NOT SUPPORTED IN C++`nkeyWordArrayAppend: Method to add an element to the end of a collection (e.g., list or array).`nkeyWordArrayPop: Method to remove and return the last element of a collection (e.g., stack or list).`nkeyWordArraySize: Method that returns the number of elements in a collection (e.g., array, list, or vector).`nkeyWordArrayInsert: Method to add an element at a specific position in a collection (e.g., list or array).`nkeyWordArrayRemove: Method to remove an element from a collection by its value or index (e.g., list or array).`nkeyWordArrayIndexOf: Method that returns the index of the first occurrence of an element, or -1 if not found.`nkeyWordArrayDefinition: Defines an array data structure.`nkeyWordArrayOfIntegersDefinition: Defines an array of integers.`nkeyWordArrayOfStringsDefinition: Defines an array of strings.`nkeyWordArrayOfFloatingPointDefinition: Defines an array of floating-point numbers.`nkeyWordArrayOfBooleansDefinition: Defines an array of booleans.`nkeyWordJavaScriptVar: Use var for variable declarations ONLY in javascript.`nkeyWordJavaScriptLet: Use let for block-scoped variables ONLY in javascript.`nkeyWordJavaScriptConst: Use const for block-scoped, unchangeable variables ONLY in javascript.`nkeyWordReturnStatement: Returns a value from a function or exits a subroutine.`nkeyWordEnd: Indicates the end of a code block.`nkeyWordGlobal: Global in Python allows variables inside functions to be accessed and modified globally.`nkeyWordComment: Starts a single-line comment.`nkeyWordCommentOpenMultiLine: Opens a multiline comment.`nkeyWordCommentCloseMultiLine: Closes a multiline comment.`nkeyWordEscpaeChar: Escapes special characters in strings or identifiers.`nAHKlikeLoopsIndexedAt: Specifies the starting index for the AHK-like loop, such as 1-indexed, 0-indexed, or any custom value.`nkeyWordAIndex: Represents the current index of the loop. It can be customized based on the indexing method and renamed using configuration settings.`nkeyWordALoopField: Represents the current value or field in the loop. It can be renamed according to user preferences through configuration. `nkeyWordMainLabel: This is the main label where the main function will be inserted in the transpiled language.`nuseFuncKeyWord: This option allows you to use a keyword to define functions when transpiling to Python (py), JavaScript (js), or C++ (cpp). If it is turned off, you won't need to use a function definition keyword for Python and JavaScript. If you select C++ as your language, this option will always be on and cannot be turned off. Additionally, if you have useFuncKeyWord turned off and then switch to C++, it will automatically be turned on. When useFuncKeyWord is off, useCurlyBraces will automatically be toggled on, and if you turn off useFuncKeyWord, it will also toggle off useEnd if it was on.`nuseCurlyBraces: This option allows you to use curly braces to define code blocks. If useCurlyBraces is untoggled it will automatically toggle useFuncKeyWord on. When useCurlyBraces is enabled, it will automatically untoggle useEnd if it was on. This ensures that both methods of defining code blocks do not conflict.`nuseEnd: This option allows you to use an end keyword to signify the end of code blocks. When useEnd is toggled on, it will automatically turn off useCurlyBraces to maintain compatibility with your selected syntax style. Furthermore, enabling useEnd will automatically toggle on useFuncKeyWord, allowing for the use of function keywords alongside the end keyword. This ensures that all your settings work harmoniously together.`nuseSemicolon: Toggle for using semicolons at the end of statements.`nuseParentheses: if off, there's no need to use parentheses where necessary, but you still must use them in some places.`nusePythonicColonSyntax: Enables Python-style colon syntax for defining code blocks.`nforLoopLang: Choose the language for the style of the for loop.`nuseInJavaScriptAlwaysUseVar: You dont have to declere variables in js now all of them will start whit var var varName...`nuseJavaScriptInAfullHTMLfile: It wraps the js code in a full index.html file`nuseJavaScriptAmainFuncDef: The useJavaScriptAmainFuncDef option controls whether an async function is used as the main function and where it is placed in the code. If this option is set to any value other than " . Chr(34) . "off," . Chr(34) . " you must specify the syntax for the main function. This syntax is simply a label, marking the start of the main function. There’s no need to add {} brackets since it’s just a label. If you enable this option but don't explicitly place the main function label anywhere in the code, it will automatically be defined at the top. This allows you to define other functions at the top of your script or within the main function itself."

defaultSyntax := "cpp`nht`nStringTrimLeft,OUTVAR,INVAR,param1|StringTrimRight,OUTVAR,INVAR,param1|Random,OUTVAR,param1,param2|Sleep,param1|FileRead,OUTVAR,'param1|FileAppend,INVAR,'param1|FileDelete,'param1|Sort,OUTVAR,'param1,'param2`nint`nstr`nbool`nfloat`nint8`nint16`nint32`nint64`nif`nelse if`nelse`nwhile`nfor`nLoop`nLoop,`nLoop, Parse,`ncontinue`nbreak`nfunc`nawait`n=`n+=`n+=`n-=`n*=`n/=`n+`n+`n==`n!`n>`n<`n>=`n<=`nor`nand`n!=`ntrue`nfalse`nswitch`ncase`ndefault`nthrow`nErrorMsg`ntry`ncatch`nfinally`n.push`n.pop`n.size`n.insert`n.rm`n.indexOf`narr`narr int`narr str`narr float`narr bool`nvar`nlet`nconst`nreturn`nend`nglobal`n//`n/*`n*/`n" . Chr(92) . "`n0`nA_Index`nA_LoopField`nmain`non`non`noff`noff`non`noff`ncpp`non`non`noff"

theINFOtextEachText1 := "lang to transpile to: Target programming language for transpilation.`n`n"
theINFOtextEachText2 := "file extention of the file: File extension for transpiled output files.`n`n"
theINFOtextEachText3 := "commands: List of supported operations or built-in functions.`n`n"
theINFOtextEachText4 := "keyWordINT:`n`nThis defines an integer data type. You can change this keyword to whatever you like.`n`nExamples:`n- int`n- number`n- whole number`n- [integer]`n- count#the$steps`n- 42isTheAnswer`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText5 := "keyWordSTR:`n`nThis defines a string data type. You can change this keyword to whatever you like.`n`nExamples:`n- str`n- string`n- text`n- string value here`n- [character sequence]`n- " . Chr(34) . "text#inside*quotes" . Chr(34) . "`n- randomString123`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText6 := "keyWordBOOL:`n`nThis defines a boolean data type. You can change this keyword to whatever you like.`n`nExamples:`n- bool`n- true/false`n- yesORno`n- is it working now?`n- [condition met]`n- yes#no$maybe`n- trueOrFalse`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText7 := "keyWordFLOAT:`n`nThis defines a floating data type. You can change this keyword to whatever you like.`n`nExamples:`n- float`n- decimal number`n- floating point value`n- [float number]`n- 3.14*isAwesome`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText8 := "keyWordINT8:`n`nThis defines an 8-bit integer data type. You can change this keyword to whatever you like.`n`nExamples:`n- int8`n- small integer`n- 8 bits of data`n- [8bit integer]`n- 00001111`n- tinyNumber123!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText9 := "keyWordINT16:`n`nThis defines a 16-bit integer data type. You can change this keyword to whatever you like.`n`nExamples:`n- int16`n- medium integer`n- 16 bits of data`n- [16bit integer]`n- 1010101010101010`n- halfWordData!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText10 := "keyWordINT32:`n`nThis defines a 32-bit integer data type. You can change this keyword to whatever you like.`n`nExamples:`n- int32`n- large integer`n- 32 bits of data`n- [32bit integer]`n- 11111111111111111111111111111111`n- fullWordData123!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText11 := "keyWordINT64:`n`nThis defines a 64-bit integer data type. You can change this keyword to whatever you like.`n`nExamples:`n- int64`n- huge integer`n- 64 bits of data`n- [64bit integer]`n- 00000000000000001111111111111111`n- bigData!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText12 := "keyWordIF:`n`nThis is used for conditional statements. You can change this keyword to whatever you like.`n`nExamples:`n- if`n- check this condition`n- should it be true?`n- [do this if true]`n- (condition?yes:no)`n- decideWhatToDo!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText13 := "keyWordElseIf:`n`nThis is an alternative condition in conditional statements. You can change this keyword to whatever you like.`n`nExamples:`n- else if`n- elif`n- otherwise if`n- check this next condition`n- [if not this then that]`n- (ifNotCondition?tryThis)`n- weShouldTryThisNext`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText14 := "keyWordElse:`n`nThis defines a block of code for when no conditions are met. You can change this keyword to whatever you like.`n`nExamples:`n- else`n- then`n- otherwize`n- default action`n- when all else fails`n- [do this instead]`n- (fallback:doThis)`n- noneOfTheAbove!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText15 := "keyWordWhileLoop:`n`nThis defines a while loop. You can change this keyword to whatever you like.`n`nExamples:`n- while`n- repeat until`n- keep doing this`n- [continue while somting]`n- (loopUntil)`n- goForeverAndEver!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText16 := "keyWordForLoop:`n`nThis defines a for loop. You can change this keyword to whatever you like.`n`nExamples:`n- for`n- iterate through`n- loop a certain number`n- [repeat this many times]`n- goThroughEachItem!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText17 := "keyWordLoopInfinite:`n`nThis defines an infinite loop. You can change this keyword to whatever you like.`n`nExamples:`n- Loop`n- infinite loop`n- forever`n- repeat endlessly`n- [never stop]`n- (loopForever)`n- endlessLoopOfFun!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText18 := "keyWordLoop:`n`nThis defines a loop that iterates a specified number of times. You can change this keyword to whatever you like.`n`nExamples:`n- Loop,`n- iterate,`n- run this number of times`n- [execute x times]`n- (doThis:repeat10Times)`n- goAroundAndAround!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText19 := "keyWordLoopParse:`n`nThis defines a loop that parses through ONLY text. You can change this keyword to whatever you like.`n`nExamples:`n- Loop, Parse,`n- analyze this data,`n- forEach,`n- [parse through text]`n- (analyze:fromStartToEnd)`n- readEachCharacterOneByOne!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText20 := "keyWordContinue:`n`nThis skips to the next iteration of the loop. You can change this keyword to whatever you like.`n`nExamples:`n- continue`n- skip to next`n- move on now`n- [next iteration]`n- must keep going forward here in the loop`n- next#step$continue%on*`n- goOnAndOn!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText21 := "keyWordBreak:`n`nThis exits a loop prematurely. You can change this keyword to whatever you like.`n`nExamples:`n- break`n- exit loop`n- get me out of here my head is spinning`n- stop this execution`n- [terminate loop now]`n- no more iterations here, exit immediately`n- !@#exit^the&loop*now`n- endLoopHere!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText22 := "keyWordFunc:`n`nThis defines a function or subroutine. You can change this keyword to whatever you like.`n`nExamples:`n- func`n- fn`n- define function`n- create subroutine now`n- [set up a function here]`n- this is how we define a function properly`n- func!@#create&my^new*function`n- makeFunctionWorkForYou!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText23 := "keyWordAwait:`n`nThis keyword allows you to await a function only in JavaScript. You can change this keyword to whatever you like.`n`nExamples:`n- await`n- hold on mate`n- wait for function`n- pause until completed`n- [await this operation]`n- please wait while the process completes successfully`n- wait*for&the^result$to!come`n- doNotMoveUntilReady!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText24 := "keyWordVariablesAssignmentOperator:`n`nThis is the operator for variable assignment. You can change this keyword to whatever you like.`n`nExamples:`n- =`n- :=`n- assign value`n- set this variable now`n- [variable assignment operator]`n- use the assignment operator for proper initialization`n- assignValue$toVariable!@#useThis`n- letVariableBeSetHere!`n`nRules:`n- Cannot include a semicolon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText25 := "keyWordConcatenationAssignmentOperator:`n`nThis concatenates and assigns to a string variable. You can change this keyword to whatever you like.`n`nExamples:`n- +=`n- concatenate value`n- join these strings now`n- [concatenation assignment operator]`n- combine these strings together for a meaningful output`n- concatenatedString#newValue!@#addIt`n- joinThemTogetherNow!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText26 := "keyWordAdditionAssignmentOperator:`n`nThis adds to a numeric variable and assigns. You can change this keyword to whatever you like.`n`nExamples:`n- +=`n- addition assignment`n- increase this value`n- [addition operator for assignment]`n- add this number to the existing value directly here`n- plusValue$toVariable!@#increment`n- sumItUpRightHere!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText27 := "keyWordSubtractionAssignmentOperator:`n`nThis subtracts from a numeric variable and assigns. You can change this keyword to whatever you like.`n`nExamples:`n- -=`n- subtraction assignment`n- decrease this value`n- [subtraction operator for assignment]`n- take away this amount from the existing value`n- minusValue!@#toVariable&subtract`n- reduceItByThisAmount!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText28 := "keyWordMultiplicationAssignmentOperator:`n`nThis multiplies a numeric variable and assigns. You can change this keyword to whatever you like.`n`nExamples:`n- *=`n- multiplication assignment`n- double this value`n- [multiplication operator for assignment]`n- multiply this amount by the current value directly`n- timesValue!@#toVariable&multiply`n- increaseByFactorOfThis!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText29 := "keyWordDivisionAssignmentOperator:`n`nThis divides a numeric variable and assigns. You can change this keyword to whatever you like.`n`nExamples:`n- /=`n- division assignment`n- split this value`n- [division operator for assignment]`n- divide this number by the existing value directly`n- dividedValue$toVariable!@#split`n- breakItIntoEqualParts!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText30 := "keyWordAdditionOperator:`n`nThis adds two values or variables. You can change this keyword to whatever you like.`n`nExamples:`n- +`n- plus`n- addition`n- sum of values`n- [add these two numbers]`n- combine these values for a total of sum directly`n- totalIsEqualTo$sumValue@#addIt`n- addingNumbersTogether!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText31 := "keyWordConcatenationOperator:`n`nThis concatenates two strings or variables. You can change this keyword to whatever you like.`n`nExamples:`n- +`n- .`n- concatenate`n- join these strings together`n- [combine two strings]`n- put these together to form a complete statement now`n- stringCombine!@#useThis&connect`n- joinStringsToCreateFullSentence!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText32 := "keyWordEqualOperator:`n`nThis checks if two values or variables are equal. You can change this keyword to whatever you like.`n`nExamples:`n- ==`n- is equal to`n- is`n- matches these two values`n- [compare for equality now]`n- checkIfTheyAreTheSameValueRightHere`n- equalValue$toCompare!@#checkThis`n- areTheyReallyEqual?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText33 := "keyWordNotOperator:`n`nThis negates a boolean value or condition. You can change this keyword to whatever you like.`n`nExamples:`n- !`n- not`n- negation of this condition`n- [opposite of this boolean value]`n- negateThisStatementForClearerUnderstanding`n- !@#notTrue^useThis&instead`n- falseIsTheOppositeOfTrue!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText34 := "keyWordGreaterThanOperator:`n`nThis checks if one value is greater than another. You can change this keyword to whatever you like.`n`nExamples:`n- >`n- greater than`n- is this value larger`n- [compare if greater than]`n- determineIfFirstValueIsBiggerThanSecond`n- compareValue1#toValue2$useThis!`n- isThisValueGreaterThanThatValue?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText35 := "keyWordLessThanOperator:`n`nThis checks if one value is less than another. You can change this keyword to whatever you like.`n`nExamples:`n- <`n- less than`n- is this value smaller`n- [compare if less than]`n- checkIfValue1IsLessThanValue2Now`n- compareValue1&toValue2#useThis@!`n- isThisValueLessThanThatValue?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText36 := "keyWordGreaterThanOrEqualToOperator:`n`nThis checks if one value is greater than or equal to another. You can change this keyword to whatever you like.`n`nExamples:`n- >=`n- greater than or equal to`n- is this value at least`n- [check if value is larger or equal]`n- verifyIfFirstValueIsGreaterOrEqualToSecond`n- compareValue1$toValue2#andUseThis!`n- isThisValueGreaterThanOrEqualToThatValue?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText37 := "keyWordLessThanOrEqualToOperator:`n`nThis checks if one value is less than or equal to another. You can change this keyword to whatever you like.`n`nExamples:`n- <=`n- less than or equal to`n- is this value at most`n- [check if value is smaller or equal]`n- verifyIfFirstValueIsLessOrEqualToSecond`n- compareValue1^toValue2$andUseThis!`n- isThisValueLessThanOrEqualToThatValue?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText38 := "keyWordOrOperator:`n`nThis combines two boolean conditions (true if either is true). You can change this keyword to whatever you like.`n`nExamples:`n- ||`n- or`n- either condition is true`n- [true if either is true]`n- checkIfEitherConditionIsValidForExecution`n- useThis$orThat@toDetermineOutcome!`n- isThisTrueOrThatTrueToo?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText39 := "keyWordAndOperator:`n`nThis combines two boolean conditions (true if both are true). You can change this keyword to whatever you like.`n`nExamples:`n- &&`n- and`n- both conditions must be true`n- [true only if both are true]`n- checkIfBothConditionsAreValidForExecution`n- useThis$andThat@toDetermineOutcome!`n- areBothThisTrueAndThatTrueAlso?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText40 := "keyWordNotEqualToOperator:`n`nThis checks if two values or variables are not equal. You can change this keyword to whatever you like.`n`nExamples:`n- !=`n- not equal to`n- are these values different`n- [check for inequality now]`n- verifyIfTheseTwoValuesAreNotTheSame`n- checkThisValue$andThatValue!@#notEqual`n- isThisDifferentFromThatValueForSure?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText41 := "keyWordTrue:`n`nThis represents the true boolean value. You can change this keyword to whatever you like.`n`nExamples:`n- true`n- yeah`n- boolean true`n- this condition is affirmed`n- [set this to true value now]`n- confirmThisIsTrueAndLetItBeKnown`n- isThisReallyTrue$forEveryone!@#yes`n- truthAlwaysPrevailsInLogicHere!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText42 := "keyWordFalse:`n`nThis represents the false boolean value. You can change this keyword to whatever you like.`n`nExamples:`n- false`n- nah`n- boolean false`n- this condition is denied`n- [set this to false value now]`n- confirmThisIsFalseAndLetItBeClear`n- isThisReallyFalse$forEveryone!@#no`n- falsehoodNeverWinsInLogicHere!`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText43 := "keyWordSwitch:`n`nThe switch statement is a type of selection control mechanism. You can change this keyword to whatever you like.`n`nExamples:`n- switch`n- switch statement`n- change based on these values`n- [control flow with multiple conditions]`n- evaluateThisConditionAndDecideWhatToDoNext`n- switch$up@theGame#toMakeItInteresting`n- whatShouldIChooseNow?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText44 := "keyWordSwitchCase:`n`nThe switch case is a type of selection control mechanism used within the switch statement. You can change this keyword to whatever you like.`n`nExamples:`n- case`n- switch case`n- this value corresponds to a scenario`n- [choose one of the cases here]`n- selectThisCaseIfYouWantToProceedNext`n- case$selection@toDetermineOutcome#here`n- whatScenarioAreYouChoosingToday?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText45 := "keyWordSwitchDefault:`n`nThe default case in a switch statement provides a fallback option when no case matches. You can change this keyword to whatever you like.`n`nExamples:`n- default`n- default case`n- what to do if no cases match`n- [this is the fallback condition]`n- executeThisIfNoneOfTheCasesAreTrue`n- defaultOption!@#toAvoidUnwantedResults$here`n- whatShouldWeDoWhenNothingMatches?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText46 := "keyWordThrow:`n`nUsed to raise an exception, signaling an error or special condition. You can change this keyword to whatever you like.`n`nExamples:`n- throw`n- raise an exception`n- signal an error condition now`n- [indicate an exceptional case here]`n- throwThisErrorIfSomethingGoesWrongNow`n- throw@an#exception$forUnexpectedIssues!`n- whatDoYouWantToSignalNow?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText47 := "keyWordErrorMsg:`n`nPlaceholder for a variable or method that stores or retrieves error messages. You can change this keyword to whatever you like.`n`nExamples:`n- errorMsg`n- error message`n- this holds the current error text`n- [retrieve the latest error message here]`n- storeThisErrorMsgForLaterUsePlease`n- errorMsg!@#toHandleIssues^withLogic`n- whatIsTheCurrentErrorMessageRightNow?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText48 := "keyWordTry:`n`nBlock where code that might throw exceptions is placed; used for handling potential errors. You can change this keyword to whatever you like.`n`nExamples:`n- try`n- try block`n- attempt to execute this code section`n- [place risky code that might fail here]`n- tryToRunThisCodeAndCatchAnyErrorsIfTheyOccur`n- try!@#this&code*toSeeWhatHappensNow`n- whatWillYouAttemptToExecuteToday?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText49 := "keyWordCatch:`n`nBlock that handles exceptions thrown by the try block, allowing for error recovery. You can change this keyword to whatever you like.`n`nExamples:`n- catch`n- catch block`n- handle exceptions here`n- [recover from an error if it happens]`n- catchThisExceptionAndTakeAppropriateActionNow`n- catch@any$error&thatMightOccur!`n- whatExceptionsAreYouPreparedToHandleToday?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText50 := "keyWordFinally:`n`nBlock that executes after try and catch, regardless of whether an exception was thrown or not. NOT SUPPORTED IN C++. You can change this keyword to whatever you like.`n`nExamples:`n- finally`n- finally block`n- code that runs at the end`n- [always executes after try and catch]`n- finallyCompleteThisTaskRegardlessOfOutcomes`n- finally!@#execute&this*noMatterWhatHappens`n- whatFinalActionsWillYouTakeNow?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText51 := "keyWordArrayAppend:`n`nMethod to add an element to the end of a collection (e.g., list or array). You can change this keyword to whatever you like.`n`nExamples:`n- .append`n- .add`n- .insert`n- .insertElementAtEnd`n- .addNewItemToCollection`n- .pushToEndOfArray`n- .thisIsAnExampleOfAddingAnElement`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText52 := "keyWordArrayPop:`n`nMethod to remove and return the last element of a collection (e.g., stack or list). You can change this keyword to whatever you like.`n`nExamples:`n- .pop`n- .remove`n- .takeLast`n- .deleteLastItem`n- .popLastElementFromCollection`n- .removeLastElementFromArray`n- .thisIsAnExampleOfPoppingAnElement`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText53 := "keyWordArraySize:`n`nMethod that returns the number of elements in a collection (e.g., array, list, or vector). You can change this keyword to whatever you like.`n`nExamples:`n- .size`n- .count`n- .length`n- .getTotalItems`n- .returnNumberOfElements`n- .howManyElementsAreInTheArray`n- .thisIsAnExampleOfGettingArraySize`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText54 := "keyWordArrayInsert:`n`nMethod to add an element at a specific position in a collection (e.g., list or array). You can change this keyword to whatever you like.`n`nExamples:`n- .insert`n- .addAt`n- .insertAtPosition`n- .insertElementAtSpecificIndex`n- .addItemAtSpecificLocation`n- .placeElementAtIndexPosition`n- .thisIsAnExampleOfInsertingAnElement`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText55 := "keyWordArrayRemove:`n`nMethod to remove an element from a collection by its value or index (e.g., list or array). You can change this keyword to whatever you like.`n`nExamples:`n- .remove`n- .rm`n- .delete`n- .discard`n- .removeItem`n- .eliminateElementFromCollection`n- .thisIsAnExampleOfRemovingAnElement`n- .removeElementFromSpecificIndex`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText56 := "keyWordArrayIndexOf:`n`nMethod that returns the index of the first occurrence of an element, or -1 if not found. You can change this keyword to whatever you like.`n`nExamples:`n- .indexOf`n- .findIndex`n- .locateIndex`n- .getElementIndex`n- .returnIndexOfFirstOccurrence`n- .thisIsAnExampleOfFindingIndex`n- .indexOfTheRequestedElement`n`nRules:`n- Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.`n`n"
theINFOtextEachText57 := "keyWordArrayDefinition:`n`nDefines an array data structure. You can change this keyword to whatever you like. by defalut its a string array in C++`n`nExamples:`n- array`n- array definition`n- create an array for holding values`n- [define a collection of items here]`n- arrayOfValuesThatCanHoldAnyDataType`n- array$of@special!characters%and#numbers`n- whatKindOfArrayAreYouCreatingToday?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText58 := "keyWordArrayOfIntegersDefinition:`n`nDefines an array of integers. You can change this keyword to whatever you like.`n`nExamples:`n- arrayOfIntegers`n- array of integers`n- hold multiple integer values in an array`n- [create an array specifically for integers]`n- arrayOfIntegersForStoringValuesFrom0To100`n- arrayOf!@#$%^&*()RandomIntegers12345678`n- howManyIntegersWillYouStoreInTheArray?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText59 := "keyWordArrayOfStringsDefinition:`n`nDefines an array of strings. You can change this keyword to whatever you like.`n`nExamples:`n- arrayOfStrings`n- string array`n- define an array that holds text values`n- [this array stores multiple string values]`n- arrayOfStringsToHoldNamesOfFruitsVegetablesAndMore`n- arrayOf!@#$%^&*()StringValues12345678`n- howManyStringsDoYouWantToIncludeInThisArray?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText60 := "keyWordArrayOfFloatingPointDefinition:`n`nDefines an array of floating-point numbers. You can change this keyword to whatever you like.`n`nExamples:`n- arrayOfFloats`n- floating-point array`n- create an array for float numbers`n- [store floating-point numbers in an array]`n- arrayOfFloatingPointValuesForCalculationsAndStatistics`n- arrayOf!@#$%^&*()FloatingPointNumbers98765432`n- howManyFloatValuesWillYouIncludeInTheArray?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText61 := "keyWordArrayOfBooleansDefinition:`n`nDefines an array of booleans. You can change this keyword to whatever you like.`n`nExamples:`n- arrayOfBooleans`n- boolean array`n- hold true/false values in an array`n- [create an array to store boolean values]`n- arrayOfBooleansForFlagsInTheProgramToControlFlow`n- arrayOf!@#$%^&*()BooleanValuesTrueFalse`n- howManyBooleanFlagsDoYouNeedInThisArray?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText62 := "keyWordJavaScriptVar:`n`nUse var for variable declarations ONLY in JavaScript. You can change this keyword to whatever you like.`n`nExamples:`n- var`n- variable declaration`n- use var for declaring variables`n- [initialize a variable using var in JS]`n- varToDefineVariablesInJavaScriptForScopeControl`n- var!@#ToStore^VariousData*TypesInYourCode`n- howWillYouUseVarInYourJavaScriptCode?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText63 := "keyWordJavaScriptLet:`n`nUse let for block-scoped variables ONLY in JavaScript. You can change this keyword to whatever you like.`n`nExamples:`n- let`n- block-scoped variable`n- use let for declaring block-level variables`n- [initialize a variable using let in JS]`n- letToDefineBlockScopedVariablesInJavaScriptCode`n- let!@#This^Store*DataForYou!`n- howManyBlockScopedVariablesWillYouDeclare?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText64 := "keyWordJavaScriptConst:`n`nUse const for block-scoped, unchangeable variables ONLY in JavaScript. You can change this keyword to whatever you like.`n`nExamples:`n- const`n- constant variable`n- use const for declaring unchangeable variables`n- [initialize a constant variable using const in JS]`n- constToDefineImmutableValuesInYourJavaScriptCode`n- const!@#$This^Holds*ConstantDataForYou!`n- whatConstantsWillYouDefineInYourCode?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText65 := "keyWordReturnStatement:`n`nReturns a value from a function or exits a subroutine. You can change this keyword to whatever you like.`n`nExamples:`n- return`n- yeet`n- use return to exit a function`n- [return a value from a function call here]`n- returnThisValueToContinueExecutionOfYourProgram`n- return!@#$%^&*()ValueForFurtherProcessingInCode`n- whatWillYouReturnFromYourFunctionToday?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText66 := "keyWordEnd:`n`nIndicates the end of a code block. You can change this keyword to whatever you like.`n`nExamples:`n- end`n- stop`n- end is here`n- signifies the conclusion of the code block`n- [mark the end of a function or loop here]`n- endOfBlockToIndicateNoFurtherExecutionNeeded`n- end!@#$%^&*()OfCodeForCurrentContext`n- whatWillBeTheFinalStepInYourCodeBlock?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText67 := "keyWordGlobal:`n`nGlobal in Python allows variables inside functions to be accessed and modified globally. You can change this keyword to whatever you like.`n`nExamples:`n- global`n- global variable`n- access variables across functions globally`n- [mark a variable for global scope here]`n- globalVariableAllowsAccessAcrossTheEntireModule`n- global$!@#Variables%ForAccessEverywhereInCode`n- whatGlobalVariablesAreYouUsingInYourFunction?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText68 := "keyWordComment:`n`nStarts a single-line comment. You can change this keyword to whatever you like.`n`nExamples:`n- //`n- ;`n- NOTE:`n- single-line comment`n- starts a comment in the code`n- [add a comment to explain your code]`n- commentForClarifyingThePurposeOfYourCodeHere`n- comment!@#$%^&*()ToMakeThingsClearInYourCode`n- whatCommentWouldYouAddToThisSection?`n`nRules:`n- Cannot include a colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText69 := "keyWordCommentOpenMultiLine:`n`nOpens a multiline comment. You can change this keyword to whatever you like.`n`nExamples:`n- /*`n- openMultiLineComment`n- multiline comment start`n- begin a block comment in the code`n- [this opens a comment for multiple lines]`n- openMultiLineCommentToProvideDetailedExplanations`n- openComment@!#forMultipleLines&OfDescription`n- howWillYouUseMultilineCommentsInYourCode?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText70 := "keyWordCommentCloseMultiLine:`n`nCloses a multiline comment. You can change this keyword to whatever you like.`n`nExamples:`n-*/`n- closeMultiLineComment`n- end of multiline comment`n- finish a block comment in the code`n- [this closes a comment for multiple lines]`n- closeCommentToEndDetailedDescriptionsHere`n- closeComment$!@#ToFinishMultiLineExplaining`n- howWillYouEndYourMultilineComment?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText71 := "keyWordEscapeChar:`n`nEscapes special characters in strings or identifiers. You can change this keyword to whatever you like.`n`nExamples:`n" . Chr(92) . "`n" . Chr(96) . "`n@`n~`n*`n|`n&`n^`n`nRules:`n- Cannot include a newline character, or carriage return. Anything else is allowed as long as its ONLY 1 char long.`n`n"
theINFOtextEachText72 := "AHKlikeLoopsIndexedAt:`n`nSpecifies the starting index for the AHK-like loop, such as 1-indexed, 0-indexed, or any custom value. You can change this keyword to whatever you like.`n`nExamples:`n0`n1`n50`n69`n-50`n-69`n4863`n`nRules:`n- Can only be a number or a negative number.`n`n"
theINFOtextEachText73 := "keyWordAIndex:`n`nRepresents the current index of the loop. It can be customized based on the indexing method and renamed using configuration settings. You can change this keyword to whatever you like.`n`nExamples:`n- A_Index`n- currentIndexInTheLoop`n- [thisIndicatesTheIndexOfTheCurrentIteration]`n- currentIndexInTheLoopForTrackingIterationCount`n- AIndex!@#$%^&*()UsedForCurrentLoopIterationTracking`n- whatIndexAreYouAtInYourCurrentLoop?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText74 := "keyWordALoopField:`n`nRepresents the current value or field in the loop. It can be renamed according to user preferences through configuration. You can change this keyword to whatever you like.`n`nExamples:`n- A_LoopField`n- currentLoopValue`n- [thisRefersToTheValueInTheLoopCurrently]`n- currentValueInTheLoopToProcessOrUseInLogic`n- ALoopField@!#ToStoreCurrentIterationValue%InCode`n- whatValueAreYouProcessingInYourLoopRightNow?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"
theINFOtextEachText75 := "keyWordMainLabel:`n`nThis is the main label where the main function will be inserted in the transpiled language. You can change this keyword to whatever you like.`n`nExamples:`n- mainLabel`n- main function label`n- define the entry point for your program`n- [this is the main label for the code execution]`n- mainLabelToInsertYourMainFunctionInTheCode`n- mainLabel@!#UsedToPointToMainFunctionInCode`n- whatIsTheEntryPointOfYourProgramGoingToBe?`n`nRules:`n- Cannot include a semicolon, colon, newline character, or carriage return. Anything else is allowed.`n`n"



theINFOtextEachText76 := "useFuncKeyWord: This option allows you to use a keyword to define functions when transpiling to Python (py), JavaScript (js), or C++ (cpp). If it is turned off, you won't need to use a function definition keyword for Python and JavaScript. If you select C++ as your language, this option will always be on and cannot be turned off. Additionally, if you have useFuncKeyWord turned off and then switch to C++, it will automatically be turned on. When useFuncKeyWord is off, useCurlyBraces will automatically be toggled on, and if you turn off useFuncKeyWord, it will also toggle off useEnd if it was on."
theINFOtextEachText77 := "useCurlyBraces: This option allows you to use curly braces to define code blocks. If useCurlyBraces is untoggled it will automatically toggle useFuncKeyWord on. When useCurlyBraces is enabled, it will automatically untoggle useEnd if it was on. This ensures that both methods of defining code blocks do not conflict."
theINFOtextEachText78 := "useEnd: This option allows you to use an end keyword to signify the end of code blocks. When useEnd is toggled on, it will automatically turn off useCurlyBraces to maintain compatibility with your selected syntax style. Furthermore, enabling useEnd will automatically toggle on useFuncKeyWord, allowing for the use of function keywords alongside the end keyword. This ensures that all your settings work harmoniously together."
theINFOtextEachText79 := "useSemicolon: Toggle for using semicolons at the end of statements."
theINFOtextEachText80 := "useParentheses: if off, there's no need to use parentheses where necessary, but you still must use them in some places."
theINFOtextEachText81 := "usePythonicColonSyntax: Enables Python-style colon syntax for defining code blocks."
theINFOtextEachText82 := "forLoopLang: Choose the language for the style of the for loop. You can see the for loop in the live preview"
theINFOtextEachText83 := "useInJavaScriptAlwaysUseVar: You dont have to declare variables when converting to js with keywords like var let const or the ones you changed the var let const to. Now all of them will start with var var varName... automatically."
theINFOtextEachText84 := "useJavaScriptInAfullHTMLfile: It wraps the js code in a full index.html file"
theINFOtextEachText85 := "useJavaScriptAmainFuncDef: The useJavaScriptAmainFuncDef option controls whether an async function is used as the main function and where it is placed in the code. If this option is not toggled off, you must specify the syntax for the main function. This syntax is simply a label, marking the start of the main function. There’s no need to add {} brackets since it’s just a label. If you enable this option but don't explicitly place the main function label anywhere in the code, it will automatically be defined at the top. This allows you to define other functions at the top of your script or within the main function itself."



Loop, Parse, defaultSyntax, `n, `r
{
theINFOtextEachText%A_Index% .= "By default the syntax is:`n" . A_LoopField
}








guiEditY := 5
Loop, Parse, instructionDocumation, `n, `r
{
guiEditText := StrReplace(Trim(StrSplit(A_LoopField, ":", 1)), "keyWord", "")
guiEditTextV := guiEditText . ":`n`n" . Trim(theINFOtextEachText%A_Index%)
guiEditTextG := "Edit" . A_Index

if (InStr(guiEditText, "use"))
{
;MsgBox, % guiEditText

if (Trim(guiEditText) = "useFuncKeyWord")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit76 vEdit76 off, useFuncKeyWord
}
if (Trim(guiEditText) = "useCurlyBraces")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit77 vEdit77 off, useCurlyBraces
}
if (Trim(guiEditText) = "useEnd")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit78 vEdit78 off, useEnd
}
if (Trim(guiEditText) = "useSemicolon")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit79 vEdit79 off, useSemicolon
}
if (Trim(guiEditText) = "useParentheses")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit80 vEdit80 off, useParentheses
}
if (Trim(guiEditText) = "usePythonicColonSyntax")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit81 vEdit81 off, usePythonicColonSyntax
}
if (Trim(guiEditText) = "useInJavaScriptAlwaysUseVar")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit83 vEdit83 off, useInJavaScriptAlwaysUseVar
}
if (Trim(guiEditText) = "useJavaScriptInAfullHTMLfile")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit84 vEdit84 off, useJavaScriptInAfullHTMLfile
}
if (Trim(guiEditText) = "useJavaScriptAmainFuncDef")
{
Gui, Add, Toggle, x5 y%guiEditY% gEdit85 vEdit85 off, useJavaScriptAmainFuncDef
}




}
else
{
if (guiEditTextG = "Edit1")
{
Gui, Add, Button, x5 y%guiEditY% w60 h30 gEdit1 vEdit1CPP, cpp
Gui, Add, Button, x70 y%guiEditY% w60 h30 gEdit1 vEdit1PY, py
Gui, Add, Button, x135 y%guiEditY% w60 h30 gEdit1 vEdit1JS, js
}
if (guiEditTextG = "Edit2")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit2 vEdit2 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit3")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit3 vEdit3 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit4")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit4 vEdit4 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit5")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit5 vEdit5 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit6")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit6 vEdit6 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit7")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit7 vEdit7 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit8")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit8 vEdit8 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit9")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit9 vEdit9 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit10")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit10 vEdit10 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit11")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit11 vEdit11 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit12")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit12 vEdit12 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit13")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit13 vEdit13 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit14")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit14 vEdit14 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit15")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit15 vEdit15 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit16")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit16 vEdit16 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit17")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit17 vEdit17 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit18")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit18 vEdit18 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit19")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit19 vEdit19 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit20")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit20 vEdit20 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit21")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit21 vEdit21 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit22")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit22 vEdit22 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit23")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit23 vEdit23 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit24")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit24 vEdit24 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit25")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit25 vEdit25 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit26")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit26 vEdit26 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit27")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit27 vEdit27 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit28")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit28 vEdit28 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit29")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit29 vEdit29 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit30")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit30 vEdit30 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit31")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit31 vEdit31 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit32")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit32 vEdit32 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit33")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit33 vEdit33 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit34")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit34 vEdit34 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit35")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit35 vEdit35 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit36")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit36 vEdit36 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit37")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit37 vEdit37 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit38")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit38 vEdit38 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit39")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit39 vEdit39 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit40")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit40 vEdit40 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit41")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit41 vEdit41 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit42")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit42 vEdit42 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit43")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit43 vEdit43 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit44")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit44 vEdit44 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit45")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit45 vEdit45 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit46")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit46 vEdit46 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit47")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit47 vEdit47 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit48")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit48 vEdit48 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit49")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit49 vEdit49 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit50")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit50 vEdit50 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit51")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit51 vEdit51 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit52")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit52 vEdit52 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit53")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit53 vEdit53 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit54")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit54 vEdit54 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit55")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit55 vEdit55 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit56")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit56 vEdit56 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit57")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit57 vEdit57 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit58")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit58 vEdit58 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit59")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit59 vEdit59 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit60")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit60 vEdit60 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit61")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit61 vEdit61 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit62")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit62 vEdit62 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit63")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit63 vEdit63 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit64")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit64 vEdit64 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit65")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit65 vEdit65 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit66")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit66 vEdit66 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit67")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit67 vEdit67 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit68")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit68 vEdit68 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit69")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit69 vEdit69 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit70")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit70 vEdit70 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit71")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit71 vEdit71 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit72")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit72 vEdit72 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit73")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit73 vEdit73 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit74")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit74 vEdit74 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit75")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit75 vEdit75 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit76")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit76 vEdit76 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit77")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit77 vEdit77 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit78")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit78 vEdit78 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit79")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit79 vEdit79 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit80")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit80 vEdit80 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit81")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit81 vEdit81 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit82")
{
guiEditY82 := guiEditY + 3
Gui, Font, s12
Gui, Add, Button, x5 y%guiEditY82% w60 h26 gEdit82 vEdit82CPP, cpp
Gui, Add, Button, x70 y%guiEditY82% w60 h26 gEdit82 vEdit82PY, py
Gui, Add, Button, x135 y%guiEditY82% w60 h26 gEdit82 vEdit82JS, js
Gui, Font, s15
}

if (guiEditTextG = "Edit83")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit83 vEdit83 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit84")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit84 vEdit84 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit85")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit85 vEdit85 bg000000 cffffff -Border r5, %guiEditText%
}

if (guiEditTextG = "Edit86")
{
Gui, Add, Edit, x5 y%guiEditY% w%guiW% h25 gEdit86 vEdit86 bg000000 cffffff -Border r5, %guiEditText%
}



}
buttonX := guiW + 15
Gui, Font, s13
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15

guiEditY := guiEditY + 30
}
doneLoading := 0
Loop, 86
{
editTextTemp := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-" . A_Index)
editTextTemp1 := "Edit" . A_Index

if (A_Index = 1)
{
if (editTextTemp = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-1", "cpp")
editTextTemp := "cpp"
}
;editTextTemp

if (editTextTemp = "cpp")
{
GuiControl, Disable, Edit1CPP
GuiControl, Enable, Edit1JS
GuiControl, Enable, Edit1PY
}
if (editTextTemp = "js")
{
GuiControl, Disable, Edit1JS
GuiControl, Enable, Edit1CPP
GuiControl, Enable, Edit1PY
}
if (editTextTemp = "py")
{
GuiControl, Disable, Edit1PY
GuiControl, Enable, Edit1JS
GuiControl, Enable, Edit1CPP
}
}


if (A_Index = 82)
{
if (editTextTemp = null)
{
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-82", "cpp")
editTextTemp := "cpp"
}
;editTextTemp

if (editTextTemp = "cpp")
{
GuiControl, Disable, Edit82CPP
GuiControl, Enable, Edit82JS
GuiControl, Enable, Edit82PY
}
if (editTextTemp = "js")
{
GuiControl, Disable, Edit82JS
GuiControl, Enable, Edit82CPP
GuiControl, Enable, Edit82PY
}
if (editTextTemp = "py")
{
GuiControl, Disable, Edit82PY
GuiControl, Enable, Edit82JS
GuiControl, Enable, Edit82CPP
}
}



if (A_Index = 85)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit85').click()
}
}
else if (A_Index = 84)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit84').click()
}
}
else if (A_Index = 83)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit83').click()
}
}
else if (A_Index = 81)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit81').click()
}
}
else if (A_Index = 80)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit80').click()
}
}
else if (A_Index = 79)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit79').click()
}
}
else if (A_Index = 78)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit78').click()
}
}
else if (A_Index = 77)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit77').click()
}
}
else if (A_Index = 76)
{
if (editTextTemp = "on")
{
document.getElementById('Gui1Edit76').click()
}
}
else
{
EditText%A_Index% := editTextTemp
GuiControl, Text, %editTextTemp1%, %editTextTemp%
}
EditText%A_Index% := editTextTemp
}
doneLoading := 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Gui, Add, Button, x200 y5 w120 h30 gGettingStartedButton, Getting Started
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
allLocalSrorageLinks := "|"


MyDropDownFuncs := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs")
if (MyDropDownFuncs = null)
{
MyDropDownFuncs := "HTVM_func1"
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs", MyDropDownFuncs)
}
MyDropDownFuncsTempFirstAddShowDisplay := ""
Loop, Parse, MyDropDownFuncs, "|"
{
MyDropDownFuncsTempFirstAddShowDisplay := A_LoopField
break
}
currentFuncName := MyDropDownFuncsTempFirstAddShowDisplay
currentFuncNameOLD := currentFuncName


MyFuncsLibs := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . MyDropDownFuncsTempFirstAddShowDisplay)
allLocalSrorageLinks .= MyDropDownFuncsTempFirstAddShowDisplay . "|"
if (MyFuncsLibs = null)
{
MyFuncsLibs := "null"
}

MyFuncsDescription := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . MyDropDownFuncsTempFirstAddShowDisplay)
allLocalSrorageLinks .= MyDropDownFuncsTempFirstAddShowDisplay . "|"
if (MyFuncsDescription = null)
{
MyFuncsDescription := "null"
}

MyFuncsCode := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . MyDropDownFuncsTempFirstAddShowDisplay)
allLocalSrorageLinks .= MyDropDownFuncsTempFirstAddShowDisplay . "|"
if (MyFuncsCode = null)
{
MyFuncsCode := "// add the function here"
}

MyFuncsLang := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . MyDropDownFuncsTempFirstAddShowDisplay)
allLocalSrorageLinks .= MyDropDownFuncsTempFirstAddShowDisplay . "|"
if (MyFuncsLang = null)
{
MyFuncsLang := "cpp"
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . MyDropDownFuncsTempFirstAddShowDisplay, "cpp")
}



GuiControl, Destroy, MyDropDownV
guiEditYDDD := guiEditY
Gui, Add, DropDownList, x5 y%guiEditYDDD% gMyDropDown vMyDropDownV, " + variables.MyDropDownFuncs + "
Gui, Add, Button, x165 y%guiEditY% w105 h30 gAddNewFuncButton, New function
Gui, Font, s13
guiEditTextV := "Add a New Function Info Button:`n`nThis button allows you to add a new custom function to your project. When you click it, you’ll be prompted to define the function’s name, libraries (if any), description, and the actual code. You can also specify the target languages for the function (JavaScript, Python, or C++) for automatic conversion.`n`n- Name: Choose a unique name for your built-in function.`n- Libraries: If your built-in function needs external libraries, you can specify them here (make sure to format them according to the target language).`n- Description: Provide a brief description of what the function does. If the description is more than one line, you can use the tilde (~) character to create new lines in the documentation.`n- Code: Write or paste the code for your built-in function in the provided code editor (IDE).`n`nOnce the function is added, you can easily reuse it in your code, and it will be correctly converted to the specified language when needed.`n`nExamples of function names:`n1. myFunction`n2. calculateSum`n3. get_data`n4. convertToUppercase`n5. handleButtonClick`n`nDescription:`nIf no description is needed for the function, simply type null this ensures that the documentation generation does not include any unnecessary information.`n`nLibraries:`nIf no libraries are needed for your built-in function, just type null this indicates that there are no external libraries required for the function's operation."
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15

guiEditY := guiEditY + 35

Gui, Add, Button, x5 y%guiEditY% w60 h35 gEditFuncButtonLangCpp vEditFuncButtonLangCpp, cpp
Gui, Add, Button, x70 y%guiEditY% w60 h35 gEditFuncButtonLangPy vEditFuncButtonLangPy, py
Gui, Add, Button, x135 y%guiEditY% w60 h35 gEditFuncButtonLangJs vEditFuncButtonLangJs, js

if (MyFuncsLang = "cpp")
{
GuiControl, Disable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangPy
}
if (MyFuncsLang = "js")
{
GuiControl, Disable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangPy
}
if (MyFuncsLang = "py")
{
GuiControl, Disable, EditFuncButtonLangPy
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
}

buttonX := guiW + 15
Gui, Font, s13
guiEditTextV := "Function Language Selection Info Button:`n`nThis button lets you specify the programming language your built-in function will be converted to: JavaScript, Python, or C++. "
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15

guiEditY := guiEditY + 40
guiEditYNOTF := guiEditY
Gui, Add, Edit, x5 y%guiEditYNOTF% w%guiW% h25 gEditFuncName vEditFuncName bg000000 cffffff -Border r5, Name of the function
GuiControl, Text, EditFuncName, %MyDropDownFuncsTempFirstAddShowDisplay%
buttonX := guiW + 15
Gui, Font, s13
guiEditTextV := "Change the name of the function here"
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15
guiEditY := guiEditY + 30
guiEditYLibs := guiEditY
Gui, Add, Edit, x5 y%guiEditYLibs% w%guiW% h25 gEditFuncLibs vEditFuncLibs bg000000 cffffff -Border r5, Libs
GuiControl, Text, EditFuncLibs, %MyFuncsLibs%

buttonX := guiW + 15
Gui, Font, s13
guiEditTextV := Chr(76) . Chr(105) . Chr(98) . Chr(115) . Chr(58) . Chr(10) . Chr(10) . Chr(73) . Chr(102) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(39) . Chr(114) . Chr(101) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(118) . Chr(101) . Chr(114) . Chr(116) . Chr(105) . Chr(110) . Chr(103) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(114) . Chr(32) . Chr(102) . Chr(117) . Chr(110) . Chr(99) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(32) . Chr(116) . Chr(111) . Chr(32) . Chr(74) . Chr(97) . Chr(118) . Chr(97) . Chr(83) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(44) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(32) . Chr(99) . Chr(97) . Chr(110) . Chr(32) . Chr(101) . Chr(105) . Chr(116) . Chr(104) . Chr(101) . Chr(114) . Chr(32) . Chr(117) . Chr(115) . Chr(101) . Chr(32) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(116) . Chr(97) . Chr(103) . Chr(115) . Chr(32) . Chr(102) . Chr(111) . Chr(114) . Chr(32) . Chr(98) . Chr(114) . Chr(111) . Chr(119) . Chr(115) . Chr(101) . Chr(114) . Chr(32) . Chr(108) . Chr(105) . Chr(98) . Chr(114) . Chr(97) . Chr(114) . Chr(105) . Chr(101) . Chr(115) . Chr(32) . Chr(111) . Chr(114) . Chr(32) . Chr(78) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(115) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(32) . Chr(105) . Chr(102) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(39) . Chr(114) . Chr(101) . Chr(32) . Chr(110) . Chr(111) . Chr(116) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(118) . Chr(101) . Chr(114) . Chr(116) . Chr(105) . Chr(110) . Chr(103) . Chr(32) . Chr(116) . Chr(111) . Chr(32) . Chr(97) . Chr(32) . Chr(102) . Chr(117) . Chr(108) . Chr(108) . Chr(32) . Chr(72) . Chr(84) . Chr(77) . Chr(76) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(46) . Chr(32) . Chr(84) . Chr(104) . Chr(101) . Chr(114) . Chr(101) . Chr(8217) . Chr(115) . Chr(32) . Chr(97) . Chr(32) . Chr(116) . Chr(111) . Chr(103) . Chr(103) . Chr(108) . Chr(101) . Chr(32) . Chr(115) . Chr(119) . Chr(105) . Chr(116) . Chr(99) . Chr(104) . Chr(32) . Chr(116) . Chr(104) . Chr(97) . Chr(116) . Chr(32) . Chr(108) . Chr(101) . Chr(116) . Chr(115) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(32) . Chr(99) . Chr(104) . Chr(111) . Chr(111) . Chr(115) . Chr(101) . Chr(32) . Chr(119) . Chr(104) . Chr(101) . Chr(116) . Chr(104) . Chr(101) . Chr(114) . Chr(32) . Chr(116) . Chr(111) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(118) . Chr(101) . Chr(114) . Chr(116) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(114) . Chr(32) . Chr(99) . Chr(111) . Chr(100) . Chr(101) . Chr(32) . Chr(116) . Chr(111) . Chr(32) . Chr(74) . Chr(97) . Chr(118) . Chr(97) . Chr(83) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(105) . Chr(110) . Chr(32) . Chr(97) . Chr(32) . Chr(102) . Chr(117) . Chr(108) . Chr(108) . Chr(32) . Chr(72) . Chr(84) . Chr(77) . Chr(76) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(46) . Chr(32) . Chr(73) . Chr(102) . Chr(32) . Chr(116) . Chr(104) . Chr(105) . Chr(115) . Chr(32) . Chr(116) . Chr(111) . Chr(103) . Chr(103) . Chr(108) . Chr(101) . Chr(32) . Chr(105) . Chr(115) . Chr(32) . Chr(101) . Chr(110) . Chr(97) . Chr(98) . Chr(108) . Chr(101) . Chr(100) . Chr(44) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(32) . Chr(109) . Chr(117) . Chr(115) . Chr(116) . Chr(32) . Chr(117) . Chr(115) . Chr(101) . Chr(32) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(116) . Chr(97) . Chr(103) . Chr(115) . Chr(32) . Chr(102) . Chr(111) . Chr(114) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(114) . Chr(32) . Chr(108) . Chr(105) . Chr(98) . Chr(114) . Chr(97) . Chr(114) . Chr(105) . Chr(101) . Chr(115) . Chr(46) . Chr(32) . Chr(73) . Chr(102) . Chr(32) . Chr(100) . Chr(105) . Chr(115) . Chr(97) . Chr(98) . Chr(108) . Chr(101) . Chr(100) . Chr(44) . Chr(32) . Chr(121) . Chr(111) . Chr(117) . Chr(32) . Chr(99) . Chr(97) . Chr(110) . Chr(32) . Chr(117) . Chr(115) . Chr(101) . Chr(32) . Chr(78) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(115) . Chr(45) . Chr(115) . Chr(116) . Chr(121) . Chr(108) . Chr(101) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(32) . Chr(105) . Chr(110) . Chr(115) . Chr(116) . Chr(101) . Chr(97) . Chr(100) . Chr(46) . Chr(10) . Chr(10) . Chr(69) . Chr(120) . Chr(97) . Chr(109) . Chr(112) . Chr(108) . Chr(101) . Chr(115) . Chr(58) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(74) . Chr(97) . Chr(118) . Chr(97) . Chr(83) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(44) . Chr(32) . Chr(117) . Chr(115) . Chr(105) . Chr(110) . Chr(103) . Chr(32) . Chr(97) . Chr(32) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(116) . Chr(97) . Chr(103) . Chr(58) . Chr(10) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(113) . Chr(117) . Chr(101) . Chr(114) . Chr(121) . Chr(46) . Chr(99) . Chr(111) . Chr(109) . Chr(47) . Chr(106) . Chr(113) . Chr(117) . Chr(101) . Chr(114) . Chr(121) . Chr(45) . Chr(51) . Chr(46) . Chr(54) . Chr(46) . Chr(48) . Chr(46) . Chr(109) . Chr(105) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(109) . Chr(117) . Chr(108) . Chr(116) . Chr(105) . Chr(112) . Chr(108) . Chr(101) . Chr(32) . Chr(74) . Chr(97) . Chr(118) . Chr(97) . Chr(83) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(32) . Chr(117) . Chr(115) . Chr(105) . Chr(110) . Chr(103) . Chr(32) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(116) . Chr(97) . Chr(103) . Chr(115) . Chr(58) . Chr(10) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(113) . Chr(117) . Chr(101) . Chr(114) . Chr(121) . Chr(46) . Chr(99) . Chr(111) . Chr(109) . Chr(47) . Chr(106) . Chr(113) . Chr(117) . Chr(101) . Chr(114) . Chr(121) . Chr(45) . Chr(51) . Chr(46) . Chr(54) . Chr(46) . Chr(48) . Chr(46) . Chr(109) . Chr(105) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(124) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(100) . Chr(110) . Chr(106) . Chr(115) . Chr(46) . Chr(99) . Chr(108) . Chr(111) . Chr(117) . Chr(100) . Chr(102) . Chr(108) . Chr(97) . Chr(114) . Chr(101) . Chr(46) . Chr(99) . Chr(111) . Chr(109) . Chr(47) . Chr(97) . Chr(106) . Chr(97) . Chr(120) . Chr(47) . Chr(108) . Chr(105) . Chr(98) . Chr(115) . Chr(47) . Chr(108) . Chr(111) . Chr(100) . Chr(97) . Chr(115) . Chr(104) . Chr(46) . Chr(106) . Chr(115) . Chr(47) . Chr(52) . Chr(46) . Chr(49) . Chr(55) . Chr(46) . Chr(50) . Chr(49) . Chr(47) . Chr(108) . Chr(111) . Chr(100) . Chr(97) . Chr(115) . Chr(104) . Chr(46) . Chr(109) . Chr(105) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(124) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(100) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(100) . Chr(101) . Chr(108) . Chr(105) . Chr(118) . Chr(114) . Chr(46) . Chr(110) . Chr(101) . Chr(116) . Chr(47) . Chr(110) . Chr(112) . Chr(109) . Chr(47) . Chr(97) . Chr(120) . Chr(105) . Chr(111) . Chr(115) . Chr(47) . Chr(100) . Chr(105) . Chr(115) . Chr(116) . Chr(47) . Chr(97) . Chr(120) . Chr(105) . Chr(111) . Chr(115) . Chr(46) . Chr(109) . Chr(105) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(78) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(115) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(32) . Chr(40) . Chr(119) . Chr(104) . Chr(101) . Chr(110) . Chr(32) . Chr(110) . Chr(111) . Chr(116) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(118) . Chr(101) . Chr(114) . Chr(116) . Chr(105) . Chr(110) . Chr(103) . Chr(32) . Chr(116) . Chr(111) . Chr(32) . Chr(97) . Chr(32) . Chr(102) . Chr(117) . Chr(108) . Chr(108) . Chr(32) . Chr(72) . Chr(84) . Chr(77) . Chr(76) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(41) . Chr(58) . Chr(32) . Chr(32) . Chr(10) . Chr(99) . Chr(111) . Chr(110) . Chr(115) . Chr(116) . Chr(32) . Chr(101) . Chr(120) . Chr(112) . Chr(114) . Chr(101) . Chr(115) . Chr(115) . Chr(32) . Chr(61) . Chr(32) . Chr(114) . Chr(101) . Chr(113) . Chr(117) . Chr(105) . Chr(114) . Chr(101) . Chr(40) . Chr(39) . Chr(101) . Chr(120) . Chr(112) . Chr(114) . Chr(101) . Chr(115) . Chr(115) . Chr(39) . Chr(41) . Chr(59) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(109) . Chr(117) . Chr(108) . Chr(116) . Chr(105) . Chr(112) . Chr(108) . Chr(101) . Chr(32) . Chr(78) . Chr(111) . Chr(100) . Chr(101) . Chr(46) . Chr(106) . Chr(115) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(58) . Chr(32) . Chr(32) . Chr(10) . Chr(99) . Chr(111) . Chr(110) . Chr(115) . Chr(116) . Chr(32) . Chr(102) . Chr(115) . Chr(32) . Chr(61) . Chr(32) . Chr(114) . Chr(101) . Chr(113) . Chr(117) . Chr(105) . Chr(114) . Chr(101) . Chr(40) . Chr(39) . Chr(102) . Chr(115) . Chr(39) . Chr(41) . Chr(124) . Chr(99) . Chr(111) . Chr(110) . Chr(115) . Chr(116) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(114) . Chr(101) . Chr(113) . Chr(117) . Chr(105) . Chr(114) . Chr(101) . Chr(40) . Chr(39) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(39) . Chr(41) . Chr(124) . Chr(99) . Chr(111) . Chr(110) . Chr(115) . Chr(116) . Chr(32) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(32) . Chr(61) . Chr(32) . Chr(114) . Chr(101) . Chr(113) . Chr(117) . Chr(105) . Chr(114) . Chr(101) . Chr(40) . Chr(39) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(39) . Chr(41) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(80) . Chr(121) . Chr(116) . Chr(104) . Chr(111) . Chr(110) . Chr(44) . Chr(32) . Chr(97) . Chr(32) . Chr(115) . Chr(105) . Chr(110) . Chr(103) . Chr(108) . Chr(101) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(108) . Chr(111) . Chr(111) . Chr(107) . Chr(115) . Chr(32) . Chr(108) . Chr(105) . Chr(107) . Chr(101) . Chr(32) . Chr(116) . Chr(104) . Chr(105) . Chr(115) . Chr(58) . Chr(32) . Chr(32) . Chr(10) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(109) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(109) . Chr(117) . Chr(108) . Chr(116) . Chr(105) . Chr(112) . Chr(108) . Chr(101) . Chr(32) . Chr(80) . Chr(121) . Chr(116) . Chr(104) . Chr(111) . Chr(110) . Chr(32) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(115) . Chr(58) . Chr(32) . Chr(32) . Chr(10) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(124) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(115) . Chr(121) . Chr(115) . Chr(124) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(114) . Chr(97) . Chr(110) . Chr(100) . Chr(111) . Chr(109) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(67) . Chr(43) . Chr(43) . Chr(44) . Chr(32) . Chr(97) . Chr(32) . Chr(115) . Chr(105) . Chr(110) . Chr(103) . Chr(108) . Chr(101) . Chr(32) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(58) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(10) . Chr(35) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(60) . Chr(105) . Chr(111) . Chr(115) . Chr(116) . Chr(114) . Chr(101) . Chr(97) . Chr(109) . Chr(62) . Chr(32) . Chr(32) . Chr(10) . Chr(10) . Chr(45) . Chr(32) . Chr(70) . Chr(111) . Chr(114) . Chr(32) . Chr(109) . Chr(117) . Chr(108) . Chr(116) . Chr(105) . Chr(112) . Chr(108) . Chr(101) . Chr(32) . Chr(67) . Chr(43) . Chr(43) . Chr(32) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(115) . Chr(58) . Chr(32) . Chr(32) . Chr(10) . Chr(35) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(60) . Chr(118) . Chr(101) . Chr(99) . Chr(116) . Chr(111) . Chr(114) . Chr(62) . Chr(124) . Chr(35) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(60) . Chr(97) . Chr(108) . Chr(103) . Chr(111) . Chr(114) . Chr(105) . Chr(116) . Chr(104) . Chr(109) . Chr(62) . Chr(124) . Chr(35) . Chr(105) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(60) . Chr(115) . Chr(116) . Chr(114) . Chr(105) . Chr(110) . Chr(103) . Chr(62) . "`n`nIf no libraries are needed for your built-in function, just type null this indicates that there are no external libraries required for the function's operation."


Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15
guiEditY := guiEditY + 30
guiEditYDescription := guiEditY
Gui, Add, Edit, x5 y%guiEditYDescription% w%guiW% h25 gEditFuncDescription vEditFuncDescription bg000000 cffffff -Border r5, Description
GuiControl, Text, EditFuncDescription, %MyFuncsDescription%
buttonX := guiW + 15
Gui, Font, s13
guiEditTextV := "Description Info Button:`n`nThe description field lets you provide a brief explanation of what your built-in function does. This is especially useful for documentation purposes. Keep it concise, and if you need to use multiple lines, you can insert a tilde (~) to create new lines in the generated documentation.`n`n- One-line description: Write a simple description of your built-in function.`n- Multi-line support: Use the tilde (~) to split long descriptions into multiple lines.`n`nExample descriptions:`n" . "1. This function calculates the sum of two numbers.`n2. Converts a string to uppercase letters for display.`n3. Retrieves data from the server and handles any errors.`n4. Handles button clicks and updates the UI accordingly.`n5. Generates a random number between 1 and 100." . "`n`nIf no description is needed for the function, simply type null this ensures that the documentation generation does not include any unnecessary information."
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15
guiEditY := guiEditY + 30


Gui, Font, s12
Gui, Add, IDE, x5 y%guiEditY% w%guiW% h500 gIDEcpp vIDEcpp lc_cpp
Gui, Add, IDE, x5 y%guiEditY% w%guiW% h500 gIDEpy vIDEpy lpython
Gui, Add, IDE, x5 y%guiEditY% w%guiW% h500 gIDEjs vIDEjs ljavascript
if (MyFuncsCode = null) or (MyFuncsCode = "")
{
MyFuncsCode := "null"
}

if (MyFuncsLang = "cpp")
{
GuiControl, textIDE, IDEcpp, %MyFuncsCode%
GuiControl, Show, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Hide, IDEjs
}
if (MyFuncsLang = "py")
{
GuiControl, textIDE, IDEpy, %MyFuncsCode%
GuiControl, Hide, IDEcpp
GuiControl, Show, IDEpy
GuiControl, Hide, IDEjs
}
if (MyFuncsLang = "js")
{
GuiControl, textIDE, IDEjs, %MyFuncsCode%
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Show, IDEjs
}


Gui, Font, s13
guiEditTextV := "IDE Info Button:`n`nThis is where you can write or paste the actual code for your built-in function. The code you enter here will be used when your built-in function is called in the programming language you're creating. Make sure the function name matches the name you've defined, and that your code is written correctly for the language you're targeting.`n`n- Write your built-in function code: Enter the code for the function you're creating here.`n- Make sure it's correct: Ensure the syntax matches the target language (JavaScript, Python, C++).`n- Function name consistency: The function name in your code should match the name you've set for the function.`n`nExamples:`njs:`n`nfunction add(a, b) {`n  return a + b;`n}`n`npy:`n`ndef add(a, b):`n    return a + b`n`ncpp:`n`nint add(int a, int b) {`n    return a + b;`n}"
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h65 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15


guiEditY := guiEditY + 510
IDEshowguiEditY := guiEditY + 50
Gui, Add, Button, x5 y%guiEditY% w200 h40 gIDEshow vIDEshow, Update live preview
Gui, Font, s13
guiEditTextV := "Update Live Preview Button:`n`nThis button allows you to see how your custom programming language looks in real time. `n`n- Update Live Preview: Clicking this button will refresh the preview to show the latest version of your language, reflecting all the customizations you've made.`n- Syntax Focus: The live preview displays your language's syntax, including custom keywords, operators, and other rules you've set up.`n- Immediate Feedback: Use the preview to quickly validate how your changes affect the overall structure of your language.`n`nAlways click " . Chr(34) . "Update Live Preview" . Chr(34) . " to ensure you're seeing the most up-to-date version of your language design."
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h65 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15
guiEditY := guiEditY + 50
Gui, Font, s15
guiEditY := guiEditY + 510
Gui, Add, Button, x10 y%guiEditY% w140 h40 gBuildButton, Build
Gui, Font, s13
guiEditTextV := "Build Button Explanation:`n`nThe Build button allows you to download the programming language you just created, along with relevant files for its use.`n`n- Toggle all HTVM pre-made Built-in functions: This switch lets you choose whether to include or exclude HTVM's pre-made functions in your generated files. When toggled on, these built-in functions provided by HTVM will be integrated into the language, offering a wide range of functionalities that enhance the language's capabilities.`n`n- Download HT-instructions.txt: Clicking this button downloads a file containing specific instructions for the compiler to understand your language. This file is essential for ensuring the correct functioning of the language you've created.`n`n- Download IDE.html: This button allows you to download an HTML file containing an IDE tailored for the language you just created. It provides a convenient development environment accessible directly from your browser.`n`nBy clicking these buttons, you can export your custom language with or without HTVM's built-in functions and obtain all necessary components to start using your language effectively."
Gui, Add, Button, x%buttonX% y%guiEditY% w70 h28 r3 v%guiEditTextV% gButtonINFO bg181818 cffffff, INFO
Gui, Font, s15


gosub, IDEshow
GuiControl, Focus, Button8
Gui 5: Hide
Return

MyDropDown:
;MsgBox, % A_GuiControl
currentFuncNameOLD := A_GuiControl
currentFuncName := A_GuiControl
MyDropDownFuncsNUM := 0
Loop, Parse, MyDropDownFuncs, "|"
{
if (A_LoopField = A_GuiControl)
{
funcWeAreModifying := A_Index
break
}
}

GuiControl, Destroy, EditFuncName
Gui, Add, Edit, x5 y%guiEditYNOTF% w%guiW% h25 gEditFuncName vEditFuncName bg000000 cffffff -Border r5, Name of the function
nameOfFuncTemp := A_GuiControl
GuiControl, Text, EditFuncName, %nameOfFuncTemp%


MyFuncsDescription := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . nameOfFuncTemp)
GuiControl, Destroy, EditFuncDescription
Gui, Add, Edit, x5 y%guiEditYDescription% w%guiW% h25 gEditFuncDescription vEditFuncDescription bg000000 cffffff -Border r5, Description
GuiControl, Text, EditFuncDescription, %MyFuncsDescription%

MyFuncsLibs := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . nameOfFuncTemp)
GuiControl, Destroy, EditFuncLibs
Gui, Add, Edit, x5 y%guiEditYLibs% w%guiW% h25 gEditFuncLibs vEditFuncLibs bg000000 cffffff -Border r5, Libs
GuiControl, Text, EditFuncLibs, %MyFuncsLibs%


MyFuncsLang := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . nameOfFuncTemp)
if (MyFuncsLang = null)
{
MyFuncsLang := "cpp"
}

if (MyFuncsLang = "cpp")
{
GuiControl, Disable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangPy

GuiControl, Show, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Hide, IDEjs
}
if (MyFuncsLang = "js")
{
GuiControl, Disable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangPy

GuiControl, Show, IDEjs
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEpy
}
if (MyFuncsLang = "py")
{
GuiControl, Disable, EditFuncButtonLangPy
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp

GuiControl, Show, IDEpy
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEjs
}


MyFuncsCode := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . nameOfFuncTemp)
if (MyFuncsCode = null) or (MyFuncsCode = "")
{
MyFuncsCode := "null"
}

if (MyFuncsLang = "cpp")
{
GuiControl, textIDE, IDEcpp, %MyFuncsCode%
}
if (MyFuncsLang = "py")
{
GuiControl, textIDE, IDEpy, %MyFuncsCode%
}
if (MyFuncsLang = "js")
{
GuiControl, textIDE, IDEjs, %MyFuncsCode%
}


Return

AddNewFuncButton:
MyDropDownFuncsNUM := 0
Loop, Parse, MyDropDownFuncs, "|"
{
MyDropDownFuncsNUM++
}
MyDropDownFuncsNUM++
MyDropDownFuncs .= "|" . "HTVM_func" . MyDropDownFuncsNUM
GuiControl, Destroy, MyDropDownV
Gui, Add, DropDownList, x5 y%guiEditYDDD% gMyDropDown vMyDropDownV, " + variables.MyDropDownFuncs + "
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs", MyDropDownFuncs)
funcWeAreModifying := MyDropDownFuncsNUM

GuiControl, Destroy, EditFuncName
Gui, Add, Edit, x5 y%guiEditYNOTF% w%guiW% h25 gEditFuncName vEditFuncName bg000000 cffffff -Border r5, Name of the function
nameOfFuncTemp := "HTVM_func" . MyDropDownFuncsNUM
currentFuncNameOLD := nameOfFuncTemp
GuiControl, Text, EditFuncName, %nameOfFuncTemp%
currentFuncName := nameOfFuncTemp


MyFuncsDescription := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . nameOfFuncTemp)
GuiControl, Destroy, EditFuncDescription
Gui, Add, Edit, x5 y%guiEditYDescription% w%guiW% h25 gEditFuncDescription vEditFuncDescription bg000000 cffffff -Border r5, Description
GuiControl, Text, EditFuncDescription, %MyFuncsDescription%

MyFuncsLibs := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . nameOfFuncTemp)
GuiControl, Destroy, EditFuncLibs
Gui, Add, Edit, x5 y%guiEditYLibs% w%guiW% h25 gEditFuncLibs vEditFuncLibs bg000000 cffffff -Border r5, Libs
GuiControl, Text, EditFuncLibs, %MyFuncsLibs%


StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncName, "cpp")
allLocalSrorageLinks .= currentFuncName . "|"
MyFuncsLang := "cpp"

if (MyFuncsLang = "cpp")
{
GuiControl, Disable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangPy

GuiControl, Show, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Hide, IDEjs
}
if (MyFuncsLang = "js")
{
GuiControl, Disable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangPy

GuiControl, Show, IDEjs
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEpy
}
if (MyFuncsLang = "py")
{
GuiControl, Disable, EditFuncButtonLangPy
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp

GuiControl, Show, IDEpy
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEjs
}

MyFuncsCode := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . nameOfFuncTemp)
if (MyFuncsCode = null) or (MyFuncsCode = "")
{
MyFuncsCode := "null"
}

if (MyFuncsLang = "cpp")
{
GuiControl, textIDE, IDEcpp, %MyFuncsCode%
}
if (MyFuncsLang = "py")
{
GuiControl, textIDE, IDEpy, %MyFuncsCode%
}
if (MyFuncsLang = "js")
{
GuiControl, textIDE, IDEjs, %MyFuncsCode%
}



Return


isFuncNameValid(FuncName)
{
Loop, Parse, FuncName
{
matchPosition := RegExMatch(A_LoopField, "[A-Za-z0-9_]+")
if (matchPosition = 0)
{
return false
}
}

if (!(RegExMatch(FuncName, "^[^\\r\\n]*$"))) or (InStr(FuncName, Chr(34)))
{
return false
}
return true
}


EditFuncName:
tempReadSave1 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncNameOLD)
tempReadSave2 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . currentFuncNameOLD)
tempReadSave3 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . currentFuncNameOLD)
tempReadSave4 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . currentFuncNameOLD)


StoreLocally("d", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncNameOLD)
StoreLocally("d", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . currentFuncNameOLD)
StoreLocally("d", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . currentFuncNameOLD)
StoreLocally("d", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . currentFuncNameOLD)


StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . A_GuiControl, tempReadSave1)
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . A_GuiControl, tempReadSave2)
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . A_GuiControl, tempReadSave3)
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . A_GuiControl, tempReadSave4)
if (!(isFuncNameValid(A_GuiControl)))
{
MsgBox, 16, Error: Invalid Function Name, Function names must start with a letter or underscore and can only contain letters numbers and underscores also do not use new lines or carriage returns.
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
currentFuncName := A_GuiControl
currentFuncNameOLD := A_GuiControl
MyDropDownFuncsOut := ""
Loop, Parse, MyDropDownFuncs, "|"
{
if (A_Index = funcWeAreModifying)
{
MyDropDownFuncsOut .= A_GuiControl . "|"
}
else
{
MyDropDownFuncsOut .= A_LoopField . "|"
}
}
StringTrimRight, MyDropDownFuncs, MyDropDownFuncsOut, 1
GuiControl, Destroy, MyDropDownV
Gui, Add, DropDownList, x5 y%guiEditYDDD% gMyDropDown vMyDropDownV, " + variables.MyDropDownFuncs + "
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs", MyDropDownFuncs)



Return

EditFuncLibs:
if (StoreLocally("r", "HTVM-EditFuncLIBS") = null) or (StoreLocally("r", "HTVM-EditFuncLIBS") = "")
{
StoreLocally("s", "HTVM-EditFuncLIBS", "dummy data")
MsgBox, 64, What dose ~ char do when we add it!, It will be replaced with a new line as the libs section must be written in only one line. You cannot add a new line and the ~ character is not commonly used.
}
if (!(RegExMatch(A_GuiControl, "^[^\\r\\n]*$")))
{
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns.
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . currentFuncName, A_GuiControl)
Return

EditFuncDescription:
if (StoreLocally("r", "HTVM-EditFuncDescription") = null) or (StoreLocally("r", "HTVM-EditFuncDescription") = "")
{
StoreLocally("s", "HTVM-EditFuncDescription", "dummy data")
MsgBox, 64, What dose ~ char do when we add it!, It will be replaced in the documentation with a new line as the description section must be written in only one line. You cannot add a new line and the ~ character is not commonly used.
}
if (!(RegExMatch(A_GuiControl, "^[^\\r\\n]*$")))
{
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns.
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . currentFuncName, A_GuiControl)
Return



IDEcpp:
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . currentFuncName, A_GuiControl)
Return

IDEpy:
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . currentFuncName, A_GuiControl)
Return

IDEjs:
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . currentFuncName, A_GuiControl)
Return

;;;;;;;;;;;;;;;;;;;;;;;;;
IDEshow:
allData := ""

defaultSyntax := "cpp`nht`nStringTrimLeft,OUTVAR,INVAR,param1|StringTrimRight,OUTVAR,INVAR,param1|Random,OUTVAR,param1,param2|Sleep,param1|FileRead,OUTVAR,'param1|FileAppend,INVAR,'param1|FileDelete,'param1|Sort,OUTVAR,'param1,'param2`nint`nstr`nbool`nfloat`nint8`nint16`nint32`nint64`nif`nelse if`nelse`nwhile`nfor`nLoop`nLoop,`nLoop, Parse,`ncontinue`nbreak`nfunc`nawait`n=`n+=`n+=`n-=`n*=`n/=`n+`n+`n==`n!`n>`n<`n>=`n<=`nor`nand`n!=`ntrue`nfalse`nswitch`ncase`ndefault`nthrow`nErrorMsg`ntry`ncatch`nfinally`n.push`n.pop`n.size`n.insert`n.rm`n.indexOf`narr`narr int`narr str`narr float`narr bool`nvar`nlet`nconst`nreturn`nend`nglobal`n//`n/*`n*/`n" . Chr(92) . "`n0`nA_Index`nA_LoopField`nmain`non`non`noff`noff`non`noff`ncpp`non`non`noff"
Loop, Parse, defaultSyntax, `n, `r
{
defaultSyntax%A_Index% := A_LoopField
}

Loop, 85
{

if (EditText%A_Index% != "") or (EditText%A_Index% != null)
{
if (A_Index = 2)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 1) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 24) && (A_Index <= 29)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 6) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 47)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 2) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 51) && (A_Index <= 56)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 3) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 68)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 7) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 69)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 70)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 71)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 4) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 72)
{

if (Trim(EditText%A_Index%) = "-")
{
MsgBox, 16, Invalid Instructions, At AHKlikeLoopsIndexedAt you only added a - character. A number must follow the - or it should be a standalone number.
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}

if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 5) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 0) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
}

if (Trim(EditText%A_Index%) = "") or (EditText%A_Index% = null)
{
EditText%A_Index% := defaultSyntax%A_Index%
}

allData .= Trim(EditText%A_Index%) . "`n"
}

allFuncNamesForSavingIt := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs")
if (allFuncNamesForSavingIt != null)
{
allFuncNamesForSavingItOut := ""
Loop, Parse, allFuncNamesForSavingIt, "|"
{
tempReadSave1 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . A_LoopField)
tempReadSave2 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . A_LoopField)
tempReadSave3 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . A_LoopField)
tempReadSave4 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . A_LoopField)


bodyFuncTemp1 := "func======================func==============`n"
bodyFuncTemp2 := "lang: " . tempReadSave1
bodyFuncTemp3 := "`nname: " . A_LoopField
bodyFuncTemp4 := "`nlibs: " . tempReadSave4
bodyFuncTemp5 := "`ndescription: " . tempReadSave2
bodyFuncTemp6 := "`n`n" . tempReadSave3 . "`n`n"
bodyFuncTemp7 := "funcEND======================funcEND=============="

allFuncNamesForSavingItOut .= "`n" . bodyFuncTemp1 . bodyFuncTemp2 . bodyFuncTemp3 . bodyFuncTemp4 . bodyFuncTemp5 . bodyFuncTemp6 . bodyFuncTemp7 . "`n"
}

extraFuncNeedLoopParse := "`nfunc======================func==============`nlang: cpp`nname: LoopParseFunc`nlibs: #include <vector>|#include <string>|#include <regex>`ndescription: LoopParseFunc func is a func`n`n// Function to escape special characters for regex`nstd::string escapeRegex(const std::string& str) {`n    static const std::regex specialChars{R" . Chr(34) . "([-[" . Chr(92) . "]{}()*+?.," . Chr(92) . "^$|#" . Chr(92) . "s])" . Chr(34) . "};`n    return std::regex_replace(str, specialChars, R" . Chr(34) . "(" . Chr(92) . "$&)" . Chr(34) . ");`n}`n`n// Function to split a string based on delimiters`nstd::vector<std::string> LoopParseFunc(const std::string& var, const std::string& delimiter1 = " . Chr(34) . "" . Chr(34) . ", const std::string& delimiter2 = " . Chr(34) . "" . Chr(34) . ") {`n    std::vector<std::string> items;`n    if (delimiter1.empty() && delimiter2.empty()) {`n        // If no delimiters are provided, return a list of characters`n        for (char c : var) {`n            items.push_back(std::string(1, c));`n        }`n    } else {`n        // Escape delimiters for regex`n        std::string escapedDelimiters = escapeRegex(delimiter1 + delimiter2);`n        // Construct the regular expression pattern for splitting the string`n        std::string pattern = " . Chr(34) . "[" . Chr(34) . " + escapedDelimiters + " . Chr(34) . "]+" . Chr(34) . ";`n        std::regex regexPattern(pattern);`n        std::sregex_token_iterator iter(var.begin(), var.end(), regexPattern, -1);`n        std::sregex_token_iterator end;`n        while (iter != end) {`n            items.push_back(*iter++);`n        }`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: LoopParseFunc`nlibs: null`ndescription: LoopParseFunc splits a string into an array based on specified delimiters or returns an array of characters if no delimiters are provided.`n`nfunction LoopParseFunc(varString, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . ") {`n    let items;`n    if (!delimiter1 && !delimiter2) {`n        // If no delimiters are provided, return an array of characters`n        items = [...varString];`n    } else {`n        // Construct the regular expression pattern for splitting the string`n        let pattern = new RegExp('[' + delimiter1.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + delimiter2.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + ']+');`n        // Split the string using the constructed pattern`n        items = varString.split(pattern);`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: LoopParseFunc`nlibs: import re`ndescription: LoopParseFunc splits a string into a list based on specified delimiters or returns a list of characters if no delimiters are provided.`n`ndef LoopParseFunc(var, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . "):`n    if not delimiter1 and not delimiter2:`n        # If no delimiters are provided, return a list of characters`n        items = list(var)`n    else:`n        # Construct the regular expression pattern for splitting the string`n        pattern = r'[' + re.escape(delimiter1) + re.escape(delimiter2) + r']+'`n        # Split the string using the constructed pattern`n        items = re.split(pattern, var)`n    return items`n`nfuncEND======================funcEND==============`n"

Gui 5: Show
Sleep, 50
GuiControl, Focus, Button8
allData := allData . "`n" . extraFuncNeedLoopParse . "`n" . allFuncNamesForSavingItOut . "`n" . ToggleMoreBuildInFuncsTEXT
variables.sha256 = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(variables.allData)).then(buffer => Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join(''));

;MsgBox, % sha256
}
if (A_ScreenHeight > A_ScreenWidth)
{
runHTML(Gui1, "iframe1", 1, -100, IDEshowguiEditY, guiW + 125, 500, IDEgenerataion(allData, sha256, 1))
}
else
{
runHTML(Gui1, "iframe1", 1.5, 5, IDEshowguiEditY, guiW, 500, IDEgenerataion(allData, sha256, 1))
}
Gui 5: Hide
GuiControl, Focus, Button21
GuiControl, Focus, IDEshow
Return
;;;;;;;;;;;;;;;;;;;;;;;;;

EditFuncButtonLangCpp:
GuiControl, Show, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Hide, IDEjs

GuiControl, Disable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangPy
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncName, "cpp")
allLocalSrorageLinks .= currentFuncName . "|"
Return

EditFuncButtonLangPy:
GuiControl, Hide, IDEcpp
GuiControl, Show, IDEpy
GuiControl, Hide, IDEjs

GuiControl, Disable, EditFuncButtonLangPy
GuiControl, Enable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncName, "py")
allLocalSrorageLinks .= currentFuncName . "|"
Return

EditFuncButtonLangJs:
GuiControl, Hide, IDEcpp
GuiControl, Hide, IDEpy
GuiControl, Show, IDEjs

GuiControl, Disable, EditFuncButtonLangJs
GuiControl, Enable, EditFuncButtonLangCpp
GuiControl, Enable, EditFuncButtonLangPy
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . currentFuncName, "js")
allLocalSrorageLinks .= currentFuncName . "|"
Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ButtonINFO:
;MsgBox, % A_GuiControl
ButtonINFOvHolder := A_GuiControl
Gui, Hide
Gui, Show
Gui 3: Show
GuiControl 3: Text, DisplayInfoData, %A_GuiControl%
GuiControl, Focus, Button8
GuiControl 3: Focus, ButtonInfoOK
Return

ButtonInfoOK:
Gui 3: Hide
GuiControl, Focus, %ButtonINFOvHolder%
Return


GettingStartedButton:
MsgBox, Getting Started
Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

rulesForEditBoxesSyntaxDef(text, mode)
{
if (Trim(text) = "")
{
return true
}

if (text = "0")
{
return true
}

if (mode = 9)
{
if (!(RegExMatch(text, "^[^\\r\\n]*$")))
{
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns or colons or double quotes.
return false
}
return text
}

if (mode = 7)
{

if (!(RegExMatch(text, "^[^\\r\\n]*$"))) or (InStr(text, Chr(34)))
{
if (InStr(text, ":")) && (mode = 6)
{
if (!(RegExMatch(text, "^[^\\r\\n]*$"))) or (InStr(text, Chr(34)))
{
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns or colons or double quotes.
return false
}
return text
}
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns or colons or double quotes.
return false
}

return text
}
else
{
if (!(RegExMatch(text, "^[^\\r\\n:;]*$"))) or (InStr(text, Chr(34)))
{
if (InStr(text, ":")) && (mode = 6)
{
if (!(RegExMatch(text, "^[^\\r\\n]*$"))) or (InStr(text, Chr(34)))
{
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns or colons or double quotes.
return false
}
return text
}
MsgBox, 16, Invalid input, Please do not use new lines or carriage returns or colons or double quotes.
return false
}
}

if (mode = 1)
{
; mode 1
; File Extension Rule
if (RegExMatch(text, "^[a-zA-Z0-9]+$"))
{
return text
}
else
{
MsgBox, 16, Invalid input, File Extension Rule: The file extension can only contain letters or numbers and there should be no spaces or other characters.
return false
}
}

if (mode = 2)
{
; mode 2
; ErrorMsg Rule
if (isFuncNameValid(text))
{
return text
}
else
{
MsgBox, 16, Invalid input, ErrorMsg Rule: The error message should consist only of letters numbers or underscores similar to a function name without spaces or special characters.
return false
}
}

if (mode = 3)
{
; mode 3
; Array Types Rule
if (RegExMatch(text, "^\\.[a-zA-Z0-9_]+$"))
{
return text
}
else
{
if (text = ".")
{
return text
}
MsgBox, 16, Invalid input, Array Types Rule: Array types must start with a dot (.) and should consist only of letters or numbers or underscores similar to a function name without spaces or special characters.
return false
}
}

if (mode = 4)
{
; mode 4
; Escape Character Rule
if (StrLen(text) = 1)
{
return text
}
else
{
MsgBox, 16, Invalid input, Escape Character Rule: The escape character must be a single character with no new lines or colons or carriage returns or double quotes or spaces.
return false
}
}

if (mode = 5)
{
; mode 5
; AHKlikeLoopsIndexedAt Rule
if (RegExMatch(text, "^-?\\d+$"))
{
return text
}
else
{
if (text = "-") or (text = "0")
{
return text
}
MsgBox, 16, Invalid input, AHKlikeLoopsIndexedAt Rule: This value must be a number and can optionally be negative (indicated by a leading -).
return false
}
}

if (mode = 7)
{
; mode 7
; Comments Rule
return text
}


return text
}

Edit1:
StringTrimLeft, A_GuiControl, A_GuiControl, 5
EditText1 := StrLower(A_GuiControl)
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-1", EditText1)

if (EditText1 = "cpp")
{
GuiControl, Disable, Edit1CPP
GuiControl, Enable, Edit1JS
GuiControl, Enable, Edit1PY
}
if (EditText1 = "js")
{
GuiControl, Disable, Edit1JS
GuiControl, Enable, Edit1CPP
GuiControl, Enable, Edit1PY
}
if (EditText1 = "py")
{
GuiControl, Disable, Edit1PY
GuiControl, Enable, Edit1JS
GuiControl, Enable, Edit1CPP
}
if (doneLoading = 1)
{
if (EditText83 = "off") && (EditText1 = "cpp")
{
document.getElementById('Gui1Edit83').click()
MsgBox, 48, useInJavaScriptAlwaysUseVar, If you choose cpp then useInJavaScriptAlwaysUseVar will always be toggled on.
}

if (EditText76 = "off") && (EditText1 = "cpp")
{
document.getElementById('Gui1Edit76').click()
MsgBox, 48, useFuncKeyWord, useFuncKeyWord This option allows you to use a keyword to define functions when transpiling to Python (py) or JavaScript (js) or C++ (cpp). If it is turned off you won't need to use a function definition keyword for Python and JavaScript. If you select C++ as your language this option will always be on and cannot be turned off. Additionally if you have useFuncKeyWord turned off and then switch to C++ it will automatically be turned on. When useFuncKeyWord is off useCurlyBraces will automatically be toggled on and if you turn off useFuncKeyWord it will also toggle off useEnd if it was on.
}
}
return
Return

Edit2:
EditText2 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText2, 1) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-2", EditText2)
Return

Edit3:
EditText3 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText3, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-3", EditText3)
Return

Edit4:
EditText4 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText4, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-4", EditText4)
Return

Edit5:
EditText5 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText5, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-5", EditText5)
Return

Edit6:
EditText6 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText6, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-6", EditText6)
Return

Edit7:
EditText7 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText7, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-7", EditText7)
Return

Edit8:
EditText8 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText8, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-8", EditText8)
Return

Edit9:
EditText9 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText9, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-9", EditText9)
Return

Edit10:
EditText10 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText10, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-10", EditText10)
Return

Edit11:
EditText11 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText11, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-11", EditText11)
Return

Edit12:
EditText12 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText12, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-12", EditText12)
Return

Edit13:
EditText13 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText13, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-13", EditText13)
Return

Edit14:
EditText14 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText14, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-14", EditText14)
Return

Edit15:
EditText15 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText15, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-15", EditText15)
Return

Edit16:
EditText16 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText16, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-16", EditText16)
Return

Edit17:
EditText17 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText17, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-17", EditText17)
Return

Edit18:
EditText18 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText18, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-18", EditText18)
Return

Edit19:
EditText19 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText19, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-19", EditText19)
Return

Edit20:
EditText20 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText20, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-20", EditText20)
Return

Edit21:
EditText21 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText21, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-21", EditText21)
Return

Edit22:
EditText22 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText22, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-22", EditText22)
Return

Edit23:
EditText23 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText23, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-23", EditText23)
Return

Edit24:
EditText24 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText24, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-24", EditText24)
Return

Edit25:
EditText25 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText25, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-25", EditText25)
Return

Edit26:
EditText26 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText26, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-26", EditText26)
Return

Edit27:
EditText27 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText27, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-27", EditText27)
Return

Edit28:
EditText28 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText28, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-28", EditText28)
Return

Edit29:
EditText29 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText29, 6) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-29", EditText29)
Return

Edit30:
EditText30 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText30, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-30", EditText30)
Return

Edit31:
EditText31 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText31, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-31", EditText31)
Return

Edit32:
EditText32 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText32, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-32", EditText32)
Return

Edit33:
EditText33 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText33, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-33", EditText33)
Return

Edit34:
EditText34 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText34, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-34", EditText34)
Return

Edit35:
EditText35 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText35, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-35", EditText35)
Return

Edit36:
EditText36 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText36, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-36", EditText36)
Return

Edit37:
EditText37 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText37, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-37", EditText37)
Return

Edit38:
EditText38 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText38, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-38", EditText38)
Return

Edit39:
EditText39 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText39, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-39", EditText39)
Return

Edit40:
EditText40 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText40, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-40", EditText40)
Return

Edit41:
EditText41 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText41, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-41", EditText41)
Return

Edit42:
EditText42 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText42, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-42", EditText42)
Return

Edit43:
EditText43 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText43, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-43", EditText43)
Return

Edit44:
EditText44 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText44, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-44", EditText44)
Return

Edit45:
EditText45 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText45, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-45", EditText45)
Return

Edit46:
EditText46 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText46, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-46", EditText46)
Return

Edit47:
EditText47 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText47, 2) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-47", EditText47)
Return

Edit48:
EditText48 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText48, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-48", EditText48)
Return

Edit49:
EditText49 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText49, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-49", EditText49)
Return

Edit50:
EditText50 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText50, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-50", EditText50)
Return

Edit51:
EditText51 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText51, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-51", EditText51)
Return

Edit52:
EditText52 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText52, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-52", EditText52)
Return

Edit53:
EditText53 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText53, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-53", EditText53)
Return

Edit54:
EditText54 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText54, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-54", EditText54)
Return

Edit55:
EditText55 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText55, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-55", EditText55)
Return

Edit56:
EditText56 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText56, 3) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-56", EditText56)
Return

Edit57:
EditText57 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText57, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-57", EditText57)
Return

Edit58:
EditText58 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText58, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-58", EditText58)
Return

Edit59:
EditText59 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText59, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-59", EditText59)
Return

Edit60:
EditText60 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText60, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-60", EditText60)
Return

Edit61:
EditText61 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText61, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-61", EditText61)
Return

Edit62:
EditText62 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText62, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-62", EditText62)
Return

Edit63:
EditText63 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText63, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-63", EditText63)
Return

Edit64:
EditText64 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText64, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-64", EditText64)
Return

Edit65:
EditText65 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText65, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-65", EditText65)
Return

Edit66:
EditText66 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText66, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-66", EditText66)
Return

Edit67:
EditText67 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText67, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-67", EditText67)
Return

Edit68:
EditText68 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText68, 7) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-68", EditText68)
Return

Edit69:
EditText69 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText69, 9) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
if (StrLower(EditText69) = StrLower(EditText70))
{
MsgBox, 16, ERROR, You can't have the comment block start and end with the same one. Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-69", EditText69)
Return

Edit70:
EditText70 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText70, 9) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
if (StrLower(EditText69) = StrLower(EditText70))
{
MsgBox, 16, ERROR, You can't have the comment block start and end with the same one. Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-70", EditText70)
Return

Edit71:
EditText71 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText71, 4) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-71", EditText71)
Return

Edit72:
EditText72 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText72, 5) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-72", EditText72)
Return

Edit73:
EditText73 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText73, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-73", EditText73)
Return

Edit74:
EditText74 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText74, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-74", EditText74)
Return

Edit75:
EditText75 := A_GuiControl
if (!(rulesForEditBoxesSyntaxDef(EditText75, 0) != false))
{
MsgBox, 16, ERROR, Please fix your error by pressing the Backspace!!!
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-75", EditText75)
Return

Edit76:
EditText76 := A_GuiControl
if (EditText76 = "1")
{
EditText76 := "on"
}
else
{
EditText76 := "off"
}
if (doneLoading = 1)
{
if (EditText76 = "off") && (EditText1 = "cpp")
{
document.getElementById('Gui1Edit76').click()
MsgBox, 48, useFuncKeyWord, useFuncKeyWord This option allows you to use a keyword to define functions when transpiling to Python (py) or JavaScript (js) or C++ (cpp). If it is turned off you won't need to use a function definition keyword for Python and JavaScript. If you select C++ as your language this option will always be on and cannot be turned off. Additionally if you have useFuncKeyWord turned off and then switch to C++ it will automatically be turned on. When useFuncKeyWord is off useCurlyBraces will automatically be toggled on and if you turn off useFuncKeyWord it will also toggle off useEnd if it was on.
}


if (EditText76 = "off") && (EditText77 = "off")
{
document.getElementById('Gui1Edit77').click()
MsgBox, 48, useFuncKeyWord, useFuncKeyWord This option allows you to use a keyword to define functions when transpiling to Python (py) or JavaScript (js) or C++ (cpp). If it is turned off you won't need to use a function definition keyword for Python and JavaScript. If you select C++ as your language this option will always be on and cannot be turned off. Additionally if you have useFuncKeyWord turned off and then switch to C++ it will automatically be turned on. When useFuncKeyWord is off useCurlyBraces will automatically be toggled on and if you turn off useFuncKeyWord it will also toggle off useEnd if it was on.
}
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-76", EditText76)
Return

Edit77:
EditText77 := A_GuiControl
if (EditText77 = "1")
{
EditText77 := "on"
}
else
{
EditText77 := "off"
}

if (doneLoading = 1)
{
if (EditText78 = "on") && (EditText77 = "on")
{
document.getElementById('Gui1Edit78').click()
MsgBox, 48, useEnd, If useEnd is toggled on it will automatically untoggle useCurlyBraces to prevent conflicts between the two styles. When useEnd is toggled on useFuncKeyWord will also be toggled on to maintain consistency in your code syntax.
}

if (EditText76 = "off") && (EditText77 = "off")
{
document.getElementById('Gui1Edit76').click()
MsgBox, 48, useCurlyBraces, If useCurlyBraces is untoggled it will automatically toggle useFuncKeyWord on. When useCurlyBraces is enabled it will automatically untoggle useEnd if it was on. This ensures that both methods of defining code blocks do not conflict.
}

if (EditText77 = "off") && (EditText78 = "off")
{
MsgBox, 64, Python indentation style, When both useEnd and useCurlyBraces are off the language will adopt Python's indentation style for defining code blocks. This means that code blocks will be delineated based on indentation levels rather than using keywords or curly braces.
}

if (EditText77 = "on") && (EditText81 = "on")
{
document.getElementById('Gui1Edit81').click()
MsgBox, 64, Incompatibility, You cannot have both useCurlyBraces and usePythonicColonSyntax toggled at the same time!
}

}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-77", EditText77)
Return

Edit78:
EditText78 := A_GuiControl
if (EditText78 = "1")
{
EditText78 := "on"
}
else
{
EditText78 := "off"
}
if (doneLoading = 1)
{
if (EditText78 = "on") && (EditText77 = "on")
{
document.getElementById('Gui1Edit77').click()
MsgBox, 48, useEnd, If useEnd is toggled on it will automatically untoggle useCurlyBraces to prevent conflicts between the two styles. When useEnd is toggled on useFuncKeyWord will also be toggled on to maintain consistency in your code syntax.
}

if (EditText78 = "on") && (EditText76 = "off")
{
document.getElementById('Gui1Edit76').click()
MsgBox, 48, useEnd, If useEnd is toggled on it will automatically untoggle useCurlyBraces to prevent conflicts between the two styles. When useEnd is toggled on useFuncKeyWord will also be toggled on to maintain consistency in your code syntax.
}

if (EditText77 = "off") && (EditText78 = "off")
{
MsgBox, 64, Python indentation style, When both useEnd and useCurlyBraces are off the language will adopt Python's indentation style for defining code blocks. This means that code blocks will be delineated based on indentation levels rather than using keywords or curly braces.
}
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-78", EditText78)
Return

Edit79:
EditText79 := A_GuiControl
if (EditText79 = "1")
{
EditText79 := "on"
}
else
{
EditText79 := "off"
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-79", EditText79)
Return

Edit80:
EditText80 := A_GuiControl
if (EditText80 = "1")
{
EditText80 := "on"
}
else
{
EditText80 := "off"
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-80", EditText80)
Return

Edit81:
EditText81 := A_GuiControl
if (EditText81 = "1")
{
EditText81 := "on"
}
else
{
EditText81 := "off"
}

if (doneLoading = 1)
{
if (EditText77 = "on") && (EditText81 = "on")
{
document.getElementById('Gui1Edit77').click()
MsgBox, 64, Incompatibility, You cannot have both useCurlyBraces and usePythonicColonSyntax toggled at the same time!
}
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-81", EditText81)
Return

Edit82:
StringTrimLeft, A_GuiControl, A_GuiControl, 6
EditText82 := StrLower(A_GuiControl)
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-82", EditText82)

if (EditText82 = "cpp")
{
GuiControl, Disable, Edit82CPP
GuiControl, Enable, Edit82JS
GuiControl, Enable, Edit82PY
}
if (EditText82 = "js")
{
GuiControl, Disable, Edit82JS
GuiControl, Enable, Edit82CPP
GuiControl, Enable, Edit82PY
}
if (EditText82 = "py")
{
GuiControl, Disable, Edit82PY
GuiControl, Enable, Edit82JS
GuiControl, Enable, Edit82CPP
}

return

Return

Edit83:
EditText83 := A_GuiControl
if (EditText83 = "1")
{
EditText83 := "on"
}
else
{
EditText83 := "off"
}
if (doneLoading = 1)
{
if (EditText83 = "off") && (EditText1 = "cpp")
{
document.getElementById('Gui1Edit83').click()
MsgBox, 48, useInJavaScriptAlwaysUseVar, If you choose cpp then useInJavaScriptAlwaysUseVar will always be toggled on.
}
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-83", EditText83)
Return

Edit84:
EditText84 := A_GuiControl
if (EditText84 = "1")
{
EditText84 := "on"
}
else
{
EditText84 := "off"
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-84", EditText84)
Return

Edit85:
EditText85 := A_GuiControl
if (EditText85 = "1")
{
EditText85 := "on"
}
else
{
EditText85 := "off"
}
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-85", EditText85)
Return

Edit86:
EditText86 := A_GuiControl
StoreLocally("s", "HTVM-ProjectName" . currentProjectNum . "-86", EditText86)
Return


Gui4Close:
Gui 4: Hide
GuiControl, Focus, Button21
Return

BuildButton:


allData := ""

defaultSyntax := "cpp`nht`nStringTrimLeft,OUTVAR,INVAR|StringTrimRight,OUTVAR,INVAR`nint`nstr`nbool`nfloat`nint8`nint16`nint32`nint64`nif`nelse if`nelse`nwhile`nfor`nLoop`nLoop,`nLoop, Parse,`ncontinue`nbreak`nfunc`nawait`n=`n+=`n+=`n-=`n*=`n/=`n+`n+`n==`n!`n>`n<`n>=`n<=`nor`nand`n!=`ntrue`nfalse`nswitch`ncase`ndefault`nthrow`nErrorMsg`ntry`ncatch`nfinally`n.push`n.pop`n.size`n.insert`n.rm`n.indexOf`narr`narr int`narr str`narr float`narr bool`nvar`nlet`nconst`nreturn`nend`nglobal`n//`n/*`n*/`n" . Chr(92) . "`n0`nA_Index`nA_LoopField`nmain`non`non`noff`noff`non`noff`ncpp`non`non`noff"
Loop, Parse, defaultSyntax, `n, `r
{
defaultSyntax%A_Index% := A_LoopField
}

Loop, 85
{

if (EditText%A_Index% != "") or (EditText%A_Index% != null)
{
if (A_Index = 2)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 1) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 24) && (A_Index <= 29)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 6) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 47)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 2) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 51) && (A_Index <= 56)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 3) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 68)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 7) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 69)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 70)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 71)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 4) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 72)
{

if (Trim(EditText%A_Index%) = "-")
{
MsgBox, 16, Invalid Instructions, At AHKlikeLoopsIndexedAt you only added a - character. A number must follow the - or it should be a standalone number.
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}

if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 5) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 0) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
}
}

Gui 4: Show
GuiControl, Focus, Button8
Return


ToggleMoreBuildInFuncs:
Gui 5: Show
Sleep, 50
ToggleMoreBuildInFuncsHolder := A_GuiControl
if (ToggleMoreBuildInFuncsHolder = "1")
{
ToggleMoreBuildInFuncsHolder := "on"
}
else
{
ToggleMoreBuildInFuncsHolder := "off"
}

if (ToggleMoreBuildInFuncsHolder = "off")
{
ToggleMoreBuildInFuncsTEXT := ""
}
else
{
ToggleMoreBuildInFuncsTEXT := "`nfunc======================func==============`nlang: cpp`nname: print`nlibs: #include <iostream>|#include <string>|#include <type_traits>`ndescription: hello that is func mhm`n`n// Print function for const char* specifically`nvoid print(const char* value) {`n    std::cout << std::string(value) << std::endl;  // Convert const char* to std::string`n}`n`n// Print function that converts all types to string if needed`ntemplate <typename T>`nvoid print(const T& value) {`n    if constexpr (std::is_same_v<T, std::string>) {`n        std::cout << value << std::endl;`n    } else if constexpr (std::is_same_v<T, char>) {`n        std::cout << value << std::endl;`n    } else if constexpr (std::is_same_v<T, int>) {`n        std::cout << std::to_string(value) << std::endl;`n    } else if constexpr (std::is_same_v<T, float>) {`n        std::cout << std::to_string(value) << std::endl;`n    } else if constexpr (std::is_same_v<T, double>) {`n        std::cout << std::to_string(value) << std::endl;`n    } else if constexpr (std::is_same_v<T, size_t>) {`n        std::cout << std::to_string(value) << std::endl;`n    } else if constexpr (std::is_same_v<T, bool>) {`n        std::cout << (value ? " . Chr(34) . "1" . Chr(34) . " : " . Chr(34) . "0" . Chr(34) . ") << std::endl;`n    } else {`n        std::cout << " . Chr(34) . "Unsupported type" . Chr(34) . " << std::endl;`n    }`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: print`nlibs: null`ndescription: you can coppy this section as much as you want for build in funcs`n`nfunction print(value) {`n    console.log(value)`n}`n`nfuncEND======================funcEND==============`n" . "`nfunc======================func==============`nlang: js`nname: STR`nlibs: null`ndescription: STR func is a func`n`n// Convert value to string`nfunction STR(value) {`n    if (typeof value === 'number') {`n        return value.toString();`n    } else if (typeof value === 'boolean') {`n        return value ? " . Chr(34) . "1" . Chr(34) . " : " . Chr(34) . "0" . Chr(34) . ";`n    } else {`n        throw new TypeError(" . Chr(34) . "Unsupported type" . Chr(34) . ");`n    }`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: INT`nlibs: null`ndescription: INT func is a func`n`n// Convert value to integer`nfunction INT(value) {`n    const intValue = parseInt(value, 10);`n    if (isNaN(intValue)) {`n        throw new TypeError(" . Chr(34) . "Cannot convert to integer" . Chr(34) . ");`n    }`n    return intValue;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: FLOAT`nlibs: null`ndescription: FLOAT func is a func`n`n// Convert value to float`nfunction FLOAT(value) {`n    const floatValue = parseFloat(value);`n    if (isNaN(floatValue)) {`n        throw new TypeError(" . Chr(34) . "Cannot convert to float" . Chr(34) . ");`n    }`n    return floatValue;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: STR`nlibs: null`ndescription: STR func is a func`n`n# Convert value to string`ndef STR(value):`n    if isinstance(value, (int, float)):`n        return str(value)`n    elif isinstance(value, bool):`n        return " . Chr(34) . "1" . Chr(34) . " if value else " . Chr(34) . "0" . Chr(34) . "`n    else:`n        raise TypeError(" . Chr(34) . "Unsupported type" . Chr(34) . ")`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: INT`nlibs: null`ndescription: INT func is a func`n`n# Convert value to integer`ndef INT(value):`n    try:`n        return int(value)`n    except ValueError:`n        raise TypeError(" . Chr(34) . "Cannot convert to integer" . Chr(34) . ")`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FLOAT`nlibs: null`ndescription: FLOAT func is a func`n`n# Convert value to float`ndef FLOAT(value):`n    try:`n        return float(value)`n    except ValueError:`n        raise TypeError(" . Chr(34) . "Cannot convert to float" . Chr(34) . ")`n`nfuncEND======================funcEND==============`n" . "`nfunc======================func==============`nlang: cpp`nname: INT`nlibs: #include <string>|#include <sstream>`ndescription: INT func is a func`n`n// Convert std::string to int`nint INT(const std::string& str) {`n    std::istringstream iss(str);`n    int value;`n    iss >> value;`n    return value;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: STR`nlibs: #include <string>`ndescription: STR func is a func`n`n// Convert various types to std::string`nstd::string STR(int value) {`n    return std::to_string(value);`n}`n`n// Convert various types to std::string`nstd::string STR(long long value) {`n    return std::to_string(value);`n}`n`nstd::string STR(float value) {`n    return std::to_string(value);`n}`n`nstd::string STR(double value) {`n    return std::to_string(value);`n}`n`nstd::string STR(size_t value) {`n    return std::to_string(value);`n}`n`nstd::string STR(bool value) {`n    return value ? " . Chr(34) . "1" . Chr(34) . " : " . Chr(34) . "0" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FLOAT`nlibs: #include <string>|#include <sstream>`ndescription: FLOAT func is a func`n`n// Convert std::string to float`nfloat FLOAT(const std::string& str) {`n    std::istringstream iss(str);`n    float value;`n    iss >> value;`n    return value;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: InStr`nlibs: #include <string>`ndescription: InStr func is a func`n`n// Function to find the position of needle in haystack (std::string overload)`nint InStr(const std::string& haystack, const std::string& needle) {`n    size_t pos = haystack.find(needle);`n    return (pos != std::string::npos) ? static_cast<int>(pos) + 1 : 0;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Random`nlibs: #include <cstdlib>|#include <ctime>|#include <random>`ndescription: Random func is a func`n`nint Random(int min, int max) {`n    // Create a random device to seed the generator`n    std::random_device rd;`n    `n    // Create a generator seeded with the random device`n    std::mt19937 gen(rd());`n    `n    // Define a distribution within the specified range`n    std::uniform_int_distribution<> dis(min, max);`n    `n    // Generate and return a random number within the specified range`n    return dis(gen);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Sleep`nlibs: #include <thread>|#include <chrono>`ndescription: Sleep func is a func`n`n// Function to sleep for a specified number of milliseconds`nvoid Sleep(int milliseconds) {`n    std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: input`nlibs: #include <iostream>|#include <string>`ndescription: input func is a func`n`n// Function to get input from the user, similar to Python's input() function`nstd::string input(const std::string& prompt) {`n    std::string userInput;`n    std::cout << prompt; // Display the prompt to the user`n    std::getline(std::cin, userInput); // Get the entire line of input`n    return userInput;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileRead`nlibs: #include <fstream>|#include <string>|#include <filesystem>|#include <stdexcept>`ndescription: FileRead func is a func`n`nstd::string FileRead(const std::string& path) {`n    std::ifstream file;`n    std::filesystem::path full_path;`n`n    // Check if the file path is an absolute path`n    if (std::filesystem::path(path).is_absolute()) {`n        full_path = path;`n    } else {`n        // If it's not a full path, prepend the current working directory`n        full_path = std::filesystem::current_path() / path;`n    }`n`n    // Open the file`n    file.open(full_path);`n    if (!file.is_open()) {`n        throw std::runtime_error(" . Chr(34) . "Error: Could not open the file." . Chr(34) . ");`n    }`n`n    // Read the file content into a string`n    std::string content;`n    std::string line;`n    while (std::getline(file, line)) {`n        content += line + '" . Chr(92) . "n';`n    }`n`n    file.close();`n    return content;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileAppend`nlibs: #include <fstream>|#include <iostream>|#include <string>`ndescription: FileAppend func is a func`n`nbool FileAppend(const std::string& content, const std::string& path) {`n    std::ofstream file;`n`n    // Open the file in append mode`n    file.open(path, std::ios::app);`n`n    if (!file.is_open()) {`n        std::cerr << " . Chr(34) . "Error: Could not open the file for appending." . Chr(34) . " << std::endl;`n        return false;`n    }`n`n    // Append the content to the file`n    file << content;`n`n    // Close the file`n    file.close();`n`n    return true;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileDelete`nlibs: #include <fstream>|#include <iostream>|#include <string>`ndescription: FileDelete func is a func`n`nbool FileDelete(const std::string& path) {`n    std::filesystem::path file_path(path);`n`n    // Check if the file exists`n    if (!std::filesystem::exists(file_path)) {`n        return false;`n    }`n`n    // Attempt to remove the file`n    if (!std::filesystem::remove(file_path)) {`n        return false;`n    }`n`n    return true;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StrLen`nlibs: #include <string>`ndescription: StrLen func is a func`n`nsize_t StrLen(const std::string& str) {`n    return str.length();`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Asc`nlibs: #include <string>`ndescription: Asc func is a func`n`nint Asc(const std::string& str) {`n    if (!str.empty()) {`n        return static_cast<int>(str[0]);`n    }`n    return -1; // Return -1 if the string is empty`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Abs`nlibs: #include <string>`ndescription: Abs func is a func`n`ndouble Abs(double value) {`n    return std::fabs(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: ACos`nlibs: #include <cmath>`ndescription: ACos func calculates the arc cosine of a value`n`ndouble ACos(double value) {`n    return std::acos(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: ASin`nlibs: #include <cmath>`ndescription: ASin func calculates the arc sine of a value, with error handling for out-of-range inputs`n`ndouble ASin(double value) {`n    if (value < -1.0 || value > 1.0) {`n        std::cerr << " . Chr(34) . "Error: Value out of range for arcsine function." . Chr(34) . " << std::endl;`n        return NAN;`n    }`n    return asin(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: ATan`nlibs: #include <cmath>`ndescription: ATan func calculates the arc tangent of a value`n`ndouble ATan(double value) {`n    return std::atan(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Ceil`nlibs: #include <cmath>`ndescription: Ceil func rounds a value upwards to the nearest integer`n`ndouble Ceil(double value) {`n    return std::ceil(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Cos`nlibs: #include <cmath>`ndescription: Cos func calculates the cosine of an angle`n`ndouble Cos(double angle) {`n    return std::cos(angle);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Exp`nlibs: #include <cmath>`ndescription: Exp func calculates the exponential of a value`n`ndouble Exp(double value) {`n    return std::exp(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Ln`nlibs: #include <cmath>`ndescription: Ln func calculates the natural logarithm of a value`n`ndouble Ln(double value) {`n    return std::log(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Log`nlibs: #include <cmath>`ndescription: Log func calculates the base-10 logarithm of a value`n`ndouble Log(double value) {`n    return std::log10(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Round`nlibs: #include <cmath>`ndescription: Round func rounds a value to the nearest integer`n`ndouble Round(double value) {`n    return std::round(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Sin`nlibs: #include <cmath>`ndescription: Sin func calculates the sine of an angle`n`ndouble Sin(double angle) {`n    return std::sin(angle);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Sqrt`nlibs: #include <cmath>`ndescription: Sqrt func calculates the square root of a value`n`ndouble Sqrt(double value) {`n    return std::sqrt(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Tan`nlibs: #include <cmath>`ndescription: Tan func calculates the tangent of an angle`n`ndouble Tan(double angle) {`n    return std::tan(angle);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: SubStr`nlibs: #include <string>`ndescription: Extracts a substring from a given string starting at a specified position with an optional length.`n`nstd::string SubStr(const std::string& str, int startPos, int length = -1) {`n    std::string result;`n    size_t strLen = str.size();`n`n    // Handle negative starting positions`n    if (startPos < 0) {`n        startPos += strLen;`n        if (startPos < 0) startPos = 0;`n    } else {`n        if (startPos > static_cast<int>(strLen)) return " . Chr(34) . "" . Chr(34) . "; // Starting position beyond string length`n        startPos -= 1; // Convert to 0-based index`n    }`n`n    // Handle length`n    if (length < 0) {`n        length = strLen - startPos; // Length to end of string`n    } else if (startPos + length > static_cast<int>(strLen)) {`n        length = strLen - startPos; // Adjust length to fit within the string`n    }`n`n    // Extract substring`n    result = str.substr(startPos, length);`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Trim`nlibs: #include <string>`ndescription: Removes leading and trailing whitespace from a string.`n`nstd::string Trim(const std::string &inputString) {`n    if (inputString.empty()) return " . Chr(34) . "" . Chr(34) . ";`n`n    size_t start = inputString.find_first_not_of(" . Chr(34) . " " . Chr(92) . "t" . Chr(92) . "n" . Chr(92) . "r" . Chr(92) . "f" . Chr(92) . "v" . Chr(34) . ");`n    size_t end = inputString.find_last_not_of(" . Chr(34) . " " . Chr(92) . "t" . Chr(92) . "n" . Chr(92) . "r" . Chr(92) . "f" . Chr(92) . "v" . Chr(34) . ");`n`n    return (start == std::string::npos) ? " . Chr(34) . "" . Chr(34) . " : inputString.substr(start, end - start + 1);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StrReplace`nlibs: #include <string>`ndescription: Replaces all occurrences of a substring with another string in the given string.`n`nstd::string StrReplace(const std::string &originalString, const std::string &find, const std::string &replaceWith) {`n    std::string result = originalString;`n    size_t pos = 0;`n`n    while ((pos = result.find(find, pos)) != std::string::npos) {`n        result.replace(pos, find.length(), replaceWith);`n        pos += replaceWith.length();`n    }`n`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StringTrimLeft`nlibs: #include <string>`ndescription: Trims characters from the left side of the string based on the specified number of characters.`n`nstd::string StringTrimLeft(const std::string &input, int numChars) {`n    return (numChars <= input.length()) ? input.substr(numChars) : input;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StringTrimRight`nlibs: #include <string>`ndescription: Trims characters from the right side of the string based on the specified number of characters.`n`nstd::string StringTrimRight(const std::string &input, int numChars) {`n    return (numChars <= input.length()) ? input.substr(0, input.length() - numChars) : input;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StrLower`nlibs: #include <algorithm>|#include <cctype>|#include <string>`ndescription: Converts all characters in a string to lowercase.`n`nstd::string StrLower(const std::string &string) {`n    std::string result = string;`n    std::transform(result.begin(), result.end(), result.begin(), ::tolower);`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: StrSplit`nlibs: #include <string>`ndescription: Splits a string by a delimiter and returns the nth split.`n`nstd::string StrSplit(const std::string &inputStr, const std::string &delimiter, int num) {`n    size_t start = 0, end = 0, count = 0;`n`n    while ((end = inputStr.find(delimiter, start)) != std::string::npos) {`n        if (++count == num) {`n            return inputStr.substr(start, end - start);`n        }`n        start = end + delimiter.length();`n    }`n`n    if (count + 1 == num) {`n        return inputStr.substr(start);`n    }`n`n    return " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Chr`nlibs: #include <string>`ndescription: Returns a character corresponding to the provided Unicode code point.`n`nstd::string Chr(int number) {`n    return (number >= 0 && number <= 0x10FFFF) ? std::string(1, static_cast<char>(number)) : " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Mod`nlibs: #include <string>`ndescription: Returns the remainder of the division of two integers.`n`nint Mod(int dividend, int divisor) {`n    return dividend % divisor;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: Floor`nlibs: #include <cmath>|#include <limits>`ndescription: Rounds down a floating-point number to the nearest integer.`n`ndouble Floor(double num) {`n    if (std::isnan(num)) {`n        return std::numeric_limits<double>::quiet_NaN();`n    }`n    return std::floor(num);`n}`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: cpp`nname: Sort`nlibs: #include <string>|#include <vector>|#include <algorithm>|#include <sstream>|#include <unordered_set>|#include <cctype>`ndescription: Sort func is a func`n`n// Helper function to trim whitespace from both ends of a string`nstd::string trim(const std::string& str) {`n    const std::string whitespace = " . Chr(34) . " " . Chr(92) . "t" . Chr(92) . "n" . Chr(92) . "r" . Chr(92) . "f" . Chr(92) . "v" . Chr(34) . ";`n    size_t start = str.find_first_not_of(whitespace);`n    if (start == std::string::npos) return " . Chr(34) . "" . Chr(34) . ";`n    size_t end = str.find_last_not_of(whitespace);`n    return str.substr(start, end - start + 1);`n}`n`n// Helper function to convert string to lowercase`nstd::string toLower(const std::string& str) {`n    std::string lowerStr = str;`n    std::transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);`n    return lowerStr;`n}`n`n// Function to sort case-insensitively but ensure lowercase items come last`nbool customSortCompare(const std::string& a, const std::string& b) {`n    std::string lowerA = toLower(a);`n    std::string lowerB = toLower(b);`n    if (lowerA == lowerB) {`n        // If case-insensitive equivalent, ensure lowercase items come last`n        if (std::islower(a[0]) && std::isupper(b[0])) {`n            return false; // a should come after b`n        } else if (std::isupper(a[0]) && std::islower(b[0])) {`n            return true; // a should come before b`n        }`n        return a < b; // Otherwise, sort lexicographically`n    }`n    return lowerA < lowerB;`n}`n`n// Function to remove exact duplicates (case-sensitive)`nstd::vector<std::string> removeExactDuplicates(const std::vector<std::string>& items) {`n    std::unordered_set<std::string> seen;`n    std::vector<std::string> uniqueItems;`n    for (const auto& item : items) {`n        if (seen.find(item) == seen.end()) {`n            seen.insert(item);`n            uniqueItems.push_back(item);`n        }`n    }`n    return uniqueItems;`n}`n`n// Main sorting function`nstd::string Sort(const std::string& input, const std::string& options) {`n    std::string delimiter = " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n    bool caseInsensitive = options.find('C') != std::string::npos;`n    bool unique = options.find('U') != std::string::npos;`n    bool reverse = options.find('R') != std::string::npos;`n    bool random = options.find(" . Chr(34) . "Random" . Chr(34) . ") != std::string::npos;`n    bool numeric = options.find('N') != std::string::npos;`n`n    // Custom delimiter`n    if (options.find('D') != std::string::npos) {`n        size_t delimiterPos = options.find('D') + 1;`n        if (delimiterPos < options.size()) {`n            delimiter = options.substr(delimiterPos, 1);`n        }`n    }`n`n    // Split input by delimiter`n    std::vector<std::string> items;`n    std::stringstream ss(input);`n    std::string item;`n    while (std::getline(ss, item, delimiter[0])) {`n        item = trim(item);  // Trim whitespace from each item`n        if (!item.empty()) {`n            items.push_back(item);`n        }`n    }`n`n    // Sort items`n    if (numeric) {`n        std::sort(items.begin(), items.end(), [](const std::string& a, const std::string& b) {`n            return std::stoi(a) < std::stoi(b);`n        });`n    } else {`n        std::sort(items.begin(), items.end(), customSortCompare);`n    }`n`n    // Remove exact duplicates if needed`n    if (unique) {`n        items = removeExactDuplicates(items);`n    }`n`n    // Apply reverse order if needed`n    if (reverse) {`n        std::reverse(items.begin(), items.end());`n    }`n`n    // Separate uppercase and lowercase items`n    std::vector<std::string> uppercaseItems;`n    std::vector<std::string> lowercaseItems;`n    `n    for (const auto& item : items) {`n        if (std::isupper(item[0])) {`n            uppercaseItems.push_back(item);`n        } else {`n            lowercaseItems.push_back(item);`n        }`n    }`n`n    // Combine sorted uppercase items with sorted lowercase items`n    std::string result;`n    for (const auto& item : uppercaseItems) {`n        result += item;`n        result += delimiter;`n    }`n    for (const auto& item : lowercaseItems) {`n        result += item;`n        if (&item != &lowercaseItems.back()) {`n            result += delimiter;`n        }`n    }`n`n    // Remove trailing delimiter if necessary`n    if (!result.empty() && result.back() == delimiter[0]) {`n        result.pop_back();`n    }`n`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: getDataFromAPI`nlibs: #include <string>|#include <array>|#include <memory>|#include <stdexcept>| #include <cstdio>`ndescription: getDataFromAPI is a function to fetch data from an API.`n`n// Function to run a system command`nstd::string getDataFromAPIRunCMD(const std::string& command) {`n    std::array<char, 128> buffer;`n    std::string result;`n#if defined(_WIN32)`n    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(command.c_str(), " . Chr(34) . "r" . Chr(34) . "), _pclose);`n#else`n    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), " . Chr(34) . "r" . Chr(34) . "), pclose);`n#endif`n    if (!pipe) {`n        throw std::runtime_error(" . Chr(34) . "popen() failed!" . Chr(34) . ");`n    }`n    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {`n        result += buffer.data();`n    }`n    return result;`n}`n`n// Function to fetch data from API`nstd::string getDataFromAPI(const std::string& url) {`n    std::string command = " . Chr(34) . "curl -s " . Chr(34) . " + url;`n    return getDataFromAPIRunCMD(command);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileCreateDir`nlibs: #include <filesystem>|#include <system_error>`ndescription: FileCreateDir is a function to create a directory if it does not exist.`n`n// Creates a directory if it does not exist`nvoid FileCreateDir(const std::string& path) {`n    try {`n        std::filesystem::create_directory(path);`n    } catch (const std::filesystem::filesystem_error&) {`n        // Handle errors silently`n    }`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileRemoveDir`nlibs: #include <filesystem>|#include <system_error>`ndescription: FileRemoveDir is a function to remove a directory if it exists.`n`n// Removes a directory if it exists`nvoid FileRemoveDir(const std::string& path) {`n    try {`n        if (std::filesystem::exists(path) && std::filesystem::is_directory(path)) {`n            std::filesystem::remove_all(path);`n        }`n    } catch (const std::filesystem::filesystem_error&) {`n        // Handle errors silently`n    }`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: FileExist`nlibs: #include <filesystem>|#include <system_error>`ndescription: FileExist is a function to check if a file or directory exists.`n`n// Checks if a file or directory exists`nbool FileExist(const std::string& path) {`n    try {`n        return std::filesystem::exists(path);`n    } catch (const std::filesystem::filesystem_error&) {`n        // Handle errors silently; return false if an error occurs`n        return false;`n    }`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: isWindows`nlibs: #include <iostream>`ndescription: isWindows is a function to check if the operating system is Windows`n`n// Function to check if the operating system is Windows`nbool isWindows() {`n    #ifdef _WIN32`n        return true;`n    #else`n        return false;`n    #endif`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: GetParams`nlibs: #include <iostream>|#include <vector>|#include <string>|#include <filesystem>`ndescription: GetParams is a func for Platform-specific handling for command-line arguments and getting parameters.`n`n#ifdef _WIN32`n    #define ARGC __argc`n    #define ARGV __argv`n#else`n    extern char **environ;`n    int ARGC;`n    char** ARGV;`n`n    __attribute__((constructor)) void init_args(int argc, char* argv[], char* envp[]) {`n        ARGC = argc;`n        ARGV = argv;`n    }`n#endif`n`nstd::string GetParams() {`n    std::vector<std::string> params;`n    for (int i = 1; i < ARGC; ++i) {`n        std::string arg = ARGV[i];`n        if (std::filesystem::exists(arg)) {`n            arg = std::filesystem::absolute(arg).string();`n        }`n        params.push_back(arg);`n    }`n    std::string result;`n    for (const auto& param : params) {`n        result += param + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n    }`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: BuildInVars`nlibs: #include <iostream>|#include <chrono>|#include <ctime>|#include <sstream>|#include <iomanip>|#include <string>|#include <limits>`ndescription: BuildInVars is a function to get built-in variables like A_TickCount, A_Now, and date/time-related values.`n`n// Store the start time as a global variable`nstd::chrono::time_point<std::chrono::steady_clock> programStartTime = std::chrono::steady_clock::now();`n`n// Function to get built-in variables`nstd::string BuildInVars(const std::string& varName) {`n    auto now = std::chrono::system_clock::now();`n    std::time_t currentTime = std::chrono::system_clock::to_time_t(now);`n    std::tm* localTime = std::localtime(&currentTime);`n`n    std::ostringstream oss;`n`n    if (varName == " . Chr(34) . "A_TickCount" . Chr(34) . ") {`n        // Calculate milliseconds since program start`n        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - programStartTime).count();`n        if (duration > std::numeric_limits<int>::max()) {`n            // Handle overflow case`n            return " . Chr(34) . "Value too large" . Chr(34) . ";`n        } else {`n            return std::to_string(static_cast<int>(duration));`n        }`n    } else if (varName == " . Chr(34) . "A_Now" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%Y-%m-%d %H:%M:%S" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_YYYY" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%Y" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_MM" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%m" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_DD" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%d" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_MMMM" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%B" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_MMM" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%b" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_DDDD" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%A" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_DDD" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%a" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_Hour" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%H" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_Min" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%M" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_Sec" . Chr(34) . ") {`n        oss << std::put_time(localTime, " . Chr(34) . "%S" . Chr(34) . ");`n    } else if (varName == " . Chr(34) . "A_Space" . Chr(34) . ") {`n        return " . Chr(34) . " " . Chr(34) . ";`n    } else if (varName == " . Chr(34) . "A_Tab" . Chr(34) . ") {`n        return " . Chr(34) . "" . Chr(92) . "t" . Chr(34) . ";`n    } else {`n        return " . Chr(34) . "" . Chr(34) . ";`n    }`n    return oss.str();`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: RegExReplace`nlibs: #include <string>|#include <regex>|#include <iostream>`ndescription: RegExReplace is a function to perform regex replacement.`n`nstd::string RegExReplace(const std::string& inputStr, const std::string& regexPattern, const std::string& replacement) {`n    std::regex re(regexPattern, std::regex_constants::ECMAScript | std::regex_constants::multiline);`n    return std::regex_replace(inputStr, re, replacement);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: RunCMD`nlibs: #include <iostream>|#include <stdexcept>|#include <string>|#include <array>|#include <memory>|#include <cstdio>`ndescription: RunCMD is a function to run a system command and capture the output.`n`nstd::string RunCMD(const std::string& command) {`n    std::array<char, 128> buffer;`n    std::string result;`n#if defined(_WIN32)`n    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(command.c_str(), " . Chr(34) . "r" . Chr(34) . "), _pclose);`n#else`n    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), " . Chr(34) . "r" . Chr(34) . "), pclose);`n#endif`n    if (!pipe) {`n        throw std::runtime_error(" . Chr(34) . "popen() failed!" . Chr(34) . ");`n    }`n    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {`n        result += buffer.data();`n    }`n    return result;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: RegExMatch`nlibs: #include <iostream>|#include <string>|#include <regex>`ndescription: RegExMatch is a function to perform regex matching and return the match position.`n`nint RegExMatch(const std::string& haystack, const std::string& needleRegEx, std::string* outputVar = nullptr, int startingPos = 0) {`n    if (haystack.empty() || needleRegEx.empty()) {`n        return 0;`n    }`n`n    std::regex re(needleRegEx);`n    std::smatch match;`n`n    if (std::regex_search(haystack.begin() + startingPos, haystack.end(), match, re)) {`n        if (outputVar != nullptr) {`n            *outputVar = match.str(0);`n        }`n        return match.position(0) + 1; // To make it 1-based index`n    }`n`n    return 0;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: cpp`nname: ExitApp`nlibs: #include <iostream>|#include <cstdlib>`ndescription: ExitApp is a function to exit the application.`n`nvoid ExitApp() {`n    std::exit(0);`n}`n`nfuncEND======================funcEND==============`n`n" . "`nfunc======================func==============`nlang: py`nname: InStr`nlibs: null`ndescription: InStr returns the 1-based position of the needle in the haystack, or 0 if not found.`n`n# Function to find the position of needle in haystack (str overload)`ndef InStr(haystack: str, needle: str) -> int:`n    pos = haystack.find(needle)`n    return pos + 1 if pos != -1 else 0`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: InStr`nlibs: null`ndescription: InStr returns the 1-based index of the substring needle in the string haystack, or 0 if not found.`n`n// Function to find the position of needle in haystack (string overload)`nfunction InStr(haystack, needle) {`n    const pos = haystack.indexOf(needle);`n    return (pos !== -1) ? pos + 1 : 0;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Random`nlibs: import random`ndescription: Random returns a random integer between min and max, inclusive.`n`ndef Random(min: int, max: int) -> int:`n    # Generate and return a random number within the specified range`n    return random.randint(min, max)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Random`nlibs: null`ndescription: Random returns a random integer between min and max, inclusive.`n`n// Function to generate a random integer between min and max (inclusive)`nfunction Random(min, max) {`n    // Generate and return a random number within the specified range`n    return Math.floor(Math.random() * (max - min + 1)) + min;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Sleep`nlibs: import time`ndescription: Sleep pauses execution for a specified number of milliseconds.`n`ndef Sleep(milliseconds: int) -> None:`n    # Sleep for the specified number of milliseconds`n    time.sleep(milliseconds / 1000)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Sleep`nlibs: null`ndescription: Sleep pauses execution for a specified number of milliseconds.`n`nfunction Sleep(milliseconds) {`n    // Sleep for the specified number of milliseconds`n    return new Promise(resolve => setTimeout(resolve, milliseconds));`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: input`nlibs: null`ndescription: input displays a prompt and returns user input as a string, similar to C++'s std::getline.`n`n// Function to simulate input() in JavaScript`nfunction input(prompt) {`n    // Display the prompt and get user input`n    return prompt(prompt);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: FileAppend`nlibs: null`ndescription: FileAppend creates a downloadable file with the specified content.`n`nfunction FileAppend(content, filename) {`n    // Create a Blob from the content`n    const blob = new Blob([content], { type: 'text/plain' });`n    const link = document.createElement('a');`n`n    // Set the download attribute with the filename`n    link.download = filename;`n    link.href = URL.createObjectURL(blob);`n    link.click();`n`n    // Clean up the URL object`n    URL.revokeObjectURL(link.href);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FileDelete`nlibs: import os`ndescription: FileDelete removes a file if it exists and returns success status.`n`ndef FileDelete(path: str) -> bool:`n    # Check if the file exists and remove it`n    if os.path.exists(path):`n        os.remove(path)`n        return True`n    return False`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: FileAppend`nlibs: null`ndescription: FileAppend appends the specified content to a file and returns success status.`n`ndef FileAppend(content: str, path: str) -> bool:`n    # Open the file in append mode and write the content`n    try:`n        with open(path, 'a') as file:`n            file.write(content)`n        return True`n    except IOError:`n        print(" . Chr(34) . "Error: Could not open the file for appending." . Chr(34) . ")`n        return False`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FileRead`nlibs: import os`ndescription: FileRead returns the content of a file as a string, handling both absolute and relative paths.`n`ndef FileRead(path: str) -> str:`n    # Check if the path is absolute, if not prepend the current working directory`n    if not os.path.isabs(path):`n        path = os.path.join(os.getcwd(), path)`n`n    # Open and read the file content`n    with open(path, 'r') as file:`n        return file.read()`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StrLen`nlibs: null`ndescription: StrLen returns the length of a given string.`n`ndef StrLen(s: str) -> int:`n    # Return the length of the given string`n    return len(s)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Asc`nlibs: null`ndescription: Asc returns the ASCII value of the first character of the string, or -1 if empty.`n`ndef Asc(s: str) -> int:`n    # Return the ASCII value of the first character or -1 if the string is empty`n    return ord(s[0]) if s else -1`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StrLen`nlibs: null`ndescription: StrLen returns the length of a given string.`n`nfunction StrLen(s) {`n    // Return the length of the given string`n    return s.length;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Asc`nlibs: null`ndescription: Asc returns the ASCII value of the first character of the string, or -1 if empty.`n`nfunction Asc(s) {`n    // Return the ASCII value of the first character or -1 if the string is empty`n    return s.length > 0 ? s.charCodeAt(0) : -1;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Chr`nlibs: null`ndescription: Returns a character corresponding to the provided Unicode code point.`n`ndef Chr(number: int) -> str:`n    # Return the character corresponding to the Unicode code point, or an empty string if out of range`n    return chr(number) if 0 <= number <= 0x10FFFF else " . Chr(34) . "" . Chr(34) . "`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Chr`nlibs: null`ndescription: Returns a character corresponding to the provided Unicode code point.`n`nfunction Chr(number) {`n    // Return the character corresponding to the Unicode code point, or an empty string if out of range`n    return (number >= 0 && number <= 0x10FFFF) ? String.fromCharCode(number) : " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Asc`nlibs: null`ndescription: Returns the ASCII value of the first character of a string, or -1 if empty.`n`ndef Asc(s: str) -> int:`n    return ord(s[0]) if s else -1`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: Abs`nlibs: null`ndescription: Returns the absolute value of a number.`n`ndef Abs(value: float) -> float:`n    return abs(value)`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: ACos`nlibs: null`ndescription: Calculates the arc cosine of a value.`n`ndef ACos(value: float) -> float:`n    return math.acos(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: ASin`nlibs: null`ndescription: Calculates the arc sine of a value, with error handling for out-of-range inputs.`n`ndef ASin(value: float) -> float:`n    if value < -1.0 or value > 1.0:`n        raise ValueError(" . Chr(34) . "Error: Value out of range for arcsine function." . Chr(34) . ")`n    return math.asin(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: ATan`nlibs: null`ndescription: Calculates the arc tangent of a value.`n`ndef ATan(value: float) -> float:`n    return math.atan(value)`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: Ceil`nlibs: null`ndescription: Rounds a value upwards to the nearest integer.`n`ndef Ceil(value: float) -> float:`n    return math.ceil(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Cos`nlibs: null`ndescription: Calculates the cosine of an angle.`n`ndef Cos(angle: float) -> float:`n    return math.cos(angle)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Exp`nlibs: null`ndescription: Calculates the exponential of a value.`n`ndef Exp(value: float) -> float:`n    return math.exp(value)`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: Ln`nlibs: null`ndescription: Calculates the natural logarithm of a value.`n`ndef Ln(value: float) -> float:`n    return math.log(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Log`nlibs: null`ndescription: Calculates the base-10 logarithm of a value.`n`ndef Log(value: float) -> float:`n    return math.log10(value)`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: py`nname: Round`nlibs: null`ndescription: Rounds a value to the nearest integer.`n`ndef Round(value: float) -> float:`n    return round(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Sin`nlibs: null`ndescription: Calculates the sine of an angle.`n`ndef Sin(angle: float) -> float:`n    return math.sin(angle)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Sqrt`nlibs: null`ndescription: Calculates the square root of a value.`n`ndef Sqrt(value: float) -> float:`n    return math.sqrt(value)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Tan`nlibs: null`ndescription: Calculates the tangent of an angle.`n`ndef Tan(angle: float) -> float:`n    return math.tan(angle)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Asc`nlibs: null`ndescription: Returns the ASCII value of the first character of a string, or -1 if empty.`n`nfunction Asc(s) {`n    return s.length > 0 ? s.charCodeAt(0) : -1;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Abs`nlibs: null`ndescription: Returns the absolute value of a number.`n`nfunction Abs(value) {`n    return Math.abs(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: ACos`nlibs: null`ndescription: Calculates the arc cosine of a value.`n`nfunction ACos(value) {`n    return Math.acos(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: ASin`nlibs: null`ndescription: Calculates the arc sine of a value, with error handling for out-of-range inputs.`n`nfunction ASin(value) {`n    if (value < -1.0 || value > 1.0) {`n        throw new RangeError(" . Chr(34) . "Error: Value out of range for arcsine function." . Chr(34) . ");`n    }`n    return Math.asin(value);`n}`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: js`nname: ATan`nlibs: null`ndescription: Calculates the arc tangent of a value.`n`nfunction ATan(value) {`n    return Math.atan(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Ceil`nlibs: null`ndescription: Rounds a value upwards to the nearest integer.`n`nfunction Ceil(value) {`n    return Math.ceil(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Cos`nlibs: null`ndescription: Calculates the cosine of an angle.`n`nfunction Cos(angle) {`n    return Math.cos(angle);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Exp`nlibs: null`ndescription: Calculates the exponential of a value.`n`nfunction Exp(value) {`n    return Math.exp(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Ln`nlibs: null`ndescription: Calculates the natural logarithm of a value.`n`nfunction Ln(value) {`n    return Math.log(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Log`nlibs: null`ndescription: Calculates the base-10 logarithm of a value.`n`nfunction Log(value) {`n    return Math.log10(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Round`nlibs: null`ndescription: Rounds a value to the nearest integer.`n`nfunction Round(value) {`n    return Math.round(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Sin`nlibs: null`ndescription: Calculates the sine of an angle.`n`nfunction Sin(angle) {`n    return Math.sin(angle);`n}`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: js`nname: Sqrt`nlibs: null`ndescription: Calculates the square root of a value.`n`nfunction Sqrt(value) {`n    return Math.sqrt(value);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Tan`nlibs: null`ndescription: Calculates the tangent of an angle.`n`nfunction Tan(angle) {`n    return Math.tan(angle);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: SubStr`nlibs: null`ndescription: Extracts a substring from a given string starting at a specified position with an optional length.`n`ndef SubStr(s, startPos, length=None):`n    if s is None or s == " . Chr(34) . "" . Chr(34) . ":`n        return " . Chr(34) . "" . Chr(34) . "`n    if length is None or length == " . Chr(34) . "" . Chr(34) . ":`n        length = len(s) - startPos + 1`n    if startPos < 1:`n        startPos = len(s) + startPos`n    return s[startPos - 1:startPos - 1 + length]`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: js`nname: SubStr`nlibs: null`ndescription: Extracts a substring from a given string starting at a specified position with an optional length.`n`nfunction SubStr(str, startPos, length) {`n    // If str is null or undefined, return an empty string`n    if (str === null || str === undefined) {`n        return " . Chr(34) . "" . Chr(34) . ";`n    }`n`n    // If length is not provided or is blank, default to " . Chr(34) . "all characters" . Chr(34) . "`n    if (length === undefined || length === " . Chr(34) . "" . Chr(34) . ") {`n        length = str.length - startPos + 1;`n    }`n`n    // If startPos is less than 1, adjust it to start from the end of the string`n    if (startPos < 1) {`n        startPos = str.length + startPos;`n    }`n`n    // Extract the substring based on startPos and length`n    return str.substr(startPos - 1, length);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Trim`nlibs: null`ndescription: Removes leading and trailing whitespace from a string.`n`ndef Trim(inputString):`n    return inputString.strip() if inputString else " . Chr(34) . "" . Chr(34) . "`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StrReplace`nlibs: null`ndescription: Replaces all occurrences of a substring with another string in the given string.`n`ndef StrReplace(originalString, find, replaceWith):`n    return originalString.replace(find, replaceWith)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StringTrimLeft`nlibs: null`ndescription: Trims characters from the left side of the string based on the specified number of characters.`n`ndef StringTrimLeft(input, numChars):`n    return input[numChars:] if numChars <= len(input) else input`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StringTrimRight`nlibs: null`ndescription: Trims characters from the right side of the string based on the specified number of characters.`n`ndef StringTrimRight(input, numChars):`n    return input[:-numChars] if numChars <= len(input) else input`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StrLower`nlibs: null`ndescription: Converts all characters in a string to lowercase.`n`ndef StrLower(string):`n    return string.lower()`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: StrSplit`nlibs: null`ndescription: Splits a string by a delimiter and returns the nth split.`n`ndef StrSplit(inputStr, delimiter, num):`n    parts = inputStr.split(delimiter)`n    return parts[num - 1] if 0 < num <= len(parts) else " . Chr(34) . "" . Chr(34) . "`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Chr`nlibs: null`ndescription: Returns a character corresponding to the provided Unicode code point.`n`ndef Chr(number):`n    return chr(number) if 0 <= number <= 0x10FFFF else " . Chr(34) . "" . Chr(34) . "`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Mod`nlibs: null`ndescription: Returns the remainder of the division of two integers.`n`ndef Mod(dividend, divisor):`n    return dividend % divisor`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: Floor`nlibs: null`ndescription: Rounds down a floating-point number to the nearest integer.`n`ndef Floor(num):`n    return math.floor(num) if not math.isnan(num) else float('nan')`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Trim`nlibs: null`ndescription: Removes leading and trailing whitespace from a string.`n`nfunction Trim(inputString) {`n    return inputString ? inputString.trim() : " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StrReplace`nlibs: null`ndescription: Replaces all occurrences of a substring with another string in the given string.`n`nfunction StrReplace(originalString, find, replaceWith) {`n    return originalString.split(find).join(replaceWith);`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StringTrimLeft`nlibs: null`ndescription: Trims characters from the left side of the string based on the specified number of characters.`n`nfunction StringTrimLeft(input, numChars) {`n    return (numChars <= input.length) ? input.substring(numChars) : input;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StringTrimRight`nlibs: null`ndescription: Trims characters from the right side of the string based on the specified number of characters.`n`nfunction StringTrimRight(input, numChars) {`n    return (numChars <= input.length) ? input.substring(0, input.length - numChars) : input;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StrLower`nlibs: null`ndescription: Converts all characters in a string to lowercase.`n`nfunction StrLower(string) {`n    return string.toLowerCase();`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: StrSplit`nlibs: null`ndescription: Splits a string by a delimiter and returns the nth split.`n`nfunction StrSplit(inputStr, delimiter, num) {`n    const parts = inputStr.split(delimiter);`n    return (num > 0 && num <= parts.length) ? parts[num - 1] : " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Chr`nlibs: null`ndescription: Returns a character corresponding to the provided Unicode code point.`n`nfunction Chr(number) {`n    return (number >= 0 && number <= 0x10FFFF) ? String.fromCharCode(number) : " . Chr(34) . "" . Chr(34) . ";`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Mod`nlibs: null`ndescription: Returns the remainder of the division of two integers.`n`nfunction Mod(dividend, divisor) {`n    return dividend % divisor;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: Floor`nlibs: null`ndescription: Rounds down a floating-point number to the nearest integer.`n`nfunction Floor(num) {`n    return isNaN(num) ? NaN : Math.floor(num);`n}`n`nfuncEND======================funcEND==============`n`n`n`nfunc======================func==============`nlang: py`nname: Sort`nlibs: import random`ndescription: Sort func is a func`n`ndef Sort(var_name, options):`n    # Determine delimiter based on options`n    delimiter = '" . Chr(92) . "n'`n    if 'D' in options:`n        delimiter = options[options.index('D') + 1]`n    `n    # Split the input variable by delimiter`n    items = var_name.split(delimiter)`n    `n    # Remove empty items and strip whitespace`n    items = [item.strip() for item in items if item.strip()]`n    `n    # Apply sorting based on options`n    if 'N' in options:`n        # Numeric sort`n        items.sort(key=lambda x: int(x))`n    elif 'Random' in options:`n        # Random sort`n        random.shuffle(items)`n    else:`n        # Default alphabetical sort`n        items.sort(key=lambda x: x.lower() if 'C' not in options else x)`n    `n    # Reverse if 'R' option is present`n    if 'R' in options:`n        items.reverse()`n    `n    # Remove duplicates if 'U' option is present`n    if 'U' in options:`n        seen = set()`n        unique_items = []`n        for item in items:`n            lower_item = item.lower() if 'C' not in options else item`n            if lower_item not in seen:`n                seen.add(lower_item)`n                unique_items.append(item)`n        items = unique_items`n    `n    # Join the sorted items back into a string`n    sorted_var = delimiter.join(items)`n    `n    return sorted_var`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: getDataFromAPI`nlibs: import json|import urllib.request|import urllib.error`ndescription: getDataFromAPI is a function to fetch data from an API.`n`ndef getDataFromAPI(url):`n    try:`n        with urllib.request.urlopen(url) as response:`n            if response.getcode() == 200:`n                return response.read()`n            else:`n                return None`n    except urllib.error.URLError as e:`n        print(f" . Chr(34) . "Error accessing URL: {e.reason}" . Chr(34) . ")`n        return None`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FileCreateDir`nlibs: import os`ndescription: FileCreateDir is a function to create a directory if it does not exist.`n`ndef FileCreateDir(directory):`n    if not os.path.exists(directory):`n        os.makedirs(directory)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FileRemoveDir`nlibs: import shutil`ndescription: FileRemoveDir is a function to remove a directory if it exists.`n`ndef FileRemoveDir(directory):`n    if os.path.exists(directory):`n        shutil.rmtree(directory)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: FileExist`nlibs: import os`ndescription: FileExist is a function to check if a file or directory exists.`n`ndef FileExist(path):`n    return os.path.exists(path)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: isWindows`nlibs: import platform`ndescription: isWindows is a function to check if the operating system is Windows.`n`ndef isWindows():`n    return platform.system().lower() == " . Chr(34) . "windows" . Chr(34) . "`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: GetParams`nlibs: import os|import sys`ndescription: GetParams is a func for Platform-specific handling for command-line arguments and getting parameters.`n`ndef GetParams():`n    # Check if any command line arguments are provided`n    if len(sys.argv) < 2:`n        return " . Chr(34) . "" . Chr(34) . "`n    # Store the provided command line arguments`n    params = []`n    for arg in sys.argv[1:]:`n        if os.path.exists(arg):`n            arg = os.path.abspath(arg)`n        params.append(arg)`n    return " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "n" . Chr(34) . ".join(params)`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: BuildInVars`nlibs: import time|from datetime import datetime`ndescription: BuildInVars is a function to get built-in variables like A_TickCount, A_Now, and date/time-related values.`n`n# Initialize with current timestamp`nlast_input_time = time.time() * 1000  # Convert to milliseconds`nstart_timestamp = time.time() * 1000  # Convert to milliseconds`n# Function to reset the idle timer`ndef reset_idle_timer():`n    global last_input_time`n    last_input_time = time.time() * 1000  # Update last input time in milliseconds`n# Function to calculate tick count in milliseconds`ndef A_TickCount():`n    return int(time.time() * 1000 - start_timestamp)`n# Function to build in variables`ndef BuildInVars(varName):`n    now = datetime.now()`n    if varName == " . Chr(34) . "A_TickCount" . Chr(34) . ":`n        # Return tick count in milliseconds`n        return A_TickCount()`n    elif varName == " . Chr(34) . "A_Now" . Chr(34) . ":`n        # Return current local timestamp`n        return now.strftime(" . Chr(34) . "%Y-%m-%d %H:%M:%S" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_YYYY" . Chr(34) . ":`n        # Return current year`n        return now.strftime(" . Chr(34) . "%Y" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MM" . Chr(34) . ":`n        # Return current month`n        return now.strftime(" . Chr(34) . "%m" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DD" . Chr(34) . ":`n        # Return current day`n        return now.strftime(" . Chr(34) . "%d" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MMMM" . Chr(34) . ":`n        # Return full month name`n        return now.strftime(" . Chr(34) . "%B" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MMM" . Chr(34) . ":`n        # Return short month name`n        return now.strftime(" . Chr(34) . "%b" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DDDD" . Chr(34) . ":`n        # Return full day name`n        return now.strftime(" . Chr(34) . "%A" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DDD" . Chr(34) . ":`n        # Return short day name`n        return now.strftime(" . Chr(34) . "%a" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Hour" . Chr(34) . ":`n        # Return current hour`n        return now.strftime(" . Chr(34) . "%H" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Min" . Chr(34) . ":`n        # Return current minute`n        return now.strftime(" . Chr(34) . "%M" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Sec" . Chr(34) . ":`n        # Return current second`n        return now.strftime(" . Chr(34) . "%S" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Space" . Chr(34) . ":`n        # Return space character`n        return " . Chr(34) . " " . Chr(34) . "`n    elif varName == " . Chr(34) . "A_Tab" . Chr(34) . ":`n        # Return tab character`n        return " . Chr(34) . "" . Chr(92) . "t" . Chr(34) . "`n    else:`n        # Handle unknown variable names`n        return None`ndef Floor(number):`n    if number > 0:`n        return int(number)`n    else:`n        return int(number) - (1 if number != int(number) else 0)`n`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: RegExReplace`nlibs: import re`ndescription: RegExReplace is a function to perform regex replacement.`n`n`ndef RegExReplace(inputStr, regexPattern, replacement):`n    # Create a regular expression object using the provided pattern`n    `n    regex = re.compile(regexPattern, re.MULTILINE)  # re.MULTILINE for multi-line matching`n    # Use the sub() method to perform the regex replacement`n    resultStr = regex.sub(replacement, inputStr)`n    # Return the modified string`n    return resultStr`n`n`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: RunCMD`nlibs: import subprocess`ndescription: RunCMD is a function to run a system command and capture the output.`n`ndef RunCMD(command):`n    try:`n        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)`n        return result.stdout`n    except subprocess.CalledProcessError as e:`n        print(f" . Chr(34) . "Error: {e}" . Chr(34) . ")`n        return e.stdout + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . " + e.stderr`n    except Exception as e:`n        print(f" . Chr(34) . "An unexpected error occurred: {e}" . Chr(34) . ")`n        return " . Chr(34) . "" . Chr(34) . "`n`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: RegExMatch`nlibs: import re`ndescription: RegExMatch is a function to perform regex matching and return the match position.`n`ndef RegExMatch(Haystack, NeedleRegEx, OutputVar=None, StartingPos=0):`n    if Haystack is None or NeedleRegEx is None:`n        return None`n    regex = re.compile(NeedleRegEx)`n    match = regex.search(Haystack)`n    if match:`n        if OutputVar is not None:`n            OutputVar.append(match.group(0))`n        return match.start() + 1`n    else:`n        return 0`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: ExitApp`nlibs: import os`ndescription: ExitApp is a function to exit the application.`n`n# Function to handle application termination`ndef ExitApp():`n    os._exit(1)`n`nfuncEND======================funcEND==============`n`n`n`n`n`nfunc======================func==============`nlang: js`nname: Sort`nlibs: null`ndescription: Sort func is a func`n`n`nfunction SortLikeAHK(varName, options = " . Chr(34) . "" . Chr(34) . ") {`n    let delimiter = '" . Chr(92) . "n'; // Default delimiter`n    let delimiterIndex = options.indexOf('D');`n`n    if (delimiterIndex !== -1) {`n        let delimiterChar = options[delimiterIndex + 1];`n        delimiter = delimiterChar === '' ? ',' : delimiterChar;`n    }`n`n    let items = varName.split(new RegExp(delimiter === ',' ? ',' : '" . Chr(92) . "" . Chr(92) . "' + delimiter));`n`n    // Remove empty items and trim whitespace`n    items = items.filter(item => item.trim() !== '');`n`n    // Apply sorting based on options`n    if (options.includes('N')) {`n        // Numeric sort`n        items.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));`n    } else if (options.includes('Random')) {`n        // Random sort`n        for (let i = items.length - 1; i > 0; i--) {`n            const j = Math.floor(Math.random() * (i + 1));`n            [items[i], items[j]] = [items[j], items[i]];`n        }`n    } else {`n        // Default alphabetical sort`n        items.sort((a, b) => {`n            const keyA = options.includes('C') ? a : a.toLowerCase();`n            const keyB = options.includes('C') ? b : b.toLowerCase();`n            if (keyA < keyB) return -1;`n            if (keyA > keyB) return 1;`n            return 0;`n        });`n    }`n`n    // Reverse if 'R' option is present`n    if (options.includes('R')) {`n        items.reverse();`n    }`n`n    // Remove duplicates if 'U' option is present`n    if (options.includes('U')) {`n        const seen = new Map();`n        items = items.filter(item => {`n            const key = options.includes('C') ? item : item.toLowerCase();`n            if (!seen.has(key)) {`n                seen.set(key, item);`n                return true;`n            }`n            return false;`n        });`n    }`n`n    // Join the sorted items back into a string`n    const sortedVar = items.join(delimiter === ',' ? ',' : '" . Chr(92) . "n');`n`n    return sortedVar;`n}`n`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: getDataFromAPI`nlibs: null`ndescription: getDataFromAPI is a function to fetch data from an API.`n`n`nasync function getDataFromAPI(url) {`n	try {`n	    const response = await fetch(url);`n	    if (!response.ok) {`n		    throw new Error(" . Chr(34) . "Network response was not ok" . Chr(34) . ");`n	    }`n	    const data = await response.json();`n	    return data;`n	} catch (error) {`n	    console.error(" . Chr(34) . "Error fetching data:" . Chr(34) . ", error);`n	    return null;`n	}`n}`n`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: js`nname: getUrlParams`nlibs: null`ndescription: getUrlParams is a func`n`n`n      function getUrlParams() {`n        const queryString = window.location.search.substring(1); // Get the query string without the leading '?'`n        const paramPairs = queryString.split(" . Chr(34) . "&" . Chr(34) . "); // Split the query string into parameter key-value pairs`n`n        // Array to store parameter values starting from the first key's value`n        const paramValues = [];`n`n        // Iterate over each parameter pair`n        paramPairs.forEach((pair, index) => {`n          const pairParts = pair.split(" . Chr(34) . "=" . Chr(34) . ");`n`n          if (index === 0 && pairParts.length === 2) {`n            // For the first parameter pair (index === 0), add the value directly`n            const firstValue = decodeURIComponent(pairParts[1]);`n            paramValues.push(firstValue);`n          } else if (pairParts.length === 1) {`n            // For subsequent parameter pairs (values without keys), add the value directly`n            const value = decodeURIComponent(pairParts[0]);`n            paramValues.push(value);`n          }`n        });`n`n        // Join the parameter values into a single string separated by '&'`n        const resultString = paramValues.join(" . Chr(34) . "&" . Chr(34) . ");`n`n        return resultString;`n      }`n `nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: BuildInVars`nlibs: null`ndescription: BuildInVars is a function to get built-in variables like A_TickCount, A_Now, and date/time-related values.`n`n      var lastKeyPressed = " . Chr(34) . "" . Chr(34) . ";`n`n      function trackLastKeyPressed() {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          lastKeyPressed = event.key;`n          // console.log(lastKeyPressed);`n        });`n      }`n`n      function getLastKeyPressed() {`n        return lastKeyPressed;`n      }`n`n      // Call the trackLastKeyPressed function to start tracking key presses`n      trackLastKeyPressed();`n`n      let lastInputTime = Date.now(); // Initialize with current timestamp`n      let startTimestamp = Date.now(); // Initialize with current timestamp`n`n      // Event listener to track user activity`n      function resetIdleTimer() {`n        lastInputTime = Date.now(); // Update last input time`n      }`n`n      document.addEventListener(" . Chr(34) . "mousemove" . Chr(34) . ", resetIdleTimer);`n      document.addEventListener(" . Chr(34) . "keypress" . Chr(34) . ", resetIdleTimer);`n`n      // Function to calculate time since last input event`n      function A_TimeIdle() {`n        return Date.now() - lastInputTime; // Calculate time difference`n      }`n`n      // Function to calculate tick count in milliseconds`n      function A_TickCount() {`n        return Date.now() - startTimestamp;`n      }`n`n      function BuildInVars(varName) {`n        switch (varName) {`n          case " . Chr(34) . "A_ScreenWidth" . Chr(34) . ":`n            // Return screen width`n            return window.innerWidth;`n          case " . Chr(34) . "A_LastKey" . Chr(34) . ":`n            // Return screen width`n            return getLastKeyPressed();`n          case " . Chr(34) . "A_ScreenHeight" . Chr(34) . ":`n            // Return screen height`n            return window.innerHeight;`n          case " . Chr(34) . "A_TimeIdle" . Chr(34) . ":`n            // Return time idle`n            return A_TimeIdle();`n          case " . Chr(34) . "A_TickCount" . Chr(34) . ":`n            // Return tick count in milliseconds`n            return A_TickCount();`n          case " . Chr(34) . "A_Now" . Chr(34) . ":`n            // Return current local timestamp`n            return new Date().toLocaleString();`n          case " . Chr(34) . "A_YYYY" . Chr(34) . ":`n            // Return current year`n            return new Date().getFullYear();`n          case " . Chr(34) . "A_MM" . Chr(34) . ":`n            // Return current month`n            return (new Date().getMonth() + 1).toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_DD" . Chr(34) . ":`n            // Return current day`n            return new Date().getDate().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_MMMM" . Chr(34) . ":`n            // Return full month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_MMM" . Chr(34) . ":`n            // Return short month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_DDDD" . Chr(34) . ":`n            // Return full day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_DDD" . Chr(34) . ":`n            // Return short day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_Hour" . Chr(34) . ":`n            // Return current hour`n            return new Date().getHours().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Min" . Chr(34) . ":`n            // Return current minute`n            return new Date().getMinutes().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Sec" . Chr(34) . ":`n            // Return current second`n            return new Date().getSeconds().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Space" . Chr(34) . ":`n            // Return space character`n            return " . Chr(34) . " " . Chr(34) . ";`n          case " . Chr(34) . "A_Tab" . Chr(34) . ":`n            // Return tab character`n            return " . Chr(34) . "" . Chr(92) . "t" . Chr(34) . ";`n`n          default:`n            // Handle unknown variable names`n            return null;`n        }`n      }`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: RegExReplace`nlibs: null`ndescription: RegExReplace is a function to perform regex replacement.`n`n      // Function to simulate AutoHotkey's RegExReplace in JavaScript`n      function RegExReplace(inputStr, regexPattern, replacement) {`n          // Create a regular expression object using the provided pattern`n          const regex = new RegExp(regexPattern, 'g'); // 'g' flag for global match`n`n          // Use the replace() method to perform the regex replacement`n          const resultStr = inputStr.replace(regex, replacement);`n`n          // Return the modified string`n          return resultStr;`n      }`n`n`nfuncEND======================funcEND==============`n`n`nfunc======================func==============`nlang: js`nname: RegExMatch`nlibs: null`ndescription: RegExMatch is a function to perform regex matching and return the match position.`n`n`n      // RegExMatch`n      function RegExMatch(Haystack, NeedleRegEx, OutputVar, StartingPos) {`n          if (Haystack === null || NeedleRegEx === null) return null;`n`n          const regex = new RegExp(NeedleRegEx);`n          let match;`n`n          if (typeof Haystack === 'string') {`n              match = Haystack.match(regex);`n          }`n`n          if (match) {`n              if (OutputVar) {`n                  OutputVar.push(match[0]);`n              }`n              return match.index + 1;`n          } else {`n              return 0;`n          }`n      }`n`n`nfuncEND======================funcEND==============`n`n"
}
Gui 5: Hide
Return



ButtonDownloadIDE:
allData := ""

defaultSyntax := "cpp`nht`nStringTrimLeft,OUTVAR,INVAR|StringTrimRight,OUTVAR,INVAR`nint`nstr`nbool`nfloat`nint8`nint16`nint32`nint64`nif`nelse if`nelse`nwhile`nfor`nLoop`nLoop,`nLoop, Parse,`ncontinue`nbreak`nfunc`nawait`n=`n+=`n+=`n-=`n*=`n/=`n+`n+`n==`n!`n>`n<`n>=`n<=`nor`nand`n!=`ntrue`nfalse`nswitch`ncase`ndefault`nthrow`nErrorMsg`ntry`ncatch`nfinally`n.push`n.pop`n.size`n.insert`n.rm`n.indexOf`narr`narr int`narr str`narr float`narr bool`nvar`nlet`nconst`nreturn`nend`nglobal`n//`n/*`n*/`n" . Chr(92) . "`n0`nA_Index`nA_LoopField`nmain`non`non`noff`noff`non`noff`ncpp`non`non`noff"
Loop, Parse, defaultSyntax, `n, `r
{
defaultSyntax%A_Index% := A_LoopField
}

Loop, 85
{

if (EditText%A_Index% != "") or (EditText%A_Index% != null)
{
if (A_Index = 2)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 1) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 24) && (A_Index <= 29)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 6) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 47)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 2) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 51) && (A_Index <= 56)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 3) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 68)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 7) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 69)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 70)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 70)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 71)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 4) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 72)
{

if (Trim(EditText%A_Index%) = "-")
{
MsgBox, 16, Invalid Instructions, At AHKlikeLoopsIndexedAt you only added a - character. A number must follow the - or it should be a standalone number.
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}

if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 5) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 0) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
}

if (Trim(EditText%A_Index%) = "") or (EditText%A_Index% = null)
{
EditText%A_Index% := defaultSyntax%A_Index%
}

allData .= Trim(EditText%A_Index%) . "`n"
}

allFuncNamesForSavingIt := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs")
if (allFuncNamesForSavingIt != null)
{
allFuncNamesForSavingItOut := ""
Loop, Parse, allFuncNamesForSavingIt, "|"
{
tempReadSave1 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . A_LoopField)
tempReadSave2 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . A_LoopField)
tempReadSave3 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . A_LoopField)
tempReadSave4 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . A_LoopField)


bodyFuncTemp1 := "func======================func==============`n"
bodyFuncTemp2 := "lang: " . tempReadSave1
bodyFuncTemp3 := "`nname: " . A_LoopField
bodyFuncTemp4 := "`nlibs: " . tempReadSave4
bodyFuncTemp5 := "`ndescription: " . tempReadSave2
bodyFuncTemp6 := "`n`n" . tempReadSave3 . "`n`n"
bodyFuncTemp7 := "funcEND======================funcEND=============="

allFuncNamesForSavingItOut .= "`n" . bodyFuncTemp1 . bodyFuncTemp2 . bodyFuncTemp3 . bodyFuncTemp4 . bodyFuncTemp5 . bodyFuncTemp6 . bodyFuncTemp7 . "`n"
}


extraFuncNeedLoopParse := "`nfunc======================func==============`nlang: cpp`nname: LoopParseFunc`nlibs: #include <vector>|#include <string>|#include <regex>`ndescription: LoopParseFunc func is a func`n`n// Function to escape special characters for regex`nstd::string escapeRegex(const std::string& str) {`n    static const std::regex specialChars{R" . Chr(34) . "([-[" . Chr(92) . "]{}()*+?.," . Chr(92) . "^$|#" . Chr(92) . "s])" . Chr(34) . "};`n    return std::regex_replace(str, specialChars, R" . Chr(34) . "(" . Chr(92) . "$&)" . Chr(34) . ");`n}`n`n// Function to split a string based on delimiters`nstd::vector<std::string> LoopParseFunc(const std::string& var, const std::string& delimiter1 = " . Chr(34) . "" . Chr(34) . ", const std::string& delimiter2 = " . Chr(34) . "" . Chr(34) . ") {`n    std::vector<std::string> items;`n    if (delimiter1.empty() && delimiter2.empty()) {`n        // If no delimiters are provided, return a list of characters`n        for (char c : var) {`n            items.push_back(std::string(1, c));`n        }`n    } else {`n        // Escape delimiters for regex`n        std::string escapedDelimiters = escapeRegex(delimiter1 + delimiter2);`n        // Construct the regular expression pattern for splitting the string`n        std::string pattern = " . Chr(34) . "[" . Chr(34) . " + escapedDelimiters + " . Chr(34) . "]+" . Chr(34) . ";`n        std::regex regexPattern(pattern);`n        std::sregex_token_iterator iter(var.begin(), var.end(), regexPattern, -1);`n        std::sregex_token_iterator end;`n        while (iter != end) {`n            items.push_back(*iter++);`n        }`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: LoopParseFunc`nlibs: null`ndescription: LoopParseFunc splits a string into an array based on specified delimiters or returns an array of characters if no delimiters are provided.`n`nfunction LoopParseFunc(varString, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . ") {`n    let items;`n    if (!delimiter1 && !delimiter2) {`n        // If no delimiters are provided, return an array of characters`n        items = [...varString];`n    } else {`n        // Construct the regular expression pattern for splitting the string`n        let pattern = new RegExp('[' + delimiter1.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + delimiter2.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + ']+');`n        // Split the string using the constructed pattern`n        items = varString.split(pattern);`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: LoopParseFunc`nlibs: import re`ndescription: LoopParseFunc splits a string into a list based on specified delimiters or returns a list of characters if no delimiters are provided.`n`ndef LoopParseFunc(var, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . "):`n    if not delimiter1 and not delimiter2:`n        # If no delimiters are provided, return a list of characters`n        items = list(var)`n    else:`n        # Construct the regular expression pattern for splitting the string`n        pattern = r'[' + re.escape(delimiter1) + re.escape(delimiter2) + r']+'`n        # Split the string using the constructed pattern`n        items = re.split(pattern, var)`n    return items`n`nfuncEND======================funcEND==============`n"

Gui 5: Show
Sleep, 50
allData := allData . "`n" . extraFuncNeedLoopParse . "`n" . allFuncNamesForSavingItOut . "`n" . ToggleMoreBuildInFuncsTEXT
Gui 5: Hide
}
variables.sha256 = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(variables.allData)).then(buffer => Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join(''));
ideHTMLdata := IDEgenerataion(allData, sha256, 0)
FileAppend, %ideHTMLdata%, IDE.html

Return
ButtonDownloadInstruction:
allData := ""

defaultSyntax := "cpp`nht`nStringTrimLeft,OUTVAR,INVAR|StringTrimRight,OUTVAR,INVAR`nint`nstr`nbool`nfloat`nint8`nint16`nint32`nint64`nif`nelse if`nelse`nwhile`nfor`nLoop`nLoop,`nLoop, Parse,`ncontinue`nbreak`nfunc`nawait`n=`n+=`n+=`n-=`n*=`n/=`n+`n+`n==`n!`n>`n<`n>=`n<=`nor`nand`n!=`ntrue`nfalse`nswitch`ncase`ndefault`nthrow`nErrorMsg`ntry`ncatch`nfinally`n.push`n.pop`n.size`n.insert`n.rm`n.indexOf`narr`narr int`narr str`narr float`narr bool`nvar`nlet`nconst`nreturn`nend`nglobal`n//`n/*`n*/`n" . Chr(92) . "`n0`nA_Index`nA_LoopField`nmain`non`non`noff`noff`non`noff`ncpp`non`non`noff"
Loop, Parse, defaultSyntax, `n, `r
{
defaultSyntax%A_Index% := A_LoopField
}

Loop, 85
{

if (EditText%A_Index% != "") or (EditText%A_Index% != null)
{
if (A_Index = 2)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 1) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 24) && (A_Index <= 29)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 6) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 47)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 2) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index >= 51) && (A_Index <= 56)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 3) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 68)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 7) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 69)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 70)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 9) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 71)
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 4) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else if (A_Index = 72)
{

if (Trim(EditText%A_Index%) = "-")
{
MsgBox, 16, Invalid Instructions, At AHKlikeLoopsIndexedAt you only added a - character. A number must follow the - or it should be a standalone number.
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}

if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 5) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
else
{
if (!(rulesForEditBoxesSyntaxDef(EditText%A_Index%, 0) != false))
{
MsgBox, 16, Invalid nstructions, Invalid nstructions your language rules are wrong!!!
return
}
}
}

if (Trim(EditText%A_Index%) = "") or (EditText%A_Index% = null)
{
EditText%A_Index% := defaultSyntax%A_Index%
}

allData .= Trim(EditText%A_Index%) . "`n"
}

allFuncNamesForSavingIt := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncs")
if (allFuncNamesForSavingIt != null)
{
allFuncNamesForSavingItOut := ""
Loop, Parse, allFuncNamesForSavingIt, "|"
{
tempReadSave1 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLang-" . A_LoopField)
tempReadSave2 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsDescription-" . A_LoopField)
tempReadSave3 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsCode-" . A_LoopField)
tempReadSave4 := StoreLocally("r", "HTVM-ProjectName" . currentProjectNum . "-AllBuildInFuncsLibs-" . A_LoopField)


bodyFuncTemp1 := "func======================func==============`n"
bodyFuncTemp2 := "lang: " . tempReadSave1
bodyFuncTemp3 := "`nname: " . A_LoopField
bodyFuncTemp4 := "`nlibs: " . tempReadSave4
bodyFuncTemp5 := "`ndescription: " . tempReadSave2
bodyFuncTemp6 := "`n`n" . tempReadSave3 . "`n`n"
bodyFuncTemp7 := "funcEND======================funcEND=============="

allFuncNamesForSavingItOut .= "`n" . bodyFuncTemp1 . bodyFuncTemp2 . bodyFuncTemp3 . bodyFuncTemp4 . bodyFuncTemp5 . bodyFuncTemp6 . bodyFuncTemp7 . "`n"
}

extraFuncNeedLoopParse := "`nfunc======================func==============`nlang: cpp`nname: LoopParseFunc`nlibs: #include <vector>|#include <string>|#include <regex>`ndescription: LoopParseFunc func is a func`n`n// Function to escape special characters for regex`nstd::string escapeRegex(const std::string& str) {`n    static const std::regex specialChars{R" . Chr(34) . "([-[" . Chr(92) . "]{}()*+?.," . Chr(92) . "^$|#" . Chr(92) . "s])" . Chr(34) . "};`n    return std::regex_replace(str, specialChars, R" . Chr(34) . "(" . Chr(92) . "$&)" . Chr(34) . ");`n}`n`n// Function to split a string based on delimiters`nstd::vector<std::string> LoopParseFunc(const std::string& var, const std::string& delimiter1 = " . Chr(34) . "" . Chr(34) . ", const std::string& delimiter2 = " . Chr(34) . "" . Chr(34) . ") {`n    std::vector<std::string> items;`n    if (delimiter1.empty() && delimiter2.empty()) {`n        // If no delimiters are provided, return a list of characters`n        for (char c : var) {`n            items.push_back(std::string(1, c));`n        }`n    } else {`n        // Escape delimiters for regex`n        std::string escapedDelimiters = escapeRegex(delimiter1 + delimiter2);`n        // Construct the regular expression pattern for splitting the string`n        std::string pattern = " . Chr(34) . "[" . Chr(34) . " + escapedDelimiters + " . Chr(34) . "]+" . Chr(34) . ";`n        std::regex regexPattern(pattern);`n        std::sregex_token_iterator iter(var.begin(), var.end(), regexPattern, -1);`n        std::sregex_token_iterator end;`n        while (iter != end) {`n            items.push_back(*iter++);`n        }`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: js`nname: LoopParseFunc`nlibs: null`ndescription: LoopParseFunc splits a string into an array based on specified delimiters or returns an array of characters if no delimiters are provided.`n`nfunction LoopParseFunc(varString, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . ") {`n    let items;`n    if (!delimiter1 && !delimiter2) {`n        // If no delimiters are provided, return an array of characters`n        items = [...varString];`n    } else {`n        // Construct the regular expression pattern for splitting the string`n        let pattern = new RegExp('[' + delimiter1.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + delimiter2.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + ']+');`n        // Split the string using the constructed pattern`n        items = varString.split(pattern);`n    }`n    return items;`n}`n`nfuncEND======================funcEND==============`n`nfunc======================func==============`nlang: py`nname: LoopParseFunc`nlibs: import re`ndescription: LoopParseFunc splits a string into a list based on specified delimiters or returns a list of characters if no delimiters are provided.`n`ndef LoopParseFunc(var, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . "):`n    if not delimiter1 and not delimiter2:`n        # If no delimiters are provided, return a list of characters`n        items = list(var)`n    else:`n        # Construct the regular expression pattern for splitting the string`n        pattern = r'[' + re.escape(delimiter1) + re.escape(delimiter2) + r']+'`n        # Split the string using the constructed pattern`n        items = re.split(pattern, var)`n    return items`n`nfuncEND======================funcEND==============`n"

Gui 5: Show
Sleep, 50
allData := allData . "`n" . extraFuncNeedLoopParse . "`n" . allFuncNamesForSavingItOut . "`n" . ToggleMoreBuildInFuncsTEXT
Gui 5: Hide
}
variables.sha256 = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(variables.allData)).then(buffer => Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join(''));
ideHTMLdata := IDEgenerataion(allData, sha256, 0)
FileAppend, %allData%, HT-instructions.txt
Return


addBackShlashes(str123)
{
str123 := StrReplace(str123, Chr(46), Chr(92) . Chr(46))
str123 := StrReplace(str123, Chr(42), Chr(92) . Chr(42))
str123 := StrReplace(str123, Chr(43), Chr(92) . Chr(43))
str123 := StrReplace(str123, Chr(63), Chr(92) . Chr(63))
str123 := StrReplace(str123, Chr(94), Chr(92) . Chr(94))
str123 := StrReplace(str123, Chr(36), Chr(92) . Chr(36))
str123 := StrReplace(str123, Chr(91), Chr(92) . Chr(91))
str123 := StrReplace(str123, Chr(93), Chr(92) . Chr(93))
str123 := StrReplace(str123, Chr(40), Chr(92) . Chr(40))
str123 := StrReplace(str123, Chr(41), Chr(92) . Chr(41))
str123 := StrReplace(str123, Chr(123), Chr(92) . Chr(123))
str123 := StrReplace(str123, Chr(125), Chr(92) . Chr(125))
str123 := StrReplace(str123, Chr(124), Chr(92) . Chr(124))
str123 := StrReplace(str123, Chr(92), Chr(92) . Chr(92))
str123 := StrReplace(str123, Chr(45), Chr(92) . Chr(45))
str123 := StrReplace(str123, Chr(47), Chr(92) . Chr(47))
return str123
}

IDEgenerataion(instructions, theSHA, modeRunHTML)
{

keyWordsCommands := ""
fileExtention := ""
code := ""
keyWordINT := ""
keyWordSTR := ""
keyWordFLOAT := ""
filePathOfCode := ""
langToTranspileTo := ""
out_KeyWordsCommands := ""
outTrimCode := ""
htCode := ""
str1 := ""
str2 := ""
str3 := ""
str4 := ""
str5 := ""
str6 := ""
str7 := ""
str8 := ""
str9 := ""
str10 := ""
outVarOperator := ""
lineDone := 0
areWeInAFuncFromInstructions := 0
areWeInAFuncFromInstructionsLineNum := 0
keyWordIF := ""
keyWordElseIf := ""
keyWordWhileLoop := ""
keyWordForLoop := ""
keyWordElse := ""
keyWordBOOL := ""
keyWordINT8 := ""
keyWordINT16 := ""
keyWordINT32 := ""
keyWordINT64 := ""
keyWordLoop := ""
keyWordLoopInfinite := ""
keyWordLoopParse := ""
keyWordBreak := ""
keyWordContinue := ""
keyWordFunc := ""
keyWordAwait := ""
keyWordConcatenationAssignmentOperator := ""
keyWordVariablesAssignmentOperator := ""
keyWordAdditionAssignmentOperator := ""
keyWordSubtractionAssignmentOperator := ""
keyWordMultiplicationAssignmentOperator := ""
keyWordDivisionAssignmentOperator := ""
keyWordAdditionOperator := ""
keyWordConcatenationOperator := ""
keyWordEqualOperator := ""
keyWordNotOperator := ""
keyWordGreaterThanOperator := ""
keyWordLessThanOperator := ""
keyWordGreaterThanOrEqualToOperator := ""
keyWordLessThanOrEqualToOperator := ""
keyWordOrOperator := ""
keyWordAndOperator := ""
keyWordNotEqualToOperator := ""
keyWordTrue := ""
keyWordFalse := ""
keyWordSwitch := ""
keyWordSwitchCase := ""
keyWordSwitchDefault := ""
keyWordThrow := ""
keyWordErrorMsg := ""
keyWordTry := ""
keyWordCatch := ""
keyWordFinally := ""
keyWordArrayAppend := ""
keyWordArrayPop := ""
keyWordArraySize := ""
keyWordArrayInsert := ""
keyWordArrayRemove := ""
keyWordArrayIndexOf := ""
keyWordArrayDefinition := ""
keyWordArrayOfIntegersDefinition := ""
keyWordArrayOfStringsDefinition := ""
keyWordArrayOfFloatingPointNumbersDefinition := ""
keyWordArrayOfBooleansDefinition := ""
keyWordJavaScriptVar := ""
keyWordJavaScriptLet := ""
keyWordJavaScriptConst := ""
keyWordReturnStatement := ""
keyWordEnd := ""
keyWordGlobal := ""
keyWordComment := ""
keyWordCommentOpenMultiLine := ""
keyWordCommentCloseMultiLine := ""
keyWordEscpaeChar := ""
AHKlikeLoopsIndexedAt := ""
keyWordAIndex := ""
keyWordALoopField := ""
keyWordMainLabel := ""

useFuncKeyWord := ""
useCurlyBraces := ""
useEnd := ""
useSemicolon := ""
useParentheses := ""
usePythonicColonSyntax := ""
useTypes := ""
forLoopLang := ""
useJavaScriptInAfullHTMLfile := ""
useInJavaScriptAlwaysUseVar := ""
useJavaScriptAmainFuncDef := ""

theSemicolon := ""
theColon := ""

theCppVarForErrors := "jhku-dfsds-ds-d-ffdsf-sdfsfdsedsf"
theJSvarDeclaredVarsBugFix := "|"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; code starts here realy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




ALoopField := ""

Loop, Parse, instructions, `n, `r
{

ALoopField := A_LoopField
if (A_Index = 1)
{
langToTranspileTo := Trim(ALoopField)
}
if (A_Index = 2)
{
fileExtention := Trim(ALoopField)
}
if (A_Index = 3)
{
keyWordsCommands := Trim(ALoopField)
}

if (A_Index = 4)
{
keyWordINT := Trim(ALoopField)
}
if (A_Index = 5)
{
keyWordSTR := Trim(ALoopField)
}
if (A_Index = 6)
{
keyWordBOOL := Trim(ALoopField)
}
if (A_Index = 7)
{
keyWordFLOAT := Trim(ALoopField)
}
if (A_Index = 8)
{
keyWordINT8 := Trim(ALoopField)
}
if (A_Index = 9)
{
keyWordINT16 := Trim(ALoopField)
}
if (A_Index = 10)
{
keyWordINT32 := Trim(ALoopField)
}
if (A_Index = 11)
{
keyWordINT64 := Trim(ALoopField)
}
if (A_Index = 12)
{
keyWordIF := Trim(ALoopField)
}
if (A_Index = 13)
{
keyWordElseIf := Trim(ALoopField)
}
if (A_Index = 14)
{
keyWordElse := Trim(ALoopField)
}
if (A_Index = 15)
{
keyWordWhileLoop := Trim(ALoopField)
}
if (A_Index = 16)
{
keyWordForLoop := Trim(ALoopField)
}
if (A_Index = 17)
{
keyWordLoopInfinite := Trim(ALoopField)
}
if (A_Index = 18)
{
keyWordLoop := Trim(ALoopField)
}
if (A_Index = 19)
{
keyWordLoopParse := Trim(ALoopField)
}
if (A_Index = 20)
{
keyWordContinue := Trim(ALoopField)
}
if (A_Index = 21)
{
keyWordBreak := Trim(ALoopField)
}
if (A_Index = 22)
{
keyWordFunc := Trim(ALoopField)
}
if (A_Index = 23)
{
keyWordAwait := Trim(ALoopField)
}
if (A_Index = 24)
{
keyWordVariablesAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 25)
{
keyWordConcatenationAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 26)
{
keyWordAdditionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 27)
{
keyWordSubtractionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 28)
{
keyWordMultiplicationAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 29)
{
keyWordDivisionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 30)
{
keyWordAdditionOperator := Trim(ALoopField)
}
if (A_Index = 31)
{
keyWordConcatenationOperator := Trim(ALoopField)
}
if (A_Index = 32)
{
keyWordEqualOperator := Trim(ALoopField)
}
if (A_Index = 33)
{
keyWordNotOperator := Trim(ALoopField)
}
if (A_Index = 34)
{
keyWordGreaterThanOperator := Trim(ALoopField)
}
if (A_Index = 35)
{
keyWordLessThanOperator := Trim(ALoopField)
}
if (A_Index = 36)
{
keyWordGreaterThanOrEqualToOperator := Trim(ALoopField)
}
if (A_Index = 37)
{
keyWordLessThanOrEqualToOperator := Trim(ALoopField)
}
if (A_Index = 38)
{
keyWordOrOperator := Trim(ALoopField)
}
if (A_Index = 39)
{
keyWordAndOperator := Trim(ALoopField)
}
if (A_Index = 40)
{
keyWordNotEqualToOperator := Trim(ALoopField)
}
if (A_Index = 41)
{
keyWordTrue := Trim(ALoopField)
}
if (A_Index = 42)
{
keyWordFalse := Trim(ALoopField)
}
if (A_Index = 43)
{
keyWordSwitch := Trim(ALoopField)
}
if (A_Index = 44)
{
keyWordSwitchCase := Trim(ALoopField)
}
if (A_Index = 45)
{
keyWordSwitchDefault := Trim(ALoopField)
}
if (A_Index = 46)
{
keyWordThrow := Trim(ALoopField)
}
if (A_Index = 47)
{
keyWordErrorMsg := Trim(ALoopField)
}
if (A_Index = 48)
{
keyWordTry := Trim(ALoopField)
}
if (A_Index = 49)
{
keyWordCatch := Trim(ALoopField)
}
if (A_Index = 50)
{
keyWordFinally := Trim(ALoopField)
}
if (A_Index = 51)
{
keyWordArrayAppend := Trim(ALoopField)
}
if (A_Index = 52)
{
keyWordArrayPop := Trim(ALoopField)
}
if (A_Index = 53)
{
keyWordArraySize := Trim(ALoopField)
}
if (A_Index = 54)
{
keyWordArrayInsert := Trim(ALoopField)
}
if (A_Index = 55)
{
keyWordArrayRemove := Trim(ALoopField)
}
if (A_Index = 56)
{
keyWordArrayIndexOf := Trim(ALoopField)
}
if (A_Index = 57)
{
keyWordArrayDefinition := Trim(ALoopField)
}
if (A_Index = 58)
{
keyWordArrayOfIntegersDefinition := Trim(ALoopField)
}
if (A_Index = 59)
{
keyWordArrayOfStringsDefinition := Trim(ALoopField)
}
if (A_Index = 60)
{
keyWordArrayOfFloatingPointNumbersDefinition := Trim(ALoopField)
}
if (A_Index = 61)
{
keyWordArrayOfBooleansDefinition := Trim(ALoopField)
}
if (A_Index = 62)
{
keyWordJavaScriptVar := Trim(ALoopField)
}
if (A_Index = 63)
{
keyWordJavaScriptLet := Trim(ALoopField)
}
if (A_Index = 64)
{
keyWordJavaScriptConst := Trim(ALoopField)
}
if (A_Index = 65)
{
keyWordReturnStatement := Trim(ALoopField)
}
if (A_Index = 66)
{
keyWordEnd := Trim(ALoopField)
}
if (A_Index = 67)
{
keyWordGlobal := Trim(ALoopField)
}
if (A_Index = 68)
{
keyWordComment := Trim(ALoopField)
}
if (A_Index = 69)
{
keyWordCommentOpenMultiLine := Trim(ALoopField)
}
if (A_Index = 70)
{
keyWordCommentCloseMultiLine := Trim(ALoopField)
}
if (A_Index = 71)
{
keyWordEscpaeChar := Trim(ALoopField)
}
if (A_Index = 72)
{
AHKlikeLoopsIndexedAt := Trim(ALoopField)
}
if (A_Index = 73)
{
keyWordAIndex := Trim(ALoopField)
}
if (A_Index = 74)
{
keyWordALoopField := Trim(ALoopField)
}
if (A_Index = 75)
{
keyWordMainLabel := Trim(ALoopField)
}
if (A_Index = 76)
{
useFuncKeyWord := Trim(ALoopField)
}
if (A_Index = 77)
{
useCurlyBraces := Trim(ALoopField)
}
if (A_Index = 78)
{
useEnd := Trim(ALoopField)
}
if (A_Index = 79)
{
useSemicolon := Trim(ALoopField)
}
if (A_Index = 80)
{
useParentheses := Trim(ALoopField)
}
if (A_Index = 81)
{
usePythonicColonSyntax := Trim(ALoopField)
}
if (A_Index = 82)
{
forLoopLang := Trim(ALoopField)
}
if (A_Index = 83)
{
useInJavaScriptAlwaysUseVar := Trim(ALoopField)
}
if (A_Index = 84)
{
useJavaScriptInAfullHTMLfile := Trim(ALoopField)
}
if (A_Index = 85)
{
useJavaScriptAmainFuncDef := Trim(ALoopField)
}

}




displayExampleTextLine1 := ""
displayExampleTextLine2 := ""
displayExampleTextLine3 := ""
displayExampleTextLine4 := ""
displayExampleTextLine5 := ""
displayExampleTextLine6 := ""
displayExampleTextLine7 := ""
displayExampleTextLine8 := ""
displayExampleTextLine9 := ""
displayExampleTextLine10 := ""
displayExampleTextLine11 := ""
displayExampleTextLine12 := ""
displayExampleTextLine13 := ""
displayExampleTextLine14 := ""
displayExampleTextLine15 := ""
displayExampleTextLine16 := ""
displayExampleTextLine17 := ""
displayExampleTextLine18 := ""
displayExampleTextLine19 := ""
displayExampleTextLine20 := ""
displayExampleTextLine21 := ""
displayExampleTextLine22 := ""
displayExampleTextLine23 := ""
displayExampleTextLine24 := ""
displayExampleTextLine25 := ""
displayExampleTextLine26 := ""
displayExampleTextLine27 := ""
displayExampleTextLine28 := ""
displayExampleTextLine29 := ""
displayExampleTextLine30 := ""
displayExampleTextLine31 := ""
displayExampleTextLine32 := ""
displayExampleTextLine33 := ""
displayExampleTextLine34 := ""
displayExampleTextLine35 := ""
displayExampleTextLine36 := ""
displayExampleTextLine37 := ""
displayExampleTextLine38 := ""
displayExampleTextLine39 := ""
displayExampleTextLine40 := ""
displayExampleTextLine41 := ""
displayExampleTextLine42 := ""
displayExampleTextLine43 := ""
displayExampleTextLine44 := ""
displayExampleTextLine45 := ""
displayExampleTextLine46 := ""
displayExampleTextLine47 := ""
displayExampleTextLine48 := ""
displayExampleTextLine49 := ""
displayExampleTextLine50 := ""
displayExampleTextLine51 := ""
displayExampleTextLine52 := ""
displayExampleTextLine53 := ""
displayExampleTextLine54 := ""
displayExampleTextLine55 := ""
displayExampleTextLine56 := ""
displayExampleTextLine57 := ""
displayExampleTextLine58 := ""
displayExampleTextLine59 := ""
displayExampleTextLine60 := ""
displayExampleTextLine61 := ""
displayExampleTextLine62 := ""
displayExampleTextLine63 := ""
displayExampleTextLine64 := ""
displayExampleTextLine65 := ""
displayExampleTextLine66 := ""
displayExampleTextLine67 := ""
displayExampleTextLine68 := ""
displayExampleTextLine69 := ""
displayExampleTextLine70 := ""
displayExampleTextLine71 := ""
displayExampleTextLine72 := ""
displayExampleTextLine73 := ""
displayExampleTextLine74 := ""
displayExampleTextLine75 := ""
displayExampleTextLine76 := ""
displayExampleTextLine77 := ""
displayExampleTextLine78 := ""
displayExampleTextLine79 := ""
displayExampleTextLine80 := ""
displayExampleTextLine81 := ""
displayExampleTextLine82 := ""
displayExampleTextLine83 := ""
displayExampleTextLine84 := ""
displayExampleTextLine85 := ""
displayExampleTextLine86 := ""
displayExampleTextLine87 := ""
displayExampleTextLine88 := ""
displayExampleTextLine89 := ""
displayExampleTextLine90 := ""
displayExampleTextLine91 := ""
displayExampleTextLine92 := ""
displayExampleTextLine93 := ""
displayExampleTextLine94 := ""
displayExampleTextLine95 := ""
displayExampleTextLine96 := ""
displayExampleTextLine97 := ""
displayExampleTextLine98 := ""
displayExampleTextLine99 := ""
displayExampleTextLine100 := ""
displayExampleTextLine101 := ""
displayExampleTextLine102 := ""
displayExampleTextLine103 := ""
displayExampleTextLine104 := ""
displayExampleTextLine105 := ""
displayExampleTextLine106 := ""
displayExampleTextLine107 := ""
displayExampleTextLine108 := ""
displayExampleTextLine109 := ""
displayExampleTextLine110 := ""
displayExampleTextLine111 := ""
displayExampleTextLine112 := ""
displayExampleTextLine113 := ""
displayExampleTextLine114 := ""
displayExampleTextLine115 := ""
displayExampleTextLine116 := ""
displayExampleTextLine117 := ""
displayExampleTextLine118 := ""
displayExampleTextLine119 := ""
displayExampleTextLine120 := ""

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if (useSemicolon = "on")
{
ifWeUsedAsemicolumON := ";"
}
else
{
ifWeUsedAsemicolumON := ""
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;
defineCodeBlockChar := ""
defineCodeBlockCharCLOSE := ""

if (usePythonicColonSyntax = "on")
{
defineCodeBlockChar := ":"
}

if (useCurlyBraces = "on") && (useEnd = "off")
{
defineCodeBlockChar := " {"
defineCodeBlockCharCLOSE := "}"
}
if (useCurlyBraces = "off") && (useEnd = "on")
{
defineCodeBlockCharCLOSE := keyWordEnd
}

openParenthesesPY := ""
closeParenthesesPY := ""

openParentheses := ""
closeParentheses := ""
if (useParentheses = "on")
{
openParentheses := "("
closeParentheses := ")"
}


if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
defineCodeBlockChar := " {"
defineCodeBlockCharCLOSE := "}"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
defineCodeBlockChar := ":"
defineCodeBlockCharCLOSE := ""
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
defineCodeBlockChar := ""
defineCodeBlockCharCLOSE := keyWordEnd . "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
defineCodeBlockChar := ""
defineCodeBlockCharCLOSE := ""
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
defineCodeBlockChar := ":"
defineCodeBlockCharCLOSE := keyWordEnd . "`n"
}



; THEfuncKeyWord
; openParentheses
; closeParentheses
; defineCodeBlockCharCLOSE
; defineCodeBlockChar
; ifWeUsedAsemicolumON

THEfuncKeyWord := ""
if (useFuncKeyWord = "on")
{
THEfuncKeyWord := keyWordFunc
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine1 := "" . keyWordComment . " This is a preview of your language " . keyWordAndOperator . " how it will look.`n"
displayExampleTextLine2 := "`n"
displayExampleTextLine3 := "" . keyWordComment . " Here's how types will appear if you only define them:`n"
displayExampleTextLine4 := "" . keyWordINT . " varName1" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine5 := "" . keyWordSTR . " varName2" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine6 := "" . keyWordBOOL . " varName3" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine7 := "" . keyWordFLOAT . " varName4" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine8 := "" . keyWordINT8 . " varName5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine9 := "" . keyWordINT16 . " varName6" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine10 := "" . keyWordINT32 . " varName7" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine11 := "" . keyWordINT64 . " varName8" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine12 := "`n"
displayExampleTextLine13 := "" . keyWordComment . " Alternatively, you can define them like this:`n"
displayExampleTextLine14 := "" . keyWordINT . " varName9 " . keyWordVariablesAssignmentOperator . " 34" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine15 := "`n"
displayExampleTextLine16 := "" . keyWordComment . " Here is how to define a function with static types if you convert to C++.`n"
displayExampleTextLine17 := "" . keyWordComment . " However, it will still work even if you are not converting to C++; types will be stripped away.`n"
displayExampleTextLine18 := keyWordFunc . " void funcName1(" . keyWordINT . " paramVar1, " . keyWordSTR . " paramVar2 " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "" . Chr(34) . ", " . keyWordBOOL . " paramVar3 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . ", " . keyWordFLOAT . " paramVar4 " . keyWordVariablesAssignmentOperator . " 1.5)" . defineCodeBlockChar . "`n" . A_Tab . keyWordComment . " This is how the global keyword works if we convert to Python.`n" . A_Tab . keyWordComment . " But even if we don't, it will just be removed, so you can add it if you want to convert to Python as well.`n" . A_Tab . "" . keyWordGlobal . " varName5" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine19 := A_Tab . "" . keyWordComment . " Here's how if, else if, " . keyWordAndOperator . " else statements will look:`n"
displayExampleTextLine20 := A_Tab . keyWordIF . " " . openParentheses . "varName1 " . keyWordEqualOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine21 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine22 := A_Tab . "} " . "`n"
displayExampleTextLine23 := A_Tab . keyWordElseIf . " " . openParentheses . "varName1 " . keyWordNotEqualToOperator . " paramVar1 " . keyWordOrOperator  . " varName1 " . keyWordLessThanOrEqualToOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine24 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is less than or equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine26 := A_Tab . "} " . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine27 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is NOT less than or equal to paramVar1 or something else" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine28 := A_Tab . "} " . "`n`n" . A_Tab . keyWordComment . " this is how the return keyword will look like in your lang`n" . A_Tab . "" . keyWordReturnStatement . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine29 := "} " . "`n"
displayExampleTextLine30 := "`n"
displayExampleTextLine31 := "" . keyWordMainLabel . " " . keyWordComment . " This is where the " . keyWordMainLabel . " function will start. It's just a label, so don't worry.`n"
displayExampleTextLine32 := "funcName1(varName9)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine33 := "`n"



}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine1 := "" . keyWordComment . " This is a preview of your language " . keyWordAndOperator . " how it will look.`n"
displayExampleTextLine2 := "`n"
displayExampleTextLine3 := "" . keyWordComment . " Here's how types will appear if you only define them:`n"
displayExampleTextLine4 := "" . keyWordINT . " varName1" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine5 := "" . keyWordSTR . " varName2" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine6 := "" . keyWordBOOL . " varName3" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine7 := "" . keyWordFLOAT . " varName4" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine8 := "" . keyWordINT8 . " varName5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine9 := "" . keyWordINT16 . " varName6" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine10 := "" . keyWordINT32 . " varName7" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine11 := "" . keyWordINT64 . " varName8" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine12 := "`n"
displayExampleTextLine13 := "" . keyWordComment . " Alternatively, you can define them like this:`n"
displayExampleTextLine14 := "" . keyWordINT . " varName9 " . keyWordVariablesAssignmentOperator . " 34" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine15 := "`n"
displayExampleTextLine16 := "" . keyWordComment . " Here is how to define a function with static types if you convert to C++.`n"
displayExampleTextLine17 := "" . keyWordComment . " However, it will still work even if you are not converting to C++; types will be stripped away.`n"
displayExampleTextLine18 := keyWordFunc . " void funcName1(" . keyWordINT . " paramVar1, " . keyWordSTR . " paramVar2 " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "" . Chr(34) . ", " . keyWordBOOL . " paramVar3 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . ", " . keyWordFLOAT . " paramVar4 " . keyWordVariablesAssignmentOperator . " 1.5)" . defineCodeBlockChar . "`n" . A_Tab . keyWordComment . " This is how the global keyword works if we convert to Python.`n" . A_Tab . keyWordComment . " But even if we don't, it will just be removed, so you can add it if you want to convert to Python as well.`n" . A_Tab . "" . keyWordGlobal . " varName5" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine19 := A_Tab . "" . keyWordComment . " Here's how if, else if, " . keyWordAndOperator . " else statements will look:`n"
displayExampleTextLine20 := A_Tab . keyWordIF . " " . openParentheses . "varName1 " . keyWordEqualOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine21 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine23 := A_Tab . keyWordElseIf . " " . openParentheses . "varName1 " . keyWordNotEqualToOperator . " paramVar1 " . keyWordOrOperator  . " varName1 " . keyWordLessThanOrEqualToOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine24 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is less than or equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine26 := A_Tab . "" . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine27 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is NOT less than or equal to paramVar1 or something else" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine30 := "`n" . A_Tab . keyWordComment . " this is how the return keyword will look like in your lang`n" . A_Tab . "" . keyWordReturnStatement . "" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine31 := "" . keyWordMainLabel . " " . keyWordComment . " This is where the " . keyWordMainLabel . " function will start. It's just a label, so don't worry.`n"
displayExampleTextLine32 := "funcName1(varName9)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine33 := "`n"



}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine1 := "" . keyWordComment . " This is a preview of your language " . keyWordAndOperator . " how it will look.`n"
displayExampleTextLine2 := "`n"
displayExampleTextLine3 := "" . keyWordComment . " Here's how types will appear if you only define them:`n"
displayExampleTextLine4 := "" . keyWordINT . " varName1" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine5 := "" . keyWordSTR . " varName2" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine6 := "" . keyWordBOOL . " varName3" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine7 := "" . keyWordFLOAT . " varName4" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine8 := "" . keyWordINT8 . " varName5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine9 := "" . keyWordINT16 . " varName6" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine10 := "" . keyWordINT32 . " varName7" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine11 := "" . keyWordINT64 . " varName8" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine12 := "`n"
displayExampleTextLine13 := "" . keyWordComment . " Alternatively, you can define them like this:`n"
displayExampleTextLine14 := "" . keyWordINT . " varName9 " . keyWordVariablesAssignmentOperator . " 34" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine15 := "`n"
displayExampleTextLine16 := "" . keyWordComment . " Here is how to define a function with static types if you convert to C++.`n"
displayExampleTextLine17 := "" . keyWordComment . " However, it will still work even if you are not converting to C++; types will be stripped away.`n"
displayExampleTextLine18 := keyWordFunc . " void funcName1(" . keyWordINT . " paramVar1, " . keyWordSTR . " paramVar2 " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "" . Chr(34) . ", " . keyWordBOOL . " paramVar3 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . ", " . keyWordFLOAT . " paramVar4 " . keyWordVariablesAssignmentOperator . " 1.5)" . defineCodeBlockChar . "`n" . A_Tab . keyWordComment . " This is how the global keyword works if we convert to Python.`n" . A_Tab . keyWordComment . " But even if we don't, it will just be removed, so you can add it if you want to convert to Python as well.`n" . A_Tab . "" . keyWordGlobal . " varName5" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine19 := A_Tab . "" . keyWordComment . " Here's how if, else if, " . keyWordAndOperator . " else statements will look:`n"
displayExampleTextLine20 := A_Tab . keyWordIF . " " . openParentheses . "varName1 " . keyWordEqualOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine21 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine23 := A_Tab . keyWordElseIf . " " . openParentheses . "varName1 " . keyWordNotEqualToOperator . " paramVar1 " . keyWordOrOperator  . " varName1 " . keyWordLessThanOrEqualToOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine24 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is less than or equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine26 := A_Tab . "" . keyWordElse .  defineCodeBlockChar . "`n"
displayExampleTextLine27 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is NOT less than or equal to paramVar1 or something else" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine28 := A_Tab . defineCodeBlockCharCLOSE . "`n" . A_Tab . keyWordComment . " this is how the return keyword will look like in your lang`n" . A_Tab . "" . keyWordReturnStatement . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine29 := defineCodeBlockCharCLOSE
displayExampleTextLine30 := "`n"
displayExampleTextLine31 := "" . keyWordMainLabel . " " . keyWordComment . " This is where the " . keyWordMainLabel . " function will start. It's just a label, so don't worry.`n"
displayExampleTextLine32 := "funcName1(varName9)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine33 := "`n"



}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine1 := "" . keyWordComment . " This is a preview of your language " . keyWordAndOperator . " how it will look.`n"
displayExampleTextLine2 := "`n"
displayExampleTextLine3 := "" . keyWordComment . " Here's how types will appear if you only define them:`n"
displayExampleTextLine4 := "" . keyWordINT . " varName1" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine5 := "" . keyWordSTR . " varName2" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine6 := "" . keyWordBOOL . " varName3" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine7 := "" . keyWordFLOAT . " varName4" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine8 := "" . keyWordINT8 . " varName5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine9 := "" . keyWordINT16 . " varName6" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine10 := "" . keyWordINT32 . " varName7" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine11 := "" . keyWordINT64 . " varName8" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine12 := "`n"
displayExampleTextLine13 := "" . keyWordComment . " Alternatively, you can define them like this:`n"
displayExampleTextLine14 := "" . keyWordINT . " varName9 " . keyWordVariablesAssignmentOperator . " 34" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine15 := "`n"
displayExampleTextLine16 := "" . keyWordComment . " Here is how to define a function with static types if you convert to C++.`n"
displayExampleTextLine17 := "" . keyWordComment . " However, it will still work even if you are not converting to C++; types will be stripped away.`n"
displayExampleTextLine18 := keyWordFunc . " void funcName1(" . keyWordINT . " paramVar1, " . keyWordSTR . " paramVar2 " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "" . Chr(34) . ", " . keyWordBOOL . " paramVar3 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . ", " . keyWordFLOAT . " paramVar4 " . keyWordVariablesAssignmentOperator . " 1.5)" . defineCodeBlockChar . "`n" . A_Tab . keyWordComment . " This is how the global keyword works if we convert to Python.`n" . A_Tab . keyWordComment . " But even if we don't, it will just be removed, so you can add it if you want to convert to Python as well.`n" . A_Tab . "" . keyWordGlobal . " varName5" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine19 := A_Tab . "" . keyWordComment . " Here's how if, else if, " . keyWordAndOperator . " else statements will look:`n"
displayExampleTextLine20 := A_Tab . keyWordIF . " " . openParentheses . "varName1 " . keyWordEqualOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine21 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine23 := A_Tab . keyWordElseIf . " " . openParentheses . "varName1 " . keyWordNotEqualToOperator . " paramVar1 " . keyWordOrOperator  . " varName1 " . keyWordLessThanOrEqualToOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine24 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is less than or equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine26 := A_Tab . "" . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine27 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is NOT less than or equal to paramVar1 or something else" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine30 := "`n" . A_Tab . keyWordComment . " this is how the return keyword will look like in your lang`n" . A_Tab . "" . keyWordReturnStatement . "" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine31 := "" . keyWordMainLabel . " " . keyWordComment . " This is where the " . keyWordMainLabel . " function will start. It's just a label, so don't worry.`n"
displayExampleTextLine32 := "funcName1(varName9)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine33 := "`n"



}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine1 := "" . keyWordComment . " This is a preview of your language " . keyWordAndOperator . " how it will look.`n"
displayExampleTextLine2 := "`n"
displayExampleTextLine3 := "" . keyWordComment . " Here's how types will appear if you only define them:`n"
displayExampleTextLine4 := "" . keyWordINT . " varName1" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine5 := "" . keyWordSTR . " varName2" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine6 := "" . keyWordBOOL . " varName3" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine7 := "" . keyWordFLOAT . " varName4" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine8 := "" . keyWordINT8 . " varName5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine9 := "" . keyWordINT16 . " varName6" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine10 := "" . keyWordINT32 . " varName7" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine11 := "" . keyWordINT64 . " varName8" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine12 := "`n"
displayExampleTextLine13 := "" . keyWordComment . " Alternatively, you can define them like this:`n"
displayExampleTextLine14 := "" . keyWordINT . " varName9 " . keyWordVariablesAssignmentOperator . " 34" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine15 := "`n"
displayExampleTextLine16 := "" . keyWordComment . " Here is how to define a function with static types if you convert to C++.`n"
displayExampleTextLine17 := "" . keyWordComment . " However, it will still work even if you are not converting to C++; types will be stripped away.`n"
displayExampleTextLine18 := keyWordFunc . " void funcName1(" . keyWordINT . " paramVar1, " . keyWordSTR . " paramVar2 " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "" . Chr(34) . ", " . keyWordBOOL . " paramVar3 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . ", " . keyWordFLOAT . " paramVar4 " . keyWordVariablesAssignmentOperator . " 1.5)" . defineCodeBlockChar . "`n" . A_Tab . keyWordComment . " This is how the global keyword works if we convert to Python.`n" . A_Tab . keyWordComment . " But even if we don't, it will just be removed, so you can add it if you want to convert to Python as well.`n" . A_Tab . "" . keyWordGlobal . " varName5" . ifWeUsedAsemicolumON . "`n`n"
displayExampleTextLine19 := A_Tab . "" . keyWordComment . " Here's how if, else if, " . keyWordAndOperator . " else statements will look:`n"
displayExampleTextLine20 := A_Tab . keyWordIF . " " . openParentheses . "varName1 " . keyWordEqualOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine21 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine23 := A_Tab . keyWordElseIf . " " . openParentheses . "varName1 " . keyWordNotEqualToOperator . " paramVar1 " . keyWordOrOperator  . " varName1 " . keyWordLessThanOrEqualToOperator . " paramVar1" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine24 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is less than or equal to paramVar1" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine26 := A_Tab . "" . keyWordElse .  defineCodeBlockChar . "`n"
displayExampleTextLine27 := A_Tab . A_Tab . "print(" . Chr(34) . "varName1 is NOT less than or equal to paramVar1 or something else" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine28 := A_Tab . defineCodeBlockCharCLOSE . "`n" . A_Tab . keyWordComment . " this is how the return keyword will look like in your lang`n" . A_Tab . "" . keyWordReturnStatement . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine29 := defineCodeBlockCharCLOSE
displayExampleTextLine30 := "`n"
displayExampleTextLine31 := "" . keyWordMainLabel . " " . keyWordComment . " This is where the " . keyWordMainLabel . " function will start. It's just a label, so don't worry.`n"
displayExampleTextLine32 := "funcName1(varName9)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine33 := "`n"



}


if (forLoopLang = "py")
{
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := "} " . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(0, indexMax)" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := "} " . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(len(array))" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := "} " . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(0, indexMax)" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(len(array))" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(0, indexMax)" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(len(array))" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(0, indexMax)" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(len(array))" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(0, indexMax)" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParenthesesPY . "indexName in range(len(array))" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}


}
if (forLoopLang = "js")
{
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := "} " . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := "} " . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := "} " . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordJavaScriptLet . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}


}
if (forLoopLang = "cpp")
{
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := "} " . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := "} " . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "(); indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := "} " . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "(); indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "(); indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "(); indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine68 := "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine41 := "" . keyWordComment . " this is how a while loop works in your lang`n"
displayExampleTextLine42 := "" . keyWordBOOL . " var1 " . keyWordVariablesAssignmentOperator . " " . keyWordFalse . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine43 := keyWordWhileLoop . " " . openParentheses . "var1 " . keyWordEqualOperator . " " . keyWordFalse . "" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine44 := A_Tab . "print(" . Chr(34) . "we are inside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine45 := A_Tab . "var1 " . keyWordVariablesAssignmentOperator . " " . keyWordTrue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine46 := defineCodeBlockCharCLOSE
displayExampleTextLine47 := "print(" . Chr(34) . "we are outside the while loop" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine48 := "`n"
displayExampleTextLine49 := "" . keyWordComment . " this is how to use a for loop`n"
displayExampleTextLine50 := "`n"
displayExampleTextLine51 := "" . keyWordINT . " indexMax " . keyWordVariablesAssignmentOperator . " 5" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine52 := "" . keyWordComment . " this is how to use a for loop normal`n"
displayExampleTextLine53 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " indexMax; indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine54 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine55 := defineCodeBlockCharCLOSE
displayExampleTextLine56 := "`n"
displayExampleTextLine57 := "" . keyWordComment . " this is how to use a for loop whit arrays`n"
displayExampleTextLine58 := "arr " . keyWordSTR . " array" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine59 := "array" . keyWordArrayAppend . "(" . Chr(34) . "hello" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine60 := "array" . keyWordArrayAppend . "(" . Chr(34) . "how" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine61 := "array" . keyWordArrayAppend . "(" . Chr(34) . "are" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine62 := "array" . keyWordArrayAppend . "(" . Chr(34) . "you" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine63 := "array" . keyWordArrayAppend . "(" . Chr(34) . "doing" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine64 := keyWordForLoop . " " . openParentheses . "" . keyWordINT . " indexName " . keyWordVariablesAssignmentOperator . " 0; indexName " . keyWordLessThanOperator . " array" . keyWordArraySize . "(); indexName++" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine65 := A_Tab . "print(" . Chr(34) . "iteration: " . Chr(34) . " " . keyWordConcatenationOperator . " STR(indexName))" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine66 := A_Tab . "print(" . Chr(34) . "Item: " . Chr(34) . " " . keyWordConcatenationOperator . " array[indexName])" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine67 := defineCodeBlockCharCLOSE
displayExampleTextLine68 := "`n"
}


}


displayExampleTextLine71 := "print(" . Chr(34) . "this is how the escape char looks like " . Chr(92) . keyWordEscpaeChar . "nthis is a new line" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine72 := "" . keyWordCommentOpenMultiLine . "`n"
displayExampleTextLine73 := "this is a comment block`n"
displayExampleTextLine74 := "this is a comment block`n"
displayExampleTextLine75 := "" . keyWordCommentCloseMultiLine . "`n`n"









;79 81 87 90 92
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine77 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop`n"
displayExampleTextLine78 := keyWordLoop . " " . openParenthesesPY . "10" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine79 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " % 2 " . keyWordEqualOperator . " 0" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine80 := A_Tab . A_Tab . "" . keyWordContinue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine81 := A_Tab . "} " . "`n"
displayExampleTextLine82 := A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine83 := "} " . "`n"
displayExampleTextLine84 := "`n"
displayExampleTextLine85 := "" . keyWordComment . " this is how to use an AutoHotKey like infinite Loop`n"
displayExampleTextLine86 := keyWordLoopInfinite . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine87 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " " . keyWordEqualOperator . " 5" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine88 := A_Tab . A_Tab . "" . keyWordBreak . "" . ifWeUsedAsemicolumON . "`n"

displayExampleTextLine90 := A_Tab . "} " . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine91 := A_Tab . A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine92 := A_Tab . "} " . "`n"
displayExampleTextLine93 := "} " . "`n"
displayExampleTextLine94 := "`n"
displayExampleTextLine95 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop, parse`n"
displayExampleTextLine96 := "" . keyWordSTR . " someText " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "hello how are you doing" . Chr(92) . keyWordEscpaeChar . "ntoday we are good." . Chr(34) . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine97 := keyWordLoopParse . " " . openParenthesesPY . "someText, " . Chr(34) . " " . Chr(34) . ", " . Chr(92) . keyWordEscpaeChar . "n" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine98 := A_Tab . "print(" . keyWordALoopField . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine99 := "} " . "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine77 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop`n"
displayExampleTextLine78 := keyWordLoop . " " . openParenthesesPY . "10" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine79 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " % 2 " . keyWordEqualOperator . " 0" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine80 := A_Tab . A_Tab . "" . keyWordContinue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine82 := A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine84 := "`n"
displayExampleTextLine85 := "" . keyWordComment . " this is how to use an AutoHotKey like infinite Loop`n"
displayExampleTextLine86 := keyWordLoopInfinite . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine87 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " " . keyWordEqualOperator . " 5" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine88 := A_Tab . A_Tab . "" . keyWordBreak . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine90 := A_Tab . "" . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine91 := A_Tab . A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine94 := "`n"
displayExampleTextLine95 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop, parse`n"
displayExampleTextLine96 := "" . keyWordSTR . " someText " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "hello how are you doing" . Chr(92) . keyWordEscpaeChar . "ntoday we are good." . Chr(34) . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine97 := keyWordLoopParse . " " . openParenthesesPY . "someText, " . Chr(34) . " " . Chr(34) . ", " . Chr(92) . keyWordEscpaeChar . "n" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine98 := A_Tab . "print(" . keyWordALoopField . ")" . ifWeUsedAsemicolumON . "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine77 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop`n"
displayExampleTextLine78 := keyWordLoop . " " . openParenthesesPY . "10" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine79 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " % 2 " . keyWordEqualOperator . " 0" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine80 := A_Tab . A_Tab . "" . keyWordContinue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine81 := A_Tab . defineCodeBlockCharCLOSE
displayExampleTextLine82 := A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine83 := defineCodeBlockCharCLOSE
displayExampleTextLine84 := "`n"
displayExampleTextLine85 := "" . keyWordComment . " this is how to use an AutoHotKey like infinite Loop`n"
displayExampleTextLine86 := keyWordLoopInfinite . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine87 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " " . keyWordEqualOperator . " 5" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine88 := A_Tab . A_Tab . "" . keyWordBreak . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine90 := A_Tab . "" . keyWordElse .  defineCodeBlockChar . "`n"
displayExampleTextLine91 := A_Tab . A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine92 := A_Tab . defineCodeBlockCharCLOSE
displayExampleTextLine93 := defineCodeBlockCharCLOSE
displayExampleTextLine94 := "`n"
displayExampleTextLine95 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop, parse`n"
displayExampleTextLine96 := "" . keyWordSTR . " someText " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "hello how are you doing" . Chr(92) . keyWordEscpaeChar . "ntoday we are good." . Chr(34) . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine97 := keyWordLoopParse . " " . openParenthesesPY . "someText, " . Chr(34) . " " . Chr(34) . ", " . Chr(92) . keyWordEscpaeChar . "n" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine98 := A_Tab . "print(" . keyWordALoopField . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine99 := defineCodeBlockCharCLOSE
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine77 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop`n"
displayExampleTextLine78 := keyWordLoop . " " . openParenthesesPY . "10" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine79 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " % 2 " . keyWordEqualOperator . " 0" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine80 := A_Tab . A_Tab . "" . keyWordContinue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine82 := A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine84 := "`n"
displayExampleTextLine85 := "" . keyWordComment . " this is how to use an AutoHotKey like infinite Loop`n"
displayExampleTextLine86 := keyWordLoopInfinite . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine87 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " " . keyWordEqualOperator . " 5" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine88 := A_Tab . A_Tab . "" . keyWordBreak . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine90 := A_Tab . "" . keyWordElse . defineCodeBlockChar . "`n"
displayExampleTextLine91 := A_Tab . A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine94 := "`n"
displayExampleTextLine95 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop, parse`n"
displayExampleTextLine96 := "" . keyWordSTR . " someText " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "hello how are you doing" . Chr(92) . keyWordEscpaeChar . "ntoday we are good." . Chr(34) . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine97 := keyWordLoopParse . " " . openParenthesesPY . "someText, " . Chr(34) . " " . Chr(34) . ", " . Chr(92) . keyWordEscpaeChar . "n" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine98 := A_Tab . "print(" . keyWordALoopField . ")" . ifWeUsedAsemicolumON . "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine77 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop`n"
displayExampleTextLine78 := keyWordLoop . " " . openParenthesesPY . "10" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine79 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " % 2 " . keyWordEqualOperator . " 0" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine80 := A_Tab . A_Tab . "" . keyWordContinue . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine81 := A_Tab . defineCodeBlockCharCLOSE
displayExampleTextLine82 := A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine83 := defineCodeBlockCharCLOSE
displayExampleTextLine84 := "`n"
displayExampleTextLine85 := "" . keyWordComment . " this is how to use an AutoHotKey like infinite Loop`n"
displayExampleTextLine86 := keyWordLoopInfinite . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine87 := A_Tab . keyWordIF . " " . openParentheses . "" . keyWordAIndex . " " . keyWordEqualOperator . " 5" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine88 := A_Tab . A_Tab . "" . keyWordBreak . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine90 := A_Tab . "" . keyWordElse .  defineCodeBlockChar . "`n"
displayExampleTextLine91 := A_Tab . A_Tab . "print(" . keyWordAIndex . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine92 := A_Tab . defineCodeBlockCharCLOSE
displayExampleTextLine93 := defineCodeBlockCharCLOSE
displayExampleTextLine94 := "`n"
displayExampleTextLine95 := "" . keyWordComment . " this is how to use an AutoHotKey like Loop, parse`n"
displayExampleTextLine96 := "" . keyWordSTR . " someText " . keyWordVariablesAssignmentOperator . " " . Chr(34) . "hello how are you doing" . Chr(92) . keyWordEscpaeChar . "ntoday we are good." . Chr(34) . "" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine97 := keyWordLoopParse . " " . openParenthesesPY . "someText, " . Chr(34) . " " . Chr(34) . ", " . Chr(92) . keyWordEscpaeChar . "n" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine98 := A_Tab . "print(" . keyWordALoopField . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine99 := defineCodeBlockCharCLOSE
}




if (usePythonicColonSyntax = "off") && (useCurlyBraces = "on") && (useEnd = "off")
{
displayExampleTextLine101 := "`n"
displayExampleTextLine102 := "" . keyWordComment . " Error Handling`n"
displayExampleTextLine103 := keyWordTry . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine104 := A_Tab . keyWordThrow . " " . keyWordErrorMsg . "(" . Chr(34) . "Something went wrong!" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine106 := "} " . "`n"
displayExampleTextLine107 := keyWordCatch . " " . openParentheses . "e" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine108 := A_Tab . "print(e)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine109 := "} " . "`n"
displayExampleTextLine110 := keyWordFinally . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine111 := A_Tab . "print(" . Chr(34) . "Finally block executed" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine112 := "} " . "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine101 := "`n"
displayExampleTextLine102 := "" . keyWordComment . " Error Handling`n"
displayExampleTextLine103 := keyWordTry . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine104 := A_Tab . keyWordThrow . " " . keyWordErrorMsg . "(" . Chr(34) . "Something went wrong!" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine107 := keyWordCatch . " " . openParentheses . "e" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine108 := A_Tab . "print(e)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine110 := keyWordFinally . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine111 := A_Tab . "print(" . Chr(34) . "Finally block executed" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine101 := "`n"
displayExampleTextLine102 := "" . keyWordComment . " Error Handling`n"
displayExampleTextLine103 := keyWordTry . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine104 := A_Tab . keyWordThrow . " " . keyWordErrorMsg . "(" . Chr(34) . "Something went wrong!" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine107 := keyWordCatch . " " . openParentheses . "e" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine108 := A_Tab . "print(e)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine110 := keyWordFinally . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine111 := A_Tab . "print(" . Chr(34) . "Finally block executed" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine112 := defineCodeBlockCharCLOSE
}
if (usePythonicColonSyntax = "off") && (useCurlyBraces = "off") && (useEnd = "off")
{
displayExampleTextLine101 := "`n"
displayExampleTextLine102 := "" . keyWordComment . " Error Handling`n"
displayExampleTextLine103 := keyWordTry . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine104 := A_Tab . keyWordThrow . " " . keyWordErrorMsg . "(" . Chr(34) . "Something went wrong!" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine107 := keyWordCatch . " " . openParentheses . "e" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine108 := A_Tab . "print(e)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine110 := keyWordFinally . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine111 := A_Tab . "print(" . Chr(34) . "Finally block executed" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
}
if (usePythonicColonSyntax = "on") && (useCurlyBraces = "off") && (useEnd = "on")
{
displayExampleTextLine101 := "`n"
displayExampleTextLine102 := "" . keyWordComment . " Error Handling`n"
displayExampleTextLine103 := keyWordTry . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine104 := A_Tab . keyWordThrow . " " . keyWordErrorMsg . "(" . Chr(34) . "Something went wrong!" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine107 := keyWordCatch . " " . openParentheses . "e" . closeParentheses . defineCodeBlockChar . "`n"
displayExampleTextLine108 := A_Tab . "print(e)" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine110 := keyWordFinally . "" . openParenthesesPY . "" . closeParenthesesPY . defineCodeBlockChar . "`n"
displayExampleTextLine111 := A_Tab . "print(" . Chr(34) . "Finally block executed" . Chr(34) . ")" . ifWeUsedAsemicolumON . "`n"
displayExampleTextLine112 := defineCodeBlockCharCLOSE
}



displayExampleText := ""
Loop, 120
{
displayExampleText .= displayExampleTextLine%A_Index%
}



Loop, Parse, instructions, `n, `r
{

ALoopField := addBackShlashes(A_LoopField)
if (A_Index = 1)
{
langToTranspileTo := Trim(ALoopField)
}
if (A_Index = 2)
{
fileExtention := Trim(ALoopField)
}
if (A_Index = 3)
{
keyWordsCommands := Trim(ALoopField)
}

if (A_Index = 4)
{
keyWordINT := Trim(ALoopField)
}
if (A_Index = 5)
{
keyWordSTR := Trim(ALoopField)
}
if (A_Index = 6)
{
keyWordBOOL := Trim(ALoopField)
}
if (A_Index = 7)
{
keyWordFLOAT := Trim(ALoopField)
}
if (A_Index = 8)
{
keyWordINT8 := Trim(ALoopField)
}
if (A_Index = 9)
{
keyWordINT16 := Trim(ALoopField)
}
if (A_Index = 10)
{
keyWordINT32 := Trim(ALoopField)
}
if (A_Index = 11)
{
keyWordINT64 := Trim(ALoopField)
}
if (A_Index = 12)
{
keyWordIF := Trim(ALoopField)
}
if (A_Index = 13)
{
keyWordElseIf := Trim(ALoopField)
}
if (A_Index = 14)
{
keyWordElse := Trim(ALoopField)
}
if (A_Index = 15)
{
keyWordWhileLoop := Trim(ALoopField)
}
if (A_Index = 16)
{
keyWordForLoop := Trim(ALoopField)
}
if (A_Index = 17)
{
keyWordLoopInfinite := Trim(ALoopField)
}
if (A_Index = 18)
{
keyWordLoop := Trim(ALoopField)
}
if (A_Index = 19)
{
keyWordLoopParse := Trim(ALoopField)
}
if (A_Index = 20)
{
keyWordContinue := Trim(ALoopField)
}
if (A_Index = 21)
{
keyWordBreak := Trim(ALoopField)
}
if (A_Index = 22)
{
keyWordFunc := Trim(ALoopField)
}
if (A_Index = 23)
{
keyWordAwait := Trim(ALoopField)
}
if (A_Index = 24)
{
keyWordVariablesAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 25)
{
keyWordConcatenationAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 26)
{
keyWordAdditionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 27)
{
keyWordSubtractionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 28)
{
keyWordMultiplicationAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 29)
{
keyWordDivisionAssignmentOperator := Trim(ALoopField)
}
if (A_Index = 30)
{
keyWordAdditionOperator := Trim(ALoopField)
}
if (A_Index = 31)
{
keyWordConcatenationOperator := Trim(ALoopField)
}
if (A_Index = 32)
{
keyWordEqualOperator := Trim(ALoopField)
}
if (A_Index = 33)
{
keyWordNotOperator := Trim(ALoopField)
}
if (A_Index = 34)
{
keyWordGreaterThanOperator := Trim(ALoopField)
}
if (A_Index = 35)
{
keyWordLessThanOperator := Trim(ALoopField)
}
if (A_Index = 36)
{
keyWordGreaterThanOrEqualToOperator := Trim(ALoopField)
}
if (A_Index = 37)
{
keyWordLessThanOrEqualToOperator := Trim(ALoopField)
}
if (A_Index = 38)
{
keyWordOrOperator := Trim(ALoopField)
}
if (A_Index = 39)
{
keyWordAndOperator := Trim(ALoopField)
}
if (A_Index = 40)
{
keyWordNotEqualToOperator := Trim(ALoopField)
}
if (A_Index = 41)
{
keyWordTrue := Trim(ALoopField)
}
if (A_Index = 42)
{
keyWordFalse := Trim(ALoopField)
}
if (A_Index = 43)
{
keyWordSwitch := Trim(ALoopField)
}
if (A_Index = 44)
{
keyWordSwitchCase := Trim(ALoopField)
}
if (A_Index = 45)
{
keyWordSwitchDefault := Trim(ALoopField)
}
if (A_Index = 46)
{
keyWordThrow := Trim(ALoopField)
}
if (A_Index = 47)
{
keyWordErrorMsg := Trim(ALoopField)
}
if (A_Index = 48)
{
keyWordTry := Trim(ALoopField)
}
if (A_Index = 49)
{
keyWordCatch := Trim(ALoopField)
}
if (A_Index = 50)
{
keyWordFinally := Trim(ALoopField)
}
if (A_Index = 51)
{
keyWordArrayAppend := Trim(ALoopField)
}
if (A_Index = 52)
{
keyWordArrayPop := Trim(ALoopField)
}
if (A_Index = 53)
{
keyWordArraySize := Trim(ALoopField)
}
if (A_Index = 54)
{
keyWordArrayInsert := Trim(ALoopField)
}
if (A_Index = 55)
{
keyWordArrayRemove := Trim(ALoopField)
}
if (A_Index = 56)
{
keyWordArrayIndexOf := Trim(ALoopField)
}
if (A_Index = 57)
{
keyWordArrayDefinition := Trim(ALoopField)
}
if (A_Index = 58)
{
keyWordArrayOfIntegersDefinition := Trim(ALoopField)
}
if (A_Index = 59)
{
keyWordArrayOfStringsDefinition := Trim(ALoopField)
}
if (A_Index = 60)
{
keyWordArrayOfFloatingPointNumbersDefinition := Trim(ALoopField)
}
if (A_Index = 61)
{
keyWordArrayOfBooleansDefinition := Trim(ALoopField)
}
if (A_Index = 62)
{
keyWordJavaScriptVar := Trim(ALoopField)
}
if (A_Index = 63)
{
keyWordJavaScriptLet := Trim(ALoopField)
}
if (A_Index = 64)
{
keyWordJavaScriptConst := Trim(ALoopField)
}
if (A_Index = 65)
{
keyWordReturnStatement := Trim(ALoopField)
}
if (A_Index = 66)
{
keyWordEnd := Trim(ALoopField)
}
if (A_Index = 67)
{
keyWordGlobal := Trim(ALoopField)
}
if (A_Index = 68)
{
keyWordComment := Trim(ALoopField)
}
if (A_Index = 69)
{
keyWordCommentOpenMultiLine := Trim(ALoopField)
}
if (A_Index = 70)
{
keyWordCommentCloseMultiLine := Trim(ALoopField)
}
if (A_Index = 71)
{
keyWordEscpaeChar := Trim(ALoopField)
}
if (A_Index = 72)
{
AHKlikeLoopsIndexedAt := Trim(ALoopField)
}
if (A_Index = 73)
{
keyWordAIndex := Trim(ALoopField)
}
if (A_Index = 74)
{
keyWordALoopField := Trim(ALoopField)
}
if (A_Index = 75)
{
keyWordMainLabel := Trim(ALoopField)
}
if (A_Index = 76)
{
useFuncKeyWord := Trim(ALoopField)
}
if (A_Index = 77)
{
useCurlyBraces := Trim(ALoopField)
}
if (A_Index = 78)
{
useEnd := Trim(ALoopField)
}
if (A_Index = 79)
{
useSemicolon := Trim(ALoopField)
}
if (A_Index = 80)
{
useParentheses := Trim(ALoopField)
}
if (A_Index = 81)
{
usePythonicColonSyntax := Trim(ALoopField)
}
if (A_Index = 82)
{
forLoopLang := Trim(ALoopField)
}
if (A_Index = 83)
{
useInJavaScriptAlwaysUseVar := Trim(ALoopField)
}
if (A_Index = 84)
{
useJavaScriptInAfullHTMLfile := Trim(ALoopField)
}
if (A_Index = 85)
{
useJavaScriptAmainFuncDef := Trim(ALoopField)
}

}




areWeInAFuncFromInstructions := 0
areWeInAFuncFromInstructionsLineNum := 0

funcLangHolder := ""
funcNameHolder := ""
funcLibsHolder := ""
funcFuncHolder := ""
funcDescriptionHolder := ""

allFuncLangNum := 0
allFuncNamesNum := 0
allFuncLibsNum := 0
allFuncsNum := 0
allfuncDescriptionNum := 0


correctLang := 0
Loop, Parse, instructions, `n, `r
{
if (Trim(A_LoopField) = "funcEND======================funcEND==============")
{
areWeInAFuncFromInstructions := 0
areWeInAFuncFromInstructionsLineNum := 0
if (correctLang = 1) && (InStr(code, Trim(funcNameHolder)))
{
;MsgBox, % funcFuncHolder
allFuncsNum++
allFuncs%allFuncsNum% := funcFuncHolder
}
correctLang := 0
funcFuncHolder := ""
}

if (areWeInAFuncFromInstructions = 1)
{

if (areWeInAFuncFromInstructionsLineNum = 1)
{
; name of the func
StringTrimLeft, funcLangHolder, A_LoopField, 5
if (Trim(funcLangHolder) = langToTranspileTo)
{

correctLang := 1
}
}
if (areWeInAFuncFromInstructionsLineNum = 2)
{
; name of the func
StringTrimLeft, funcNameHolder, A_LoopField, 5
allFuncNamesNum++
allFuncNames%allFuncNamesNum% := Trim(funcNameHolder)
}
if (areWeInAFuncFromInstructionsLineNum = 3)
{
; all libs
StringTrimLeft, funcLibsHolder, A_LoopField, 5
if (correctLang = 1) && (InStr(code, Trim(funcNameHolder)))
{
gg := 5
}
}
if (areWeInAFuncFromInstructionsLineNum = 4)
{
; func description
StringTrimLeft, funcDescriptionHolder, A_LoopField, 12
if (correctLang = 1) && (InStr(code, Trim(funcNameHolder)))
{
gg := 5
}
}
if (areWeInAFuncFromInstructionsLineNum >= 5)
{
; the full func
if (correctLang = 1) && (InStr(code, Trim(funcNameHolder)))
{
funcFuncHolder .= A_LoopField . "`n"
}
}

;MsgBox, % A_LoopField

areWeInAFuncFromInstructionsLineNum++
}


if (Trim(A_LoopField) = "func======================func==============")
{
areWeInAFuncFromInstructions := 1
areWeInAFuncFromInstructionsLineNum := 1
correctLang := 0
}



}

;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncNames
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncLibs
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncLang
;~ MsgBox, ===========================================================================
;~ msgbox, % allFuncs
;~ MsgBox, ===========================================================================



upCode := Chr(60) . Chr(33) . Chr(100) . Chr(111) . Chr(99) . Chr(116) . Chr(121) . Chr(112) . Chr(101) . Chr(32) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(62) . Chr(10) . Chr(60) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(32) . Chr(108) . Chr(97) . Chr(110) . Chr(103) . Chr(61) . Chr(34) . Chr(101) . Chr(110) . Chr(34) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(60) . Chr(104) . Chr(101) . Chr(97) . Chr(100) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(109) . Chr(101) . Chr(116) . Chr(97) . Chr(32) . Chr(99) . Chr(104) . Chr(97) . Chr(114) . Chr(115) . Chr(101) . Chr(116) . Chr(61) . Chr(34) . Chr(85) . Chr(84) . Chr(70) . Chr(45) . Chr(56) . Chr(34) . Chr(32) . Chr(47) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(109) . Chr(101) . Chr(116) . Chr(97) . Chr(32) . Chr(110) . Chr(97) . Chr(109) . Chr(101) . Chr(61) . Chr(34) . Chr(118) . Chr(105) . Chr(101) . Chr(119) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(34) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(61) . Chr(34) . Chr(119) . Chr(105) . Chr(100) . Chr(116) . Chr(104) . Chr(61) . Chr(100) . Chr(101) . Chr(118) . Chr(105) . Chr(99) . Chr(101) . Chr(45) . Chr(119) . Chr(105) . Chr(100) . Chr(116) . Chr(104) . Chr(44) . Chr(32) . Chr(105) . Chr(110) . Chr(105) . Chr(116) . Chr(105) . Chr(97) . Chr(108) . Chr(45) . Chr(115) . Chr(99) . Chr(97) . Chr(108) . Chr(101) . Chr(61) . Chr(49) . Chr(46) . Chr(48) . Chr(34) . Chr(32) . Chr(47) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(116) . Chr(105) . Chr(116) . Chr(108) . Chr(101) . Chr(62) . Chr(72) . Chr(84) . Chr(86) . Chr(77) . Chr(32) . Chr(73) . Chr(68) . Chr(69) . Chr(60) . Chr(47) . Chr(116) . Chr(105) . Chr(116) . Chr(108) . Chr(101) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(115) . Chr(116) . Chr(121) . Chr(108) . Chr(101) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(32) . Chr(123) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(98) . Chr(97) . Chr(99) . Chr(107) . Chr(103) . Chr(114) . Chr(111) . Chr(117) . Chr(110) . Chr(100) . Chr(45) . Chr(99) . Chr(111) . Chr(108) . Chr(111) . Chr(114) . Chr(58) . Chr(32) . Chr(35) . Chr(50) . Chr(48) . Chr(50) . Chr(48) . Chr(50) . Chr(48) . Chr(59) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(102) . Chr(111) . Chr(110) . Chr(116) . Chr(45) . Chr(102) . Chr(97) . Chr(109) . Chr(105) . Chr(108) . Chr(121) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(34) . Chr(79) . Chr(112) . Chr(101) . Chr(110) . Chr(32) . Chr(83) . Chr(97) . Chr(110) . Chr(115) . Chr(34) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(45) . Chr(97) . Chr(112) . Chr(112) . Chr(108) . Chr(101) . Chr(45) . Chr(115) . Chr(121) . Chr(115) . Chr(116) . Chr(101) . Chr(109) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(66) . Chr(108) . Chr(105) . Chr(110) . Chr(107) . Chr(77) . Chr(97) . Chr(99) . Chr(83) . Chr(121) . Chr(115) . Chr(116) . Chr(101) . Chr(109) . Chr(70) . Chr(111) . Chr(110) . Chr(116) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(34) . Chr(83) . Chr(101) . Chr(103) . Chr(111) . Chr(101) . Chr(32) . Chr(85) . Chr(73) . Chr(34) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(82) . Chr(111) . Chr(98) . Chr(111) . Chr(116) . Chr(111) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(79) . Chr(120) . Chr(121) . Chr(103) . Chr(101) . Chr(110) . Chr(45) . Chr(83) . Chr(97) . Chr(110) . Chr(115) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(85) . Chr(98) . Chr(117) . Chr(110) . Chr(116) . Chr(117) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(67) . Chr(97) . Chr(110) . Chr(116) . Chr(97) . Chr(114) . Chr(101) . Chr(108) . Chr(108) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(34) . Chr(72) . Chr(101) . Chr(108) . Chr(118) . Chr(101) . Chr(116) . Chr(105) . Chr(99) . Chr(97) . Chr(32) . Chr(78) . Chr(101) . Chr(117) . Chr(101) . Chr(34) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(72) . Chr(101) . Chr(108) . Chr(118) . Chr(101) . Chr(116) . Chr(105) . Chr(99) . Chr(97) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(65) . Chr(114) . Chr(105) . Chr(97) . Chr(108) . Chr(44) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(115) . Chr(97) . Chr(110) . Chr(115) . Chr(45) . Chr(115) . Chr(101) . Chr(114) . Chr(105) . Chr(102) . Chr(59) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(125) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(47) . Chr(115) . Chr(116) . Chr(121) . Chr(108) . Chr(101) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(100) . Chr(110) . Chr(46) . Chr(106) . Chr(115) . Chr(100) . Chr(101) . Chr(108) . Chr(105) . Chr(118) . Chr(114) . Chr(46) . Chr(110) . Chr(101) . Chr(116) . Chr(47) . Chr(110) . Chr(112) . Chr(109) . Chr(47) . Chr(115) . Chr(119) . Chr(101) . Chr(101) . Chr(116) . Chr(97) . Chr(108) . Chr(101) . Chr(114) . Chr(116) . Chr(50) . Chr(64) . Chr(49) . Chr(49) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(10) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(33) . Chr(45) . Chr(45) . Chr(32) . Chr(73) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(65) . Chr(99) . Chr(101) . Chr(32) . Chr(69) . Chr(100) . Chr(105) . Chr(116) . Chr(111) . Chr(114) . Chr(32) . Chr(67) . Chr(68) . Chr(78) . Chr(32) . Chr(45) . Chr(45) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(100) . Chr(110) . Chr(106) . Chr(115) . Chr(46) . Chr(99) . Chr(108) . Chr(111) . Chr(117) . Chr(100) . Chr(102) . Chr(108) . Chr(97) . Chr(114) . Chr(101) . Chr(46) . Chr(99) . Chr(111) . Chr(109) . Chr(47) . Chr(97) . Chr(106) . Chr(97) . Chr(120) . Chr(47) . Chr(108) . Chr(105) . Chr(98) . Chr(115) . Chr(47) . Chr(97) . Chr(99) . Chr(101) . Chr(47) . Chr(49) . Chr(46) . Chr(51) . Chr(50) . Chr(46) . Chr(50) . Chr(47) . Chr(97) . Chr(99) . Chr(101) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(32) . Chr(105) . Chr(110) . Chr(116) . Chr(101) . Chr(103) . Chr(114) . Chr(105) . Chr(116) . Chr(121) . Chr(61) . Chr(34) . Chr(115) . Chr(104) . Chr(97) . Chr(53) . Chr(49) . Chr(50) . Chr(45) . Chr(74) . Chr(76) . Chr(73) . Chr(82) . Chr(108) . Chr(120) . Chr(87) . Chr(104) . Chr(57) . Chr(54) . Chr(115) . Chr(78) . Chr(68) . Chr(51) . Chr(117) . Chr(85) . Chr(103) . Chr(73) . Chr(50) . Chr(82) . Chr(86) . Chr(72) . Chr(90) . Chr(74) . Chr(112) . Chr(103) . Chr(107) . Chr(87) . Chr(72) . Chr(103) . Chr(51) . Chr(43) . Chr(120) . Chr(111) . Chr(85) . Chr(89) . Chr(56) . Chr(88) . Chr(107) . Chr(103) . Chr(84) . Chr(80) . Chr(75) . Chr(112) . Chr(113) . Chr(82) . Chr(97) . Chr(113) . Chr(100) . Chr(107) . Chr(55) . Chr(122) . Chr(68) . Chr(47) . Chr(99) . Chr(107) . Chr(47) . Chr(88) . Chr(72) . Chr(88) . Chr(70) . Chr(83) . Chr(77) . Chr(87) . Chr(56) . Chr(52) . Chr(111) . Chr(54) . Chr(71) . Chr(114) . Chr(80) . Chr(54) . Chr(55) . Chr(100) . Chr(108) . Chr(113) . Chr(78) . Chr(51) . Chr(98) . Chr(57) . Chr(56) . Chr(78) . Chr(66) . Chr(47) . Chr(121) . Chr(65) . Chr(61) . Chr(61) . Chr(34) . Chr(32) . Chr(99) . Chr(114) . Chr(111) . Chr(115) . Chr(115) . Chr(111) . Chr(114) . Chr(105) . Chr(103) . Chr(105) . Chr(110) . Chr(61) . Chr(34) . Chr(97) . Chr(110) . Chr(111) . Chr(110) . Chr(121) . Chr(109) . Chr(111) . Chr(117) . Chr(115) . Chr(34) . Chr(32) . Chr(114) . Chr(101) . Chr(102) . Chr(101) . Chr(114) . Chr(114) . Chr(101) . Chr(114) . Chr(112) . Chr(111) . Chr(108) . Chr(105) . Chr(99) . Chr(121) . Chr(61) . Chr(34) . Chr(110) . Chr(111) . Chr(45) . Chr(114) . Chr(101) . Chr(102) . Chr(101) . Chr(114) . Chr(114) . Chr(101) . Chr(114) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . Chr(104) . Chr(116) . Chr(116) . Chr(112) . Chr(115) . Chr(58) . Chr(47) . Chr(47) . Chr(99) . Chr(100) . Chr(110) . Chr(106) . Chr(115) . Chr(46) . Chr(99) . Chr(108) . Chr(111) . Chr(117) . Chr(100) . Chr(102) . Chr(108) . Chr(97) . Chr(114) . Chr(101) . Chr(46) . Chr(99) . Chr(111) . Chr(109) . Chr(47) . Chr(97) . Chr(106) . Chr(97) . Chr(120) . Chr(47) . Chr(108) . Chr(105) . Chr(98) . Chr(115) . Chr(47) . Chr(97) . Chr(99) . Chr(101) . Chr(47) . Chr(49) . Chr(46) . Chr(52) . Chr(46) . Chr(49) . Chr(50) . Chr(47) . Chr(101) . Chr(120) . Chr(116) . Chr(45) . Chr(108) . Chr(97) . Chr(110) . Chr(103) . Chr(117) . Chr(97) . Chr(103) . Chr(101) . Chr(95) . Chr(116) . Chr(111) . Chr(111) . Chr(108) . Chr(115) . Chr(46) . Chr(106) . Chr(115) . Chr(34) . Chr(32) . Chr(99) . Chr(114) . Chr(111) . Chr(115) . Chr(115) . Chr(111) . Chr(114) . Chr(105) . Chr(103) . Chr(105) . Chr(110) . Chr(61) . Chr(34) . Chr(97) . Chr(110) . Chr(111) . Chr(110) . Chr(121) . Chr(109) . Chr(111) . Chr(117) . Chr(115) . Chr(34) . Chr(32) . Chr(114) . Chr(101) . Chr(102) . Chr(101) . Chr(114) . Chr(114) . Chr(101) . Chr(114) . Chr(112) . Chr(111) . Chr(108) . Chr(105) . Chr(99) . Chr(121) . Chr(61) . Chr(34) . Chr(110) . Chr(111) . Chr(45) . Chr(114) . Chr(101) . Chr(102) . Chr(101) . Chr(114) . Chr(114) . Chr(101) . Chr(114) . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(60) . Chr(47) . Chr(104) . Chr(101) . Chr(97) . Chr(100) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(60) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n      // JavaScript equivalent code with variables`n`n      function changeFaviconAtTheBeginning(faviconUrl) {`n        // Create a new favicon link element`n        const newFavicon = document.createElement(" . Chr(34) . "link" . Chr(34) . ");`n        newFavicon.rel = " . Chr(34) . "icon" . Chr(34) . ";`n        newFavicon.href = faviconUrl;`n`n        // Get the current favicon element (if exists)`n        const existingFavicon = document.querySelector('link[rel=" . Chr(34) . "icon" . Chr(34) . "]');`n`n        // Replace the current favicon with the new one`n        if (existingFavicon) {`n          // If a favicon exists, replace it`n          document.head.removeChild(existingFavicon); // Remove the existing favicon`n        }`n`n        // Append the new favicon to the head`n        document.head.appendChild(newFavicon);`n      }`n`n      // Call the function with the desired favicon URL`n      changeFaviconAtTheBeginning(" . Chr(34) . "https://i.ibb.co/Jpty1B8/305182938-1a0efe63-726e-49ca-a13c-d0ed627f2ea7.png" . Chr(34) . ");`n`n      function showCustomMessageBox(options, title, text, value, timeout) {`n        return new Promise((resolve) => {`n          // Define default options for the message box`n          let defaultOptions = {`n            title: title || " . Chr(34) . "" . Chr(34) . ", // Default title is empty`n            text: text || " . Chr(34) . "Press OK to continue." . Chr(34) . ", // Default text if not provided`n            showCancelButton: false, // Default is to not show Cancel button`n            showDenyButton: false, // Default is to not show Deny button`n            confirmButtonText: " . Chr(34) . "OK" . Chr(34) . ", // Default text for OK button`n            focusConfirm: true, // Default focus on OK button`n          };`n`n          let numOriginal = value;`n`n          let num = numOriginal;`n`n          let done1 = 0;`n`n          let done2 = 0;`n`n          let done3 = 0;`n`n          let AIndex = 0;`n`n          for (AIndex = 1; AIndex <= 1; AIndex++) {`n            // this is about if you add always on top in a msgbox it will be removed in js cuz its kinda useless...`n            // becouse if you like adding always on top in ahk in js we dont realy do it so yeah`n            if (num >= 262144) {`n              num = num - 262144;`n              numOriginal = numOriginal - 262144;`n            }`n`n            if (num >= 256 && num < 500) {`n              num = num - 256;`n`n              done3 = 256;`n            }`n`n            if (num >= 512) {`n              num = num - 512;`n`n              done3 = 512;`n            }`n`n            if (num == 0) {`n              done1 = 0;`n`n              break;`n            }`n`n            if (num <= 6) {`n              done1 = num;`n`n              break;`n            }`n`n            if (num >= 64 && num < 64 * 2) {`n              done2 = 64;`n`n              if (num == 64) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 64;`n`n                break;`n              }`n            }`n`n            if (num >= 48 && num < 63) {`n              done2 = 48;`n`n              if (num == 48) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 48;`n`n                break;`n              }`n            }`n`n            if (num >= 32 && num < 47) {`n              done2 = 32;`n`n              if (num == 32) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 32;`n`n                break;`n              }`n            }`n`n            if (num >= 16 && num < 30) {`n              done2 = 16;`n`n              if (num == 16) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 16;`n`n                break;`n              }`n            }`n          }`n`n          let doneAdded = done1 + done2 + done3;`n`n          if (doneAdded !== numOriginal) {`n            // displayMessage(" . Chr(34) . "The calc was wrong!" . Chr(34) . ");`n          } else {`n            // displayMessage(" . Chr(34) . "num was: " . Chr(34) . " + numOriginal + " . Chr(34) . "" . Chr(92) . "ndone1: " . Chr(34) . " + done1 + " . Chr(34) . "" . Chr(92) . "ndone2: " . Chr(34) . " + done2 + " . Chr(34) . "" . Chr(92) . "ndone3: " . Chr(34) . " + done3);`n          }`n`n          // Parse the value to determine the options for the message box`n          if (done1 === 1) defaultOptions.showCancelButton = true; // OK/Cancel in ahk but here it will show Ok/Cancel wiat its same haha`n`n          // not gonna work if you can make it work i will appreciate`n          //   if (done1 === 2) {`n          //     defaultOptions.showCancelButton = true; // Abort/Retry/Ignore`n          //     defaultOptions.showDenyButton = true;`n          //   }`n          if (done1 === 3) {`n            defaultOptions.showCancelButton = true; // Yes/No/Cancel in ahk but here it will show Ok/No/Cancel`n            defaultOptions.showDenyButton = true;`n          }`n          if (done1 === 4) {`n            // defaultOptions.showCancelButton = true;`n            defaultOptions.showDenyButton = true; // Yes/No in ahk but here it will show Ok/No`n          }`n          if (done1 === 5) {`n            defaultOptions.showCancelButton = true; // Retry/Cancel in ahk but here it will show Ok/Cancel tip you can write in the Msgbox press ok to retry`n          }`n          // not gonna work if you can make it work i will appreciate`n          //   if (done1 === 6) {`n          //     defaultOptions.showCancelButton = true; // Cancel/Try Again/Continue`n          //     defaultOptions.showDenyButton = true;`n          //   }`n`n          if (done2 === 16) defaultOptions.icon = " . Chr(34) . "error" . Chr(34) . "; // Icon Hand (stop/error)`n          if (done2 === 32) defaultOptions.icon = " . Chr(34) . "question" . Chr(34) . "; // Icon Question`n          if (done2 === 48) defaultOptions.icon = " . Chr(34) . "warning" . Chr(34) . "; // Icon Exclamation`n          if (done2 === 64) defaultOptions.icon = " . Chr(34) . "info" . Chr(34) . "; // Icon Asterisk (info)`n`n          if (done3 === 256) defaultOptions.focusDeny = true; // Makes the 3rd button the default`n          if (done3 === 512) defaultOptions.focusCancel = true; // Makes the 2nd button the default`n`n          // Set timeout if provided`n          if (timeout) {`n            defaultOptions.timer = timeout * 1000; // Convert timeout to milliseconds`n          }`n`n          // Merge default options with provided options`n          Object.assign(defaultOptions, options);`n`n          // Display the message box with the constructed options`n          Swal.fire(defaultOptions).then((result) => {`n            if (result.isConfirmed) {`n              resolve(" . Chr(34) . "OK" . Chr(34) . ");`n            } else if (result.isDenied) {`n              resolve(" . Chr(34) . "No" . Chr(34) . ");`n            } else {`n              resolve(" . Chr(34) . "Cancel" . Chr(34) . ");`n            }`n          });`n        });`n      }`n`n      var lastKeyPressed = " . Chr(34) . "" . Chr(34) . ";`n`n      function trackLastKeyPressed() {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          lastKeyPressed = event.key;`n          // console.log(lastKeyPressed);`n        });`n      }`n`n      function getLastKeyPressed() {`n        return lastKeyPressed;`n      }`n`n      // Call the trackLastKeyPressed function to start tracking key presses`n      trackLastKeyPressed();`n`n      let lastInputTime = Date.now(); // Initialize with current timestamp`n      let startTimestamp = Date.now(); // Initialize with current timestamp`n`n      // Event listener to track user activity`n      function resetIdleTimer() {`n        lastInputTime = Date.now(); // Update last input time`n      }`n`n      document.addEventListener(" . Chr(34) . "mousemove" . Chr(34) . ", resetIdleTimer);`n      document.addEventListener(" . Chr(34) . "keypress" . Chr(34) . ", resetIdleTimer);`n`n      // Function to calculate time since last input event`n      function A_TimeIdle() {`n        return Date.now() - lastInputTime; // Calculate time difference`n      }`n`n      // Function to calculate tick count in milliseconds`n      function A_TickCount() {`n        return Date.now() - startTimestamp;`n      }`n`n      function GuiControl(action, id, param1, param2, param3, param4) {`n        const element = document.getElementById(id);`n        if (element) {`n          // Handle DOM elements`n          if (action === " . Chr(34) . "move" . Chr(34) . ") {`n            // Set position and size`n            element.style.left = param1 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.top = param2 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.width = param3 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.height = param4 + " . Chr(34) . "px" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "focus" . Chr(34) . " && (element instanceof HTMLInputElement || element instanceof HTMLElement)) {`n            // Focus on the element`n            element.focus();`n          } else if (action === " . Chr(34) . "text" . Chr(34) . ") {`n            // Set new text content`n            element.textContent = param1;`n          } else if (action === " . Chr(34) . "hide" . Chr(34) . ") {`n            // Hide the element`n            element.style.display = " . Chr(34) . "none" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "show" . Chr(34) . ") {`n            // Show the element`n            element.style.display = " . Chr(34) . "" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "enable" . Chr(34) . ") {`n            // Enable the element`n            element.disabled = false;`n          } else if (action === " . Chr(34) . "disable" . Chr(34) . ") {`n            // Disable the element`n            element.disabled = true;`n          } else if (action === " . Chr(34) . "font" . Chr(34) . ") {`n            // Set font size`n            element.style.fontSize = param1 + " . Chr(34) . "px" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "destroy" . Chr(34) . ") {`n            // Remove the element from the DOM`n            element.parentNode.removeChild(element);`n          } else if (action === " . Chr(34) . "color" . Chr(34) . ") {`n            // Set color`n            element.style.color = param1;`n          } else if (action === " . Chr(34) . "picture" . Chr(34) . ") {`n            // Change the image source`n            if (element instanceof HTMLImageElement) {`n              element.src = param1;`n            } else {`n              console.error(" . Chr(34) . "Element is not an <img> tag, cannot change picture." . Chr(34) . ");`n            }`n          } else if (action === " . Chr(34) . "textide" . Chr(34) . ") {`n            // Set value for Ace editor`n            var editor = ace.edit(id); // Access the Ace editor instance using its ID`n            if (editor && param1) {`n              editor.session.setValue(param1);`n            } else {`n              console.error(" . Chr(34) . "Element is not an Ace editor or parameter is missing." . Chr(34) . ");`n            }`n          }`n        } else {`n          // Handle canvas or non-existing element`n          if (action === " . Chr(34) . "move" . Chr(34) . ") {`n            // Update position and size of the rectangle`n            updateRectangle(id, param1, param2, param3, param4);`n            redrawCanvas(); // Redraw the canvas with updated rectangles`n          } else if (action === " . Chr(34) . "color" . Chr(34) . ") {`n            // Update color of the rectangle`n            updateRectangleColor(id, param1);`n            redrawCanvas(); // Redraw the canvas with updated rectangles`n          }`n        }`n      }`n`n      function BuildInVars(varName) {`n        switch (varName) {`n          case " . Chr(34) . "A_ScreenWidth" . Chr(34) . ":`n            // Return screen width`n            return window.innerWidth;`n          case " . Chr(34) . "A_LastKey" . Chr(34) . ":`n            // Return screen width`n            return getLastKeyPressed();`n          case " . Chr(34) . "A_ScreenHeight" . Chr(34) . ":`n            // Return screen height`n            return window.innerHeight;`n          case " . Chr(34) . "A_TimeIdle" . Chr(34) . ":`n            // Return time idle`n            return A_TimeIdle();`n          case " . Chr(34) . "A_TickCount" . Chr(34) . ":`n            // Return tick count in milliseconds`n            return A_TickCount();`n          case " . Chr(34) . "A_Now" . Chr(34) . ":`n            // Return current local timestamp`n            return new Date().toLocaleString();`n          case " . Chr(34) . "A_YYYY" . Chr(34) . ":`n            // Return current year`n            return new Date().getFullYear();`n          case " . Chr(34) . "A_MM" . Chr(34) . ":`n            // Return current month`n            return (new Date().getMonth() + 1).toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_DD" . Chr(34) . ":`n            // Return current day`n            return new Date().getDate().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_MMMM" . Chr(34) . ":`n            // Return full month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_MMM" . Chr(34) . ":`n            // Return short month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_DDDD" . Chr(34) . ":`n            // Return full day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_DDD" . Chr(34) . ":`n            // Return short day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_Hour" . Chr(34) . ":`n            // Return current hour`n            return new Date().getHours().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Min" . Chr(34) . ":`n            // Return current minute`n            return new Date().getMinutes().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Sec" . Chr(34) . ":`n            // Return current second`n            return new Date().getSeconds().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Space" . Chr(34) . ":`n            // Return space character`n            return " . Chr(34) . " " . Chr(34) . ";`n          case " . Chr(34) . "A_Tab" . Chr(34) . ":`n            // Return tab character`n            return " . Chr(34) . "" . Chr(92) . "t" . Chr(34) . ";`n`n          default:`n            // Handle unknown variable names`n            return null;`n        }`n      }`n`n      function Chr(number) {`n        // Check if the number is null`n        if (number === null) {`n          // Return an empty string`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n`n        // Check if the number is within the valid range`n        if (number >= 0 && number <= 0x10ffff) {`n          // Convert the number to a character using String.fromCharCode`n          return String.fromCharCode(number);`n        } else {`n          // Return an empty string for invalid numbers`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n      }`n`n      // Define the custom " . Chr(34) . "ht" . Chr(34) . " language for Ace Editor with AHK rules`n      ace.define(" . Chr(34) . "ace/mode/ht" . Chr(34) . ", [" . Chr(34) . "require" . Chr(34) . ", " . Chr(34) . "exports" . Chr(34) . ", " . Chr(34) . "module" . Chr(34) . ", " . Chr(34) . "ace/lib/oop" . Chr(34) . ", " . Chr(34) . "ace/mode/text" . Chr(34) . ", " . Chr(34) . "ace/mode/text_highlight_rules" . Chr(34) . "], function (require, exports, module) {`n        var oop = require(" . Chr(34) . "ace/lib/oop" . Chr(34) . ");`n        var TextMode = require(" . Chr(34) . "ace/mode/text" . Chr(34) . ").Mode;`n        var TextHighlightRules = require(" . Chr(34) . "ace/mode/text_highlight_rules" . Chr(34) . ").TextHighlightRules;`n`n        var HTHighlightRules = function () {`n          this.$rules = {`n            start: ["







keyWordsCommandsFolrmated := ""
Loop, Parse, keyWordsCommands, "|"
{
Loop, Parse, A_LoopField, `,
{
if (A_Index = 1)
{
keyWordsCommandsFolrmated .= A_LoopField . "|"
}
}
}
StringTrimRight, keyWordsCommandsFolrmated, keyWordsCommandsFolrmated, 1


keywords := keyWordIF . "|" . keyWordElseIf . "|" . keyWordElse . "|" . keyWordWhileLoop . "|" . keyWordForLoop . "|" . keyWordLoopInfinite . "|" . keyWordLoop . "|" . keyWordLoopParse . "|" . keyWordContinue . "|" . keyWordBreak . "|" . keyWordFunc . "|" . keyWordAwait . "|" . keyWordSwitch . "|" . keyWordSwitchCase . "|" . keyWordThrow . "|" . keyWordTry . "|" . keyWordCatch . "|" . keyWordFinally . "|" . keyWordJavaScriptVar . "|" . keyWordJavaScriptLet . "|" . keyWordJavaScriptConst . "|" . keyWordReturnStatement . "|" . keyWordEnd


functionsForHighlighting := ""



Loop, % allFuncNamesNum
{
functionsForHighlighting .= allFuncNames%A_Index% . "|"
}
functionsForHighlighting .= keyWordErrorMsg

keyWordArrayMethods := keyWordArrayAppend . "|" . keyWordArrayPop . "|" . keyWordArraySize . "|" . keyWordArrayInsert . "|" . keyWordArrayRemove . "|" . keyWordArrayIndexOf
keyWordArrayMethods := StrReplace(keyWordArrayMethods, ".", "")

keyWordTypes := ""



keyWordTypes := keyWordINT . "|" . keyWordSTR . "|" . "void" . "|" . keyWordBOOL . "|" . keyWordFLOAT . "|" . keyWordINT8 . "|" . keyWordINT16 . "|" . keyWordINT32 . "|" . keyWordINT64 . "|" . keyWordArrayDefinition . "|" . keyWordArrayOfIntegersDefinition . "|" . keyWordArrayOfStringsDefinition . "|" . keyWordArrayOfFloatingPointNumbersDefinition . "|" . keyWordArrayOfBooleansDefinition







autoCompleteUp := "["

autoCompleteALLTemp := keywords . "|" . keyWordsCommandsFolrmated . "|" . functionsForHighlighting . "|" . keyWordALoopField . "|" . keyWordAIndex . "|" . keyWordArrayMethods . "|" . keyWordTypes . "|" . keyWordGlobal


autoCompleteALL := ""


Loop, Parse, autoCompleteALLTemp, "|"
{
autoCompleteALL .= "{ name: " . Chr(34) . Trim(A_LoopField) . Chr(34) . " }, "
}
StringTrimRight, autoCompleteALL, autoCompleteALL, 2



autoCompleteDown := "]"
autoComplete := ""
autoComplete := autoCompleteUp . autoCompleteALL . autoCompleteDown
autoComplete := StrReplace(autoComplete, Chr(92), "")

if (modeRunHTML = 1)
{
makeIDEreadMeOnly := "editor.setReadOnly(true);"
}
else
{
makeIDEreadMeOnly := ""
}

if (modeRunHTML = 1)
{
modeRunHTMLuseLocalStorage := ""
}
else
{
modeRunHTMLuseLocalStorage := "localStorage.setItem(shaKey, variables.idetext)"
}

if (modeRunHTML = 1)
{
modeRunHTMLuseLocalStorage2 := "variables.idetext = variables.ideTEXT;"
}
else
{
modeRunHTMLuseLocalStorage2 := "variables.idetext = localStorage.getItem(shaKey) || variables.ideTEXT;"
}


downCode := " oop.inherits(HTHighlightRules, TextHighlightRules);`n`n        var HTMode = function () {`n          this.HighlightRules = HTHighlightRules;`n        };`n        oop.inherits(HTMode, TextMode);`n`n        exports.Mode = HTMode;`n      });`n`n      function AddIDE(parent, xPos, yPos, w, h, id, font = 18, langName = " . Chr(34) . "autohotkey" . Chr(34) . ", onChangeFunc, initialText = " . Chr(34) . "" . Chr(34) . ") {`n        var langTools = ace.require(" . Chr(34) . "ace/ext/language_tools" . Chr(34) . ");`n`n        let Completer = {`n          getCompletions: function (editor, session, pos, prefix, callback) {`n            if (prefix.startsWith(" . Chr(34) . "p" . Chr(34) . ")) {`n              // Continue executing if the prefix starts with " . Chr(34) . "p" . Chr(34) . "`n            } else {`n              // Return early if the prefix does not start with " . Chr(34) . "p" . Chr(34) . " and its length is not greater than 1`n              if (prefix.length <= 1) {`n                callback(null, []); // Return an empty array of completions`n                return;`n              }`n            }`n`n            let prefixLower = prefix.toLowerCase();`n            let filteredTables = hth.filter(function (table) {`n              return table.name.toLowerCase().startsWith(prefixLower);`n            });`n            // filteredTables.sort(function(a, b) {`n            //     return a.name.length - b.name.length;`n            // });`n            let limitedTables = filteredTables; //.slice(-10);`n`n            callback(`n              null,`n              limitedTables.map(function (table) {`n                return {`n                  caption: table.name,`n                  value: table.name,`n                };`n              }),`n            );`n          },`n        };`n        // Combined keywords for " . Chr(34) . "ht" . Chr(34) . " and AHK`n        let hth = " . autoComplete . ";`n`n        // Create a new div element for the editor`n        var editorDiv = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        editorDiv.id = id;`n        editorDiv.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        editorDiv.style.left = xPos + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.top = yPos + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.width = w + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.height = h + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.fontSize = font + " . Chr(34) . "px" . Chr(34) . ";`n`n        // Append the editor div to the parent`n        parent.appendChild(editorDiv);`n`n        // Create a new editor instance inside the div`n        var editor = ace.edit(id);`n        editor.setTheme(" . Chr(34) . "ace/theme/monokai" . Chr(34) . ");`n        editor.session.setMode(" . Chr(34) . "ace/mode/" . Chr(34) . " + " . Chr(34) . "ht" . Chr(34) . ");`n        // editor.setOptions({`n        //   enableBasicAutocompletion: true,`n        //   enableLiveAutocompletion: true,`n        //   behavioursEnabled: false, // Disable auto-pairing of characters`n        // });`n`n        editor.setOptions({`n          enableBasicAutocompletion: false,`n          enableSnippets: false,`n          enableLiveAutocompletion: true,`n          behavioursEnabled: false,`n          showPrintMargin: false,`n        });`n" . makeIDEreadMeOnly . "`n        langTools.setCompleters([]);`n        langTools.addCompleter(Completer);`n`n        // Set initial text if provided`n        if (initialText) {`n          editor.setValue(initialText, -1); // -1 to move cursor to the beginning`n        }`n`n        // Track Vim mode status`n        var isVimMode = false;`n`n        // Hotkey to toggle Vim mode on/off (Ctrl + Alt + Shift + V)`n        editor.commands.addCommand({`n          name: " . Chr(34) . "toggleVimMode" . Chr(34) . ",`n          bindKey: { win: " . Chr(34) . "Ctrl-Alt-Shift-V" . Chr(34) . ", mac: " . Chr(34) . "Command-Alt-Shift-V" . Chr(34) . " },`n          exec: function () {`n            if (isVimMode) {`n              editor.setKeyboardHandler(null); // Disable Vim (back to default)`n              isVimMode = false;`n              console.log(" . Chr(34) . "Vim mode disabled" . Chr(34) . ");`n            } else {`n              editor.setKeyboardHandler(" . Chr(34) . "ace/keyboard/vim" . Chr(34) . "); // Enable Vim`n              isVimMode = true;`n              console.log(" . Chr(34) . "Vim mode enabled" . Chr(34) . ");`n            }`n          },`n        });`n`n        // Apply CSS styles for the editor`n`n        var css = " . Chr(96) . "`n                      body {`n                        font-family: " . Chr(34) . "Segoe UI" . Chr(34) . ", Tahoma, Geneva, Verdana, sans-serif;`n                        background-color: #1a1818;`n                        color: #ffffff;`n                        display: flex;`n                        flex-direction: column;`n                        align-items: center;`n                        height: 100vh;`n                        margin: 0;`n                      }`n`n                      .controls {`n                        display: flex;`n                        justify-content: center;`n                        gap: 1rem;`n                        margin: 1rem;`n                        padding: 1rem;`n                      }`n`n                      button {`n                        padding: 0.7rem;`n                        font-size: 1.2em;`n                        cursor: pointer;`n                        background-color: #bababa;`n                        color: #000000;`n                        border: none;`n                        border-radius: 0.2rem;`n                        transition: background-color 0.3s;`n                      }`n`n                      button:hover {`n                        background-color: #27ae60;`n                      }`n`n                      #${id} {`n                        width: ${w}px;`n                        height: ${h}px;`n                        font-size: 1em;`n                        border-radius: 0.3rem;`n                      }`n`n                      #result {`n                        margin-top: 1rem;`n                        font-size: 1.2em;`n                        color: #999c9a;`n                        font-weight: bold;`n                        text-align: center;`n                      }`n`n                      .ace-monokai .ace_marker-layer .ace_active-line {`n                        background-color: #103010 !important;`n                      }`n`n                      .ace-monokai {`n                        background-color: #121212 !important;`n                        color: #f8f8f2;`n                      }`n`n                      .ace-monokai .ace_gutter {`n                        background: #204020 !important;`n                        color: #cbcdc3 !important;`n                      }`n`n                      .ace-monokai .ace_gutter-active-line {`n                        background-color: transparent !important;`n                      }`n`n                      .ace-monokai .ace_entity.ace_name.ace_tag,`n                      .ace-monokai .ace_keyword,`n                      .ace-monokai .ace_meta.ace_tag,`n                      .ace-monokai .ace_storage {`n                        color: #40a0e0 !important;`n                      }`n`n                      .ace-monokai .ace_entity.ace_name.ace_function,`n                      .ace-monokai .ace_entity.ace_other,`n                      .ace-monokai .ace_entity.ace_other.ace_attribute-name,`n                      .ace-monokai .ace_variable {`n                        color: #ff80df !important;`n                      }`n`n                      .ace-monokai .ace_comment {`n                        color: #40d080 !important;`n                        font-weight: line-through !important;`n                      }`n`n                      .ace-monokai .ace_commentOpen_Close {`n                        color: #40d080 !important;`n                        font-weight: line-through !important;`n                      }`n`n                      .ace-monokai .ace_variables {`n                        color: #ffffff !important;`n                      }`n`n                      .ace-monokai .ace_functions {`n                        color: #80dfff !important;`n                      }`n`n                    .ace-monokai .ace_keywords {`n                color: #8080e0 !important; /* Customize color as needed */`n                font-weight: bold !important;`n            }`n                      .ace-monokai .ace_braces_Open {`n                        color: #FFFFff !important;`n                      }`n`n                      .ace-monokai .ace_braces_Close {`n                        color: #FFFFff !important;`n                      }`n`n                      .ace-monokai .ace_arrayMethods {`n                        color: #FAB820 !important;`n                      }`n`n                      .ace-monokai .ace_BuildInFunc {`n                        color: #ff80df !important;`n                      }`n`n                      .ace-monokai .ace_command {`n                        color: #40a0e0 !important;`n                        font-weight: bold !important;`n                      }`n`n                      .ace-monokai .ace_static_types {`n                        color: #569cd6 !important;`n                        font-weight: bold !important;`n                      }`n`n                      .ace-monokai .ace_string {`n                        color: #ffa0a0 !important;`n                        font-weight: lighter !important;`n                      }`n`n                      .ace-monokai .ace_operators {`n                        color: #00ffff !important;`n                        font-weight: lighter !important;`n                      }`n`n`n                      .ace-monokai .ace_trueANDfalse {`n                        color: #00ffff !important;`n                        font-weight: lighter !important;`n                      }`n`n                      .ace-monokai .ace_escape-char {`n                        color: #ff8000 !important;`n                        font-weight: bold !important;`n                      }`n`n                      .ace-monokai .ace_punctuation,`n                      .ace-monokai .ace_punctuation.ace _tag {`n                        color: #ffa0a0 !important;`n                      }`n`n                      *::-webkit-scrollbar {`n                        width: 1em;`n                      }`n`n                      *::-webkit-scrollbar-track {`n                        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);`n                      }`n`n                      *::-webkit-scrollbar-thumb {`n                        background-color: darkgrey;`n                        outline: 1px solid slategrey;`n                      }`n                    " . Chr(96) . ";`n`n        var style = document.createElement(" . Chr(34) . "style" . Chr(34) . ");`n        style.type = " . Chr(34) . "text/css" . Chr(34) . ";`n        if (style.styleSheet) {`n          style.styleSheet.cssText = css;`n        } else {`n          style.appendChild(document.createTextNode(css));`n        }`n        document.head.appendChild(style);`n`n        // Bind change event listener to the editor`n        editor.getSession().on(" . Chr(34) . "change" . Chr(34) . ", function () {`n          var code = editor.getValue();`n          if (typeof onChangeFunc === " . Chr(34) . "function" . Chr(34) . ") {`n            onChangeFunc(code);`n          }`n        });`n      }`n`n      // Helper function to set the internal array's size as a string`n      function setInternalArraySize(element, size) {`n        if (typeof element === " . Chr(34) . "string" . Chr(34) . ") {`n          return size.toString();`n        }`n        return size;`n      }`n`n      // Convert string to int`n      function INT(str) {`n        return str;`n      }`n`n      // Convert various types to string`n      function STR(value) {`n        return value;`n      }`n`n      // Exponential`n      function Exp(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.exp(num);`n      }`n`n      // Base-10 logarithm`n      function Log(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.log10(num);`n      }`n`n      function Chr(number) {`n        // Check if the number is null`n        if (number === null) {`n          // Return an empty string`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n`n        // Check if the number is within the valid range`n        if (number >= 0 && number <= 0x10ffff) {`n          // Convert the number to a character using String.fromCharCode`n          return String.fromCharCode(number);`n        } else {`n          // Return an empty string for invalid numbers`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n      }`n`n      // InStr`n      function InStr(Haystack, Needle, CaseSensitive = true, StartingPos = 1, Occurrence = 1) {`n        if (Haystack === null || Needle === null) return false;`n`n        // Adjust starting position if less than 1`n        StartingPos = Math.max(StartingPos, 1);`n`n        // Case-sensitive search by default`n        if (!CaseSensitive) {`n          Haystack = Haystack.toLowerCase();`n          Needle = Needle.toLowerCase();`n        }`n`n        let pos = -1;`n        let count = 0;`n        for (let i = StartingPos - 1; i < Haystack.length; i++) {`n          if (Haystack.substring(i, i + Needle.length) === Needle) {`n            count++;`n            if (count === Occurrence) {`n              pos = i + 1;`n              break;`n            }`n          }`n        }`n`n        return pos > 0; // Return true if the substring is found, false otherwise`n      }`n`n      // RegExMatch`n      function RegExMatch(Haystack, NeedleRegEx, OutputVar, StartingPos) {`n        if (Haystack === null || NeedleRegEx === null) return null;`n`n        const regex = new RegExp(NeedleRegEx);`n        let match;`n`n        if (typeof Haystack === " . Chr(34) . "string" . Chr(34) . ") {`n          match = Haystack.match(regex);`n        }`n`n        if (match) {`n          if (OutputVar) {`n            OutputVar.push(match[0]);`n          }`n          return match.index + 1;`n        } else {`n          return 0;`n        }`n      }`n`n      // StrLen`n      function StrLen(str) {`n        if (typeof str !== " . Chr(34) . "string" . Chr(34) . ") {`n          console.error(" . Chr(34) . "Invalid input: expected a string but received:" . Chr(34) . ", str);`n          return 0; // Return 0 or handle as needed`n        }`n        return str.length;`n      }`n`n      function SubStr(str, startPos, length) {`n        // If str is null or undefined, return an empty string`n        if (str === null || str === undefined) {`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n`n        // If length is not provided or is blank, default to " . Chr(34) . "all characters" . Chr(34) . "`n        if (length === undefined || length === " . Chr(34) . "" . Chr(34) . ") {`n          length = str.length - startPos + 1;`n        }`n`n        // If startPos is less than 1, adjust it to start from the end of the string`n        if (startPos < 1) {`n          startPos = str.length + startPos;`n        }`n`n        // Extract the substring based on startPos and length`n        return str.substr(startPos - 1, length);`n      }`n`n      function Trim(inputString) {`n        // Check if inputString is null or undefined`n        if (inputString == null) {`n          return " . Chr(34) . "" . Chr(34) . "; // Return an empty string if inputString is null or undefined`n        }`n        return inputString.replace(/^" . Chr(92) . "s+|" . Chr(92) . "s+$/g, " . Chr(34) . "" . Chr(34) . "); // Removes leading and trailing whitespace`n      }`n`n      async function ParseInt(num) {`n        if (num === null) {`n          return null;`n        }`n`n        num = num.trim();`n        num++;`n        num--;`n`n        return num;`n      }`n`n      function StrReplace(originalString, find, replaceWith) {`n        // Check if originalString is a string`n        if (typeof originalString !== " . Chr(34) . "string" . Chr(34) . ") {`n          return originalString; // Return originalString as is`n        }`n`n        // Escape special characters in the 'find' string to be used literally`n        const escapedFind = find.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "$&" . Chr(34) . ");`n`n        // Use replace method to replace all occurrences of 'find' with 'replaceWith'`n        return originalString.replace(new RegExp(escapedFind, " . Chr(34) . "g" . Chr(34) . "), replaceWith);`n      }`n`n      // Custom Mod function`n      function Mod(dividend, divisor) {`n        return dividend % divisor;`n      }`n`n      // Function to trim specified number of characters from the left side of a string`n      function StringTrimLeft(input, numChars) {`n        if (typeof input === " . Chr(34) . "string" . Chr(34) . " && typeof numChars === " . Chr(34) . "number" . Chr(34) . " && numChars >= 0) {`n          return input.length > numChars ? input.substring(numChars) : " . Chr(34) . "" . Chr(34) . ";`n        } else {`n          console.error(" . Chr(34) . "Invalid input provided." . Chr(34) . ");`n          return input; // Return original input if trimming is not possible`n        }`n      }`n`n      // Function to trim specified number of characters from the right side of a string`n      function StringTrimRight(input, numChars) {`n        if (typeof input === " . Chr(34) . "string" . Chr(34) . " && typeof numChars === " . Chr(34) . "number" . Chr(34) . " && numChars >= 0) {`n          return input.length > numChars ? input.substring(0, input.length - numChars) : " . Chr(34) . "" . Chr(34) . ";`n        } else {`n          console.error(" . Chr(34) . "Invalid input provided." . Chr(34) . ");`n          return input; // Return original input if trimming is not possible`n        }`n      }`n`n      function StrLower(string) {`n        if (typeof string !== " . Chr(34) . "string" . Chr(34) . ") {`n          console.error(" . Chr(34) . "Invalid input: expected a string but received:" . Chr(34) . ", string);`n          return " . Chr(34) . "" . Chr(34) . "; // Return an empty string or handle as needed`n        }`n        return string.toLowerCase();`n      }`n`n      function StrSplit(inputStr, delimiter, num) {`n        // Check if inputStr is a valid string`n        if (typeof inputStr !== " . Chr(34) . "string" . Chr(34) . ") {`n          return " . Chr(34) . "" . Chr(34) . "; // Return empty string for invalid input`n        }`n`n        // Split the input string based on the delimiter`n        const parts = inputStr.split(delimiter);`n`n        // Return the part specified by the num parameter (1-based index)`n        if (num > 0 && num <= parts.length) {`n          return parts[num - 1]; // Return the specified part (0-based index)`n        } else {`n          return " . Chr(34) . "" . Chr(34) . "; // Return an empty string if num is out of range`n        }`n      }`n`n      // Function to simulate AutoHotkey's RegExReplace in JavaScript`n      function RegExReplace(inputStr, regexPattern, replacement) {`n        // Create a regular expression object using the provided pattern`n        const regex = new RegExp(regexPattern, " . Chr(34) . "g" . Chr(34) . "); // 'g' flag for global match`n`n        // Use the replace() method to perform the regex replacement`n        const resultStr = inputStr.replace(regex, replacement);`n`n        // Return the modified string`n        return resultStr;`n      }`n`n      // Function to escape special characters for regex`n      function escapeRegex(str) {`n        if (typeof str !== " . Chr(34) . "string" . Chr(34) . ") {`n          console.error(" . Chr(34) . "Invalid input for escapeRegex: expected a string but received:" . Chr(34) . ", str);`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n        return str.replace(/[-[" . Chr(92) . "]{}()*+?.," . Chr(92) . "" . Chr(92) . "^$|#" . Chr(92) . "s]/g, " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "$&" . Chr(34) . ");`n      }`n`n      // Function to split a string based on delimiters`n      function LoopParseFunc(var_, delimiter1 = " . Chr(34) . "" . Chr(34) . ", delimiter2 = " . Chr(34) . "" . Chr(34) . ") {`n        if (typeof var_ !== " . Chr(34) . "string" . Chr(34) . ") {`n          console.error(" . Chr(34) . "Invalid input: expected a string but received:" . Chr(34) . ", var_);`n          return []; // Return an empty array or handle as needed`n        }`n`n        if (!delimiter1 && !delimiter2) {`n          return var_.split(" . Chr(34) . "" . Chr(34) . ");`n        } else {`n          const escapedDelimiters = escapeRegex(delimiter1 + delimiter2);`n          const pattern = new RegExp(" . Chr(96) . "[${escapedDelimiters}]+" . Chr(96) . ");`n          return var_.split(pattern).filter(Boolean);`n        }`n      }`n`n      // MsgBox function`n      function MsgBox(value) {`n        console.log(value.toString());`n      }`n`n      // Sorting function`n`n      function SortLikeAHK(varName, options = " . Chr(34) . "" . Chr(34) . ") {`n        let delimiter = " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . "; // Default delimiter`n        let delimiterIndex = options.indexOf(" . Chr(34) . "D" . Chr(34) . ");`n`n        if (delimiterIndex !== -1) {`n          let delimiterChar = options[delimiterIndex + 1];`n          delimiter = delimiterChar === " . Chr(34) . "" . Chr(34) . " ? " . Chr(34) . "," . Chr(34) . " : delimiterChar;`n        }`n`n        let items = varName.split(new RegExp(delimiter === " . Chr(34) . "," . Chr(34) . " ? " . Chr(34) . "," . Chr(34) . " : " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "" . Chr(34) . " + delimiter));`n`n        // Remove empty items and trim whitespace`n        items = items.filter((item) => item.trim() !== " . Chr(34) . "" . Chr(34) . ");`n`n        // Apply sorting based on options`n        if (options.includes(" . Chr(34) . "N" . Chr(34) . ")) {`n          // Numeric sort`n          items.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));`n        } else if (options.includes(" . Chr(34) . "Random" . Chr(34) . ")) {`n          // Random sort`n          for (let i = items.length - 1; i > 0; i--) {`n            const j = Math.floor(Math.random() * (i + 1));`n            [items[i], items[j]] = [items[j], items[i]];`n          }`n        } else {`n          // Default alphabetical sort`n          items.sort((a, b) => {`n            const keyA = options.includes(" . Chr(34) . "C" . Chr(34) . ") ? a : a.toLowerCase();`n            const keyB = options.includes(" . Chr(34) . "C" . Chr(34) . ") ? b : b.toLowerCase();`n            if (keyA < keyB) return -1;`n            if (keyA > keyB) return 1;`n            return 0;`n          });`n        }`n`n        // Reverse if 'R' option is present`n        if (options.includes(" . Chr(34) . "R" . Chr(34) . ")) {`n          items.reverse();`n        }`n`n        // Remove duplicates if 'U' option is present`n        if (options.includes(" . Chr(34) . "U" . Chr(34) . ")) {`n          const seen = new Map();`n          items = items.filter((item) => {`n            const key = options.includes(" . Chr(34) . "C" . Chr(34) . ") ? item : item.toLowerCase();`n            if (!seen.has(key)) {`n              seen.set(key, item);`n              return true;`n            }`n            return false;`n          });`n        }`n`n        // Join the sorted items back into a string`n        const sortedVar = items.join(delimiter === " . Chr(34) . "," . Chr(34) . " ? " . Chr(34) . "," . Chr(34) . " : " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ");`n`n        return sortedVar;`n      }`n`n      function MakeHotKey(hotkey, callback) {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          const keys = hotkey.split(" . Chr(34) . "+" . Chr(34) . ").map((key) => key.trim().toLowerCase());`n          const modifiers = {`n            ctrl: event.ctrlKey,`n            shift: event.shiftKey,`n            alt: event.altKey,`n          };`n`n          let hotkeyPressed = true;`n          keys.forEach((key) => {`n            if (key === " . Chr(34) . "ctrl" . Chr(34) . " || key === " . Chr(34) . "shift" . Chr(34) . " || key === " . Chr(34) . "alt" . Chr(34) . ") {`n              if (!modifiers[key]) {`n                hotkeyPressed = false;`n              }`n            } else if (key === " . Chr(34) . "backspace" . Chr(34) . ") {`n              if (event.key !== " . Chr(34) . "Backspace" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (key.startsWith(" . Chr(34) . "arrow" . Chr(34) . ")) {`n              const arrowDirection = key.replace(" . Chr(34) . "arrow" . Chr(34) . ", " . Chr(34) . "" . Chr(34) . ");`n              if (arrowDirection === " . Chr(34) . "up" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowUp" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "down" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowDown" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "left" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowLeft" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "right" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowRight" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (key === " . Chr(34) . "enter" . Chr(34) . ") {`n              if (event.key !== " . Chr(34) . "Enter" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (!event.key.match(/^[0-9a-zA-Z]$/) && event.key !== key) {`n              hotkeyPressed = false;`n            } else if (event.key.toLowerCase() !== key && event.key.match(/^[a-zA-Z]$/)) {`n              hotkeyPressed = false;`n            }`n          });`n`n          if (hotkeyPressed) {`n            if (modifiers[" . Chr(34) . "shift" . Chr(34) . "]) {`n              callback(hotkey.toUpperCase());`n            } else {`n              callback(hotkey.toLowerCase());`n            }`n          }`n        });`n      }`n`n      // InStr`n      function InStr(Haystack, Needle, CaseSensitive = true, StartingPos = 1, Occurrence = 1) {`n        if (Haystack === null || Needle === null) return false;`n`n        // Adjust starting position if less than 1`n        StartingPos = Math.max(StartingPos, 1);`n`n        // Case-sensitive search by default`n        if (!CaseSensitive) {`n          Haystack = Haystack.toLowerCase();`n          Needle = Needle.toLowerCase();`n        }`n`n        let pos = -1;`n        let count = 0;`n        for (let i = StartingPos - 1; i < Haystack.length; i++) {`n          if (Haystack.substring(i, i + Needle.length) === Needle) {`n            count++;`n            if (count === Occurrence) {`n              pos = i + 1;`n              break;`n            }`n          }`n        }`n`n        return pos > 0; // Return true if the substring is found, false otherwise`n      }`n`n      function Trim(inputString) {`n        // Check if inputString is null or undefined`n        if (inputString == null) {`n          return " . Chr(34) . "" . Chr(34) . "; // Return an empty string if inputString is null or undefined`n        }`n        return inputString.replace(/^" . Chr(92) . "s+|" . Chr(92) . "s+$/g, " . Chr(34) . "" . Chr(34) . "); // Removes leading and trailing whitespace`n      }`n`n      function StrReplace(originalString, find, replaceWith) {`n        // Check if originalString is a string`n        if (typeof originalString !== " . Chr(34) . "string" . Chr(34) . ") {`n          return originalString; // Return originalString as is`n        }`n`n        // Escape special characters in the 'find' string to be used literally`n        const escapedFind = find.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "$&" . Chr(34) . ");`n`n        // Use replace method to replace all occurrences of 'find' with 'replaceWith'`n        return originalString.replace(new RegExp(escapedFind, " . Chr(34) . "g" . Chr(34) . "), replaceWith);`n      }`n`n      // Function to trim specified number of characters from the right side of a string`n      function StringTrimRight(input, numChars) {`n        if (typeof input === " . Chr(34) . "string" . Chr(34) . " && typeof numChars === " . Chr(34) . "number" . Chr(34) . " && numChars >= 0) {`n          return input.length > numChars ? input.substring(0, input.length - numChars) : " . Chr(34) . "" . Chr(34) . ";`n        } else {`n          console.error(" . Chr(34) . "Invalid input provided." . Chr(34) . ");`n          return input; // Return original input if trimming is not possible`n        }`n      }`n`n      // Define the str function`n      function str(value) {`n        return String(value);`n      }`n`n      // Single async function to structure the entire script`n      async function runScript() {`n        // Declare and assign a variable`n`n        MakeHotKey(" . Chr(34) . "Alt+Shift+Ctrl+F" . Chr(34) . ", function (hotkey) {`n          HotKeyCalledAltShiftCtrlF();`n        });`n`n        MakeHotKey(" . Chr(34) . "Alt+Shift+Ctrl+G" . Chr(34) . ", function (hotkey) {`n          HotKeyCalledAltShiftCtrlG();`n        });`n`n        var Gui1 = {};`n        Gui1 = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        Gui1.id = " . Chr(34) . "Gui1" . Chr(34) . ";`n`n        // Declare and assign a variable`n        let variables = {`n          null: null,`n        };`n`n        Gui1.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        Gui1.style.width = window.innerWidth + " . Chr(34) . "px" . Chr(34) . "; // Set the width`n        Gui1.style.height = " . Chr(34) . "" . Chr(34) . " + BuildInVars(" . Chr(34) . "A_ScreenHeight" . Chr(34) . ") + " . Chr(34) . "px" . Chr(34) . "; // Set the height`n        Gui1.style.background = " . Chr(34) . "linear-gradient(90deg, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 0%, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 100%)" . Chr(34) . ";`n        Gui1.style.backgroundColor = " . Chr(34) . "linear-gradient(90deg, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 0%, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 100%)" . Chr(34) . ";`n        Gui1.style.color = " . Chr(34) . "white" . Chr(34) . ";`n        Gui1.style.fontSize = " . Chr(34) . "15px" . Chr(34) . ";`n        Gui1.style.padding = " . Chr(34) . "0px" . Chr(34) . ";`n        Gui1.style.borderRadius = " . Chr(34) . "0px" . Chr(34) . ";`n        Gui1.style.fontFamily = " . Chr(34) . ", sans-serif" . Chr(34) . "; // Specify your desired font here`n        Gui1.style.zIndex = " . Chr(34) . "10" . Chr(34) . ";`n        document.body.appendChild(Gui1); // Append the GUI window to the body`n        Gui1.style.display = " . Chr(34) . "block" . Chr(34) . ";`n        let textOldSave;`n        document.documentElement.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "padding: 0; margin: 0;" . Chr(34) . ");`n        document.head.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "padding: 0; margin: 0;" . Chr(34) . ");`n        document.body.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "overflow-x: hidden;padding: 0; margin: 0;" . Chr(34) . ");`n        variables.ideTEXT = " . Chr(96) . displayExampleText . Chr(96) . ";`n        " . "`n        // Assuming variables.theSHA is already set`n        const shaKey = " . Chr(34) . "HTVM-IDE-" . theSHA . Chr(34) . ";`n`n        // Retrieve the plain text from local storage`n" . modeRunHTMLuseLocalStorage2 . "`n        variables.AScreenHeight = BuildInVars(" . Chr(34) . "A_ScreenHeight" . Chr(34) . ") - 20;`n        variables.AScreenWidth = BuildInVars(" . Chr(34) . "A_ScreenWidth" . Chr(34) . ") - 20;`n        var saveBackCodeBugFix = variables.ideTEXT;`n        AddIDE(Gui1, 10, 10, variables.AScreenWidth, variables.AScreenHeight, " . Chr(34) . "Gui1IDE1" . Chr(34) . ", 18, " . Chr(34) . "autohotkey" . Chr(34) . ", IDE1, variables.idetext);`n`n        async function IDE1(A_GuiControl) {`n          variables.idetext = A_GuiControl;`n" . modeRunHTMLuseLocalStorage . "`n        }`n" . "        async function HotKeyCalledAltShiftCtrlF() {`n          // console.log(" . Chr(34) . "HotKeyCalled AltShiftCtrlF" . Chr(34) . ")`n          textOldSave = variables.idetext;`n          variables.TextData = " . Chr(34) . "" . Chr(34) . ";`n          variables.out = " . Chr(34) . "" . Chr(34) . ";`n          variables.base64ImageData = " . Chr(34) . "" . Chr(34) . ";`n          variables.base64soundList = " . Chr(34) . "" . Chr(34) . ";`n          variables.base64iconList = " . Chr(34) . "" . Chr(34) . ";`n          variables.base64VideoData = " . Chr(34) . "" . Chr(34) . ";`n          variables.jsCode01CanvasW = " . Chr(34) . "" . Chr(34) . ";`n          variables.jsCode01CanvasH = " . Chr(34) . "" . Chr(34) . ";`n          variables.skipLeftCuleyForFuncPLS = 0;`n          variables.eavbnsalvbaslv = 0;`n          variables.ifWeUseCanvas = 0;`n          variables.weUseCnanvasAtALL = 0;`n          variables.numOfTextData = 0;`n          variables.funcs = " . Chr(34) . "let funcs = {" . Chr(92) . "n" . Chr(34) . ";`n          variables.doWeEvenDecAnyFuncHUH = 0;`n          variables.onKeyPress = " . Chr(34) . "" . Chr(34) . ";`n          variables.jsCodeGui = " . Chr(34) . "" . Chr(34) . ";`n          variables.isFullScrenOnce = 0;`n          variables.HotKeyCalledHotKyes = " . Chr(34) . "" . Chr(34) . ";`n          variables.jsCode = " . Chr(34) . "" . Chr(34) . ";`n          variables.outAHKCodeTrimed = " . Chr(34) . "" . Chr(34) . ";`n          variables.idetext = await StrReplace(variables.idetext, await Chr(13), " . Chr(34) . "" . Chr(34) . ");`n          var items1 = LoopParseFunc(variables.idetext, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n          for (/* Loop Parse */ let A_Index1 = 1; A_Index1 <= items1.length; A_Index1++) {`n            variables.A_Index1 = A_Index1;`n            variables.A_LoopField1 = items1[A_Index1 - 1];`n            variables.outAHKCodeTrimed += (await Trim(variables.A_LoopField1)) + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n          }`n          variables.idetext = StringTrimRight(variables.outAHKCodeTrimed, 1);`n          variables.AHKcodeOUT754754 = " . Chr(34) . "" . Chr(34) . ";`n          variables.areWEinSome34sNum = 0;`n          variables.theIdNumOfThe34 = 0;`n          var items2 = LoopParseFunc(variables.idetext);`n          for (/* Loop Parse */ let A_Index2 = 1; A_Index2 <= items2.length; A_Index2++) {`n            variables.A_Index2 = A_Index2;`n            variables.A_LoopField2 = items2[A_Index2 - 1];`n            variables[" . Chr(34) . "theIdNumOfThe34theVar" . Chr(34) . " + variables.A_Index2] = await Chr(34);`n          }`n          var items3 = LoopParseFunc(variables.idetext);`n          for (/* Loop Parse */ let A_Index3 = 1; A_Index3 <= items3.length; A_Index3++) {`n            variables.A_Index3 = A_Index3;`n            variables.A_LoopField3 = items3[A_Index3 - 1];`n            if (variables.A_LoopField3 == (await Chr(34))) {`n              variables.areWEinSome34sNum += 1;`n            }`n            if (variables.areWEinSome34sNum == 1) {`n              if (variables.A_LoopField3 != (await Chr(34))) {`n                variables[" . Chr(34) . "theIdNumOfThe34theVar" . Chr(34) . " + variables.theIdNumOfThe34] += variables.A_LoopField3;`n              } else {`n                variables.theIdNumOfThe34 += 1;`n                variables.AHKcodeOUT754754 += " . Chr(34) . "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(34) . " + (await Chr(65)) + (await Chr(65)) + (await str(variables.theIdNumOfThe34)) + (await Chr(65)) + (await Chr(65));`n              }`n            }`n            if (variables.areWEinSome34sNum == 2 || variables.areWEinSome34sNum == 0) {`n              if (variables.A_LoopField3 != (await Chr(34))) {`n                variables.AHKcodeOUT754754 += variables.A_LoopField3;`n              }`n              variables.areWEinSome34sNum = 0;`n            }`n          }`n          variables.idetext = variables.AHKcodeOUT754754;`n          for (/* Normal Loop */ variables.A_Index4 = 1; variables.A_Index4 <= variables.theIdNumOfThe34; variables.A_Index4++) {`n            variables[" . Chr(34) . "theIdNumOfThe34theVar" . Chr(34) . " + variables.A_Index4] += await Chr(34);`n          }`n          variables.sstr23IfFuncInNAMEnum = 0;`n          variables.outCodeFixBraces = " . Chr(34) . "" . Chr(34) . ";`n          for (/* Normal Loop */ variables.A_Index5 = 1; variables.A_Index5 <= 2; variables.A_Index5++) {`n            variables.outCodeFixBraces = " . Chr(34) . "" . Chr(34) . ";`n            var items6 = LoopParseFunc(variables.idetext, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n            for (/* Loop Parse */ let A_Index6 = 1; A_Index6 <= items6.length; A_Index6++) {`n              variables.A_Index6 = A_Index6;`n              variables.A_LoopField6 = items6[A_Index6 - 1];`n              if ((await InStr(await Trim(variables.A_LoopField6), " . Chr(34) . "{" . Chr(34) . ")) && (await Trim(variables.A_LoopField6)) != " . Chr(34) . "{" . Chr(34) . ") {`n                variables.outCodeFixBraces += (await Trim(await StrReplace(await Trim(variables.A_LoopField6), " . Chr(34) . "{" . Chr(34) . ", " . Chr(34) . "" . Chr(34) . "))) + " . Chr(34) . "" . Chr(92) . "n{" . Chr(92) . "n" . Chr(34) . ";`n              } else if ((await InStr(await Trim(variables.A_LoopField6), " . Chr(34) . "}" . Chr(34) . ")) && (await Trim(variables.A_LoopField6)) != " . Chr(34) . "}" . Chr(34) . ") {`n                variables.outCodeFixBraces += " . Chr(34) . "}" . Chr(92) . "n" . Chr(34) . " + (await Trim(await StrReplace(await Trim(variables.A_LoopField6), " . Chr(34) . "}" . Chr(34) . ", " . Chr(34) . "" . Chr(34) . "))) + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n              } else {`n                variables.outCodeFixBraces += (await Trim(variables.A_LoopField6)) + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n              }`n            }`n            variables.idetext = StringTrimRight(variables.outCodeFixBraces, 1);`n          }`n          variables.idetext = await KandRstyleFormat(await indent_nested_curly_braces(variables.idetext));`n          for (/* Normal Loop */ variables.A_Index7 = 1; variables.A_Index7 <= variables.theIdNumOfThe34; variables.A_Index7++) {`n            variables.idetext = await StrReplace(variables.idetext, " . Chr(34) . "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(34) . " + (await Chr(65)) + (await Chr(65)) + (await str(variables.A_Index7)) + (await Chr(65)) + (await Chr(65)), variables[" . Chr(34) . "theIdNumOfThe34theVar" . Chr(34) . " + variables.A_Index7]);`n          }`n          GuiControl(" . Chr(34) . "textide" . Chr(34) . ", " . Chr(34) . "Gui1IDE1" . Chr(34) . ", variables.idetext);`n        }`n        async function KandRstyleFormat(code) {`n          variables.code = code;`n          variables.codeOut = " . Chr(34) . "" . Chr(34) . ";`n          var items8 = LoopParseFunc(variables.code, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n          for (/* Loop Parse */ let A_Index8 = 1; A_Index8 <= items8.length; A_Index8++) {`n            variables.A_Index8 = A_Index8;`n            variables.A_LoopField8 = items8[A_Index8 - 1];`n            variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.A_Index8] = await Trim(variables.A_LoopField8);`n          }`n          variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.A_Index] = " . Chr(34) . " " . Chr(34) . ";`n          variables.skipLine = 0;`n          var items9 = LoopParseFunc(variables.code, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n          for (/* Loop Parse */ let A_Index9 = 1; A_Index9 <= items9.length; A_Index9++) {`n            variables.A_Index9 = A_Index9;`n            variables.A_LoopField9 = items9[A_Index9 - 1];`n            variables.AIndex = variables.A_Index9 + 1;`n            if (variables.skipLine == 1) {`n              variables.skipLine = 0;`n            } else {`n              if (variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.AIndex] != " . Chr(34) . "{" . Chr(34) . ") {`n                variables.codeOut += variables.A_LoopField9 + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n              }`n            }`n            if (variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.AIndex] == " . Chr(34) . "{" . Chr(34) . ") {`n              variables.skipLine = 1;`n              variables.codeOut += variables.A_LoopField9 + " . Chr(34) . " {" . Chr(92) . "n" . Chr(34) . ";`n            }`n          }`n          variables.codeOut = StringTrimRight(variables.codeOut, 1);`n          variables.codeOut2 = " . Chr(34) . "" . Chr(34) . ";`n          var items10 = LoopParseFunc(variables.codeOut, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n          for (/* Loop Parse */ let A_Index10 = 1; A_Index10 <= items10.length; A_Index10++) {`n            variables.A_Index10 = A_Index10;`n            variables.A_LoopField10 = items10[A_Index10 - 1];`n            variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.A_Index10] = await Trim(variables.A_LoopField10);`n          }`n          variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.A_Index] = " . Chr(34) . " " . Chr(34) . ";`n          variables.skipLine = 0;`n          var items11 = LoopParseFunc(variables.codeOut, " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ", " . Chr(34) . "" . Chr(92) . "r" . Chr(34) . ");`n          for (/* Loop Parse */ let A_Index11 = 1; A_Index11 <= items11.length; A_Index11++) {`n            variables.A_Index11 = A_Index11;`n            variables.A_LoopField11 = items11[A_Index11 - 1];`n            variables.AIndex = variables.A_Index11 + 1;`n            if (variables.skipLine == 1) {`n              variables.skipLine = 0;`n            } else {`n              if (variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.AIndex] != " . Chr(34) . keyWordElse . " {" . Chr(34) . ") {`n                variables.codeOut2 += variables.A_LoopField11 + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ";`n              }`n            }`n            if (variables[" . Chr(34) . "lookInTheFurtre" . Chr(34) . " + variables.AIndex] == " . Chr(34) . keyWordElse . " {" . Chr(34) . ") {`n              variables.skipLine = 1;`n              variables.scoaceses = " . Chr(34) . "" . Chr(34) . ";`n              var items12 = LoopParseFunc(variables.A_LoopField11);`n              for (/* Loop Parse */ let A_Index12 = 1; A_Index12 <= items12.length; A_Index12++) {`n                variables.A_Index12 = A_Index12;`n                variables.A_LoopField12 = items12[A_Index12 - 1];`n                if (variables.A_LoopField12 != " . Chr(34) . " " . Chr(34) . ") {`n                  break;`n                } else {`n                  variables.scoaceses += " . Chr(34) . " " . Chr(34) . ";`n                }`n              }`n              variables.codeOut2 += variables.scoaceses + " . Chr(34) . "} " . keyWordElse . Chr(34) . " + " . Chr(34) . " {" . Chr(92) . "n" . Chr(34) . ";`n            }`n          }`n          variables.codeOut = StringTrimRight(variables.codeOut2, 1);`n          return variables.codeOut;`n        }`n        async function RepeatSpaces(count) {`n          variables.count = count;`n          variables.spaces = " . Chr(34) . "" . Chr(34) . ";`n          for (/* Normal Loop */ variables.A_Index10 = 1; variables.A_Index10 <= variables.count; variables.A_Index10++) {`n            variables.spaces += " . Chr(34) . " " . Chr(34) . ";`n          }`n          return variables.spaces;`n        }`n        async function indent_nested_curly_braces(input_string) {`n          variables.input_string = input_string;`n          variables.indent_size = 4;`n          variables.current_indent = 0;`n          variables.result = " . Chr(34) . "" . Chr(34) . ";`n          var items11 = variables.input_string.split(/" . Chr(92) . "r?" . Chr(92) . "n|" . Chr(92) . "r/);`n          for (/* Loop Parse */ let A_Index11 = 1; A_Index11 <= items11.length; A_Index11++) {`n            variables.A_Index11 = A_Index11;`n            variables.A_LoopField11 = items11[A_Index11 - 1];`n            variables.trimmed_line = await Trim(variables.A_LoopField11);`n            if (variables.trimmed_line == (await Chr(123))) {`n              variables.result += (await RepeatSpaces(variables.current_indent)) + (variables.trimmed_line + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ");`n              variables.current_indent = variables.current_indent + variables.indent_size;`n            } else if (variables.trimmed_line == (await Chr(125))) {`n              variables.current_indent = variables.current_indent - variables.indent_size;`n              variables.result += (await RepeatSpaces(variables.current_indent)) + (variables.trimmed_line + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ");`n            } else {`n              variables.result += (await RepeatSpaces(variables.current_indent)) + (variables.trimmed_line + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . ");`n            }`n          }`n          variables.result = StringTrimRight(variables.result, 1);`n          // Return the result`n          return variables.result;`n        }`n      }`n`n      // Call the async function to start the script`n      runScript();`n    " . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(60) . Chr(47) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(62) . Chr(10) . Chr(60) . Chr(47) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(62)








regexCode := "{ token: " . Chr(34) . "comment" . Chr(34) . ", regex: " . Chr(34) . keyWordComment . ".*$" . Chr(34) . " },`n              { token: " . Chr(34) . "keywords" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . keywords . ")" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "command" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . keyWordsCommandsFolrmated . ")(?=" . Chr(92) . "" . Chr(92) . ",)" . Chr(34) . " },`n              { token: " . Chr(34) . "functions" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . functionsForHighlighting . ")(?=" . Chr(92) . "" . Chr(92) . "()" . Chr(34) . " },`n              { token: " . Chr(34) . "BuildInFunc" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . keyWordAIndex . "|" . keyWordALoopField . ")" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "arrayMethods" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . ".(" . keyWordArrayMethods . ")" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "static_types" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . keyWordTypes . ")" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "operators" . Chr(34) . ", regex: " . Chr(34) . " && | " . keyWordOrOperator . " | " . keyWordAndOperator . " | && " . Chr(34) . " },`n              { token: " . Chr(34) . "trueANDfalse" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b(" . keyWordTrue . "|" . keyWordFalse . "|" . keyWordGlobal . ")" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "variables" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b[a-zA-Z_][a-zA-Z0-9_]*" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "constant.numeric" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "b[0-9]+" . Chr(92) . "" . Chr(92) . "b" . Chr(34) . " },`n              { token: " . Chr(34) . "braces_Open" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "{" . Chr(34) . " },`n              { token: " . Chr(34) . "braces_Close" . Chr(34) . ", regex: " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "}" . Chr(34) . " },`n              { token: " . Chr(34) . "string" . Chr(34) . ", regex: '" . Chr(34) . ".*?" . Chr(34) . "' },`n              // Multi-line comments`n              {`n                token: " . Chr(34) . "comment.block" . Chr(34) . ", // Token for multi-line comments`n                regex: /" . keyWordCommentOpenMultiLine . "/, // Start of multi-line comment`n                next: " . Chr(34) . "comment_block" . Chr(34) . ",`n              },`n            ],`n            comment_block: [`n              {`n                token: " . Chr(34) . "comment.block" . Chr(34) . ",`n                regex: /.*?" . keyWordCommentCloseMultiLine . "/, // End of multi-line comment`n                next: " . Chr(34) . "start" . Chr(34) . ", // Go back to the start state`n              },`n              {`n                token: " . Chr(34) . "comment.block" . Chr(34) . ",`n                regex: /.*/, // Any other content within the comment`n              },`n            ],`n          };`n        };`n"




allIDEHTML := upCode . regexCode . downCode

return allIDEHTML
}